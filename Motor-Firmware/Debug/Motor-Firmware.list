
Motor-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800bb78  0800bb78  0001bb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c14c  0800c14c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c14c  0800c14c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c14c  0800c14c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c14c  0800c14c  0001c14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab4  200001e8  0800c33c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  0800c33c  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fdd  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004015  00000000  00000000  000391ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde3  00000000  00000000  0003fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f19  00000000  00000000  0005bca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d53c  00000000  00000000  00075bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001130f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a4  00000000  00000000  00113148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb60 	.word	0x0800bb60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800bb60 	.word	0x0800bb60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4605      	mov	r5, r0
 8001074:	460c      	mov	r4, r1
 8001076:	2200      	movs	r2, #0
 8001078:	2300      	movs	r3, #0
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_ADC1_Init+0x74>)
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <MX_ADC1_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC1_Init+0x74>)
 800110a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800110e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_ADC1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC1_Init+0x74>)
 8001118:	2201      	movs	r2, #1
 800111a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC1_Init+0x74>)
 800111e:	f000 fe81 	bl	8001e24 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 fbf4 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2301      	movs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC1_Init+0x74>)
 800113e:	f001 f909 	bl	8002354 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001148:	f000 fbe4 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000204 	.word	0x20000204
 8001158:	40012400 	.word	0x40012400

0800115c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_ADC2_Init+0x74>)
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <MX_ADC2_Init+0x78>)
 8001170:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_ADC2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_ADC2_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_ADC2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_ADC2_Init+0x74>)
 8001186:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800118a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_ADC2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC2_Init+0x74>)
 8001194:	2201      	movs	r2, #1
 8001196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_ADC2_Init+0x74>)
 800119a:	f000 fe43 	bl	8001e24 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 fbb6 	bl	8001914 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_ADC2_Init+0x74>)
 80011ba:	f001 f8cb 	bl	8002354 <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80011c4:	f000 fba6 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000234 	.word	0x20000234
 80011d4:	40012800 	.word	0x40012800

080011d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_ADC_MspInit+0xbc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d122      	bne.n	800123e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a20      	ldr	r2, [pc, #128]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_Throttle_Pin;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Throttle_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	4619      	mov	r1, r3
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001238:	f001 fcaa 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800123c:	e026      	b.n	800128c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_ADC_MspInit+0xc8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d121      	bne.n	800128c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 800124e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_ADC_MspInit+0xc0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_Regen_Pin;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_Regen_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_ADC_MspInit+0xc4>)
 8001288:	f001 fc82 	bl	8002b90 <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40012400 	.word	0x40012400
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40012800 	.word	0x40012800

080012a4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_CAN_Init+0x60>)
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <MX_CAN_Init+0x64>)
 80012ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_CAN_Init+0x60>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_CAN_Init+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_CAN_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_CAN_Init+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_CAN_Init+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_CAN_Init+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_CAN_Init+0x60>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_CAN_Init+0x60>)
 80012da:	2200      	movs	r2, #0
 80012dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_CAN_Init+0x60>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_CAN_Init+0x60>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CAN_Init+0x60>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_CAN_Init+0x60>)
 80012f2:	f001 f9c2 	bl	800267a <HAL_CAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 fb0a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000264 	.word	0x20000264
 8001308:	40006400 	.word	0x40006400

0800130c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_CAN_MspInit+0x8c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d131      	bne.n	8001390 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_CAN_MspInit+0x90>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <HAL_CAN_MspInit+0x90>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_CAN_MspInit+0x90>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_CAN_MspInit+0x90>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_CAN_MspInit+0x90>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_CAN_MspInit+0x90>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800135c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <HAL_CAN_MspInit+0x94>)
 8001372:	f001 fc0d 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_CAN_MspInit+0x94>)
 800138c:	f001 fc00 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40006400 	.word	0x40006400
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800

080013a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <MX_FREERTOS_Init+0x48>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <MX_FREERTOS_Init+0x4c>)
 80013ae:	f003 fb05 	bl	80049bc <osThreadNew>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <MX_FREERTOS_Init+0x50>)
 80013b6:	6013      	str	r3, [r2, #0]

  /* creation of GetADCValues */
  GetADCValuesHandle = osThreadNew(getADCValues, NULL, &GetADCValues_attributes);
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <MX_FREERTOS_Init+0x54>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <MX_FREERTOS_Init+0x58>)
 80013be:	f003 fafd 	bl	80049bc <osThreadNew>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <MX_FREERTOS_Init+0x5c>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* creation of updateFlags */
  updateFlagsHandle = osThreadNew(startUpdateFlags, NULL, &updateFlags_attributes);
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <MX_FREERTOS_Init+0x60>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <MX_FREERTOS_Init+0x64>)
 80013ce:	f003 faf5 	bl	80049bc <osThreadNew>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <MX_FREERTOS_Init+0x68>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* creation of motorStateMachi */
  motorStateMachiHandle = osThreadNew(startMotorStateMachine, NULL, &motorStateMachi_attributes);
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <MX_FREERTOS_Init+0x6c>)
 80013da:	2100      	movs	r1, #0
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_FREERTOS_Init+0x70>)
 80013de:	f003 faed 	bl	80049bc <osThreadNew>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <MX_FREERTOS_Init+0x74>)
 80013e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	0800bbfc 	.word	0x0800bbfc
 80013f0:	0800141d 	.word	0x0800141d
 80013f4:	200002a0 	.word	0x200002a0
 80013f8:	0800bc20 	.word	0x0800bc20
 80013fc:	0800143d 	.word	0x0800143d
 8001400:	200002a4 	.word	0x200002a4
 8001404:	0800bc44 	.word	0x0800bc44
 8001408:	080014c9 	.word	0x080014c9
 800140c:	200002a8 	.word	0x200002a8
 8001410:	0800bc68 	.word	0x0800bc68
 8001414:	0800151d 	.word	0x0800151d
 8001418:	200002ac 	.word	0x200002ac

0800141c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001424:	2120      	movs	r1, #32
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <StartDefaultTask+0x1c>)
 8001428:	f001 fd4e 	bl	8002ec8 <HAL_GPIO_TogglePin>
     osDelay(500);
 800142c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001430:	f003 fb6e 	bl	8004b10 <osDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001434:	e7f6      	b.n	8001424 <StartDefaultTask+0x8>
 8001436:	bf00      	nop
 8001438:	40010800 	.word	0x40010800

0800143c <getADCValues>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADCValues */
void getADCValues(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADCValues */
  /* Infinite loop */
  for(;;)
  {
	// Get ADC values for throttle and regen
	HAL_ADC_Start(&hadc1);
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <getADCValues+0x78>)
 8001446:	f000 fdc5 	bl	8001fd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800144a:	f04f 31ff 	mov.w	r1, #4294967295
 800144e:	4819      	ldr	r0, [pc, #100]	; (80014b4 <getADCValues+0x78>)
 8001450:	f000 fe6e 	bl	8002130 <HAL_ADC_PollForConversion>
	ADC_throttle_val = HAL_ADC_GetValue(&hadc1);
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <getADCValues+0x78>)
 8001456:	f000 ff71 	bl	800233c <HAL_ADC_GetValue>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <getADCValues+0x7c>)
 8001460:	801a      	strh	r2, [r3, #0]

	event_flags.throttle_pressed = ADC_throttle_val > ADC_DEADZONE;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <getADCValues+0x7c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800146a:	bf8c      	ite	hi
 800146c:	2301      	movhi	r3, #1
 800146e:	2300      	movls	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <getADCValues+0x80>)
 8001476:	705a      	strb	r2, [r3, #1]

	HAL_ADC_Start(&hadc2);
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <getADCValues+0x84>)
 800147a:	f000 fdab 	bl	8001fd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800147e:	f04f 31ff 	mov.w	r1, #4294967295
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <getADCValues+0x84>)
 8001484:	f000 fe54 	bl	8002130 <HAL_ADC_PollForConversion>
	ADC_regen_val = HAL_ADC_GetValue(&hadc2);
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <getADCValues+0x84>)
 800148a:	f000 ff57 	bl	800233c <HAL_ADC_GetValue>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <getADCValues+0x88>)
 8001494:	801a      	strh	r2, [r3, #0]

	event_flags.regen_pressed = ADC_regen_val > ADC_DEADZONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <getADCValues+0x88>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800149e:	bf8c      	ite	hi
 80014a0:	2301      	movhi	r3, #1
 80014a2:	2300      	movls	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <getADCValues+0x80>)
 80014aa:	701a      	strb	r2, [r3, #0]

    osDelay(ADC_POLL_DELAY);
 80014ac:	200a      	movs	r0, #10
 80014ae:	f003 fb2f 	bl	8004b10 <osDelay>
	HAL_ADC_Start(&hadc1);
 80014b2:	e7c7      	b.n	8001444 <getADCValues+0x8>
 80014b4:	20000204 	.word	0x20000204
 80014b8:	2000028e 	.word	0x2000028e
 80014bc:	20000294 	.word	0x20000294
 80014c0:	20000234 	.word	0x20000234
 80014c4:	20000290 	.word	0x20000290

080014c8 <startUpdateFlags>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUpdateFlags */
void startUpdateFlags(void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  // TODO impliment Mechanical brake signal to state machine
	  // TODO impliment battery charge check for regen
	  // order of priorities beginning with most important: regen braking, encoder motor command, cruise control
	  if (event_flags.regen_pressed) {
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <startUpdateFlags+0x4c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <startUpdateFlags+0x1a>
		  state = REGEN_READY;
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <startUpdateFlags+0x50>)
 80014dc:	2204      	movs	r2, #4
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e014      	b.n	800150c <startUpdateFlags+0x44>
	  }
	  else if (event_flags.cruise_status) {
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <startUpdateFlags+0x4c>)
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <startUpdateFlags+0x2c>
	  	 state = CRUISE_READY;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <startUpdateFlags+0x50>)
 80014ee:	2208      	movs	r2, #8
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e00b      	b.n	800150c <startUpdateFlags+0x44>
	  }
	  else if (event_flags.throttle_pressed) {
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <startUpdateFlags+0x4c>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <startUpdateFlags+0x3e>
	  	  	 state = NORMAL_READY;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <startUpdateFlags+0x50>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e002      	b.n	800150c <startUpdateFlags+0x44>
	  }
	  else {
	  	 state = IDLE;
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <startUpdateFlags+0x50>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(EVENT_FLAG_UPDATE_DELAY);
 800150c:	2005      	movs	r0, #5
 800150e:	f003 faff 	bl	8004b10 <osDelay>
	  if (event_flags.regen_pressed) {
 8001512:	e7dd      	b.n	80014d0 <startUpdateFlags+0x8>
 8001514:	20000294 	.word	0x20000294
 8001518:	2000028c 	.word	0x2000028c

0800151c <startMotorStateMachine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMotorStateMachine */
void startMotorStateMachine(void *argument)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af02      	add	r7, sp, #8
 8001522:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  //TODO Add Wrapper Functions
  for(;;)
  {
    if(state == REGEN_READY)
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <startMotorStateMachine+0x118>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d11c      	bne.n	8001566 <startMotorStateMachine+0x4a>
    {
    	velocity.float_value = 0;
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
    	current.float_value = (ADC_regen_val - ADC_DEADZONE >= 0 ? ((float)(ADC_regen_val - ADC_DEADZONE))/ADC_MAX : 0.0);
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <startMotorStateMachine+0x11c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800153a:	d30d      	bcc.n	8001558 <startMotorStateMachine+0x3c>
 800153c:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <startMotorStateMachine+0x11c>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fbc9 	bl	8000cdc <__aeabi_i2f>
 800154a:	4603      	mov	r3, r0
 800154c:	493b      	ldr	r1, [pc, #236]	; (800163c <startMotorStateMachine+0x120>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fccc 	bl	8000eec <__aeabi_fdiv>
 8001554:	4603      	mov	r3, r0
 8001556:	e001      	b.n	800155c <startMotorStateMachine+0x40>
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]

    	mode = 'R';
 800155e:	2352      	movs	r3, #82	; 0x52
 8001560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001564:	e042      	b.n	80015ec <startMotorStateMachine+0xd0>
    }
    else if(state == NORMAL_READY)
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <startMotorStateMachine+0x118>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d123      	bne.n	80015b6 <startMotorStateMachine+0x9a>
    {
    	if (event_flags.reverse_enable)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <startMotorStateMachine+0x124>)
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <startMotorStateMachine+0x62>
    		velocity.float_value = -100.0;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <startMotorStateMachine+0x128>)
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	e001      	b.n	8001582 <startMotorStateMachine+0x66>
    	else
    		velocity.float_value = 100.0;
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <startMotorStateMachine+0x12c>)
 8001580:	60bb      	str	r3, [r7, #8]

    	current.float_value = (ADC_throttle_val - ADC_DEADZONE >= 0 ? ((float)(ADC_throttle_val - ADC_DEADZONE))/ADC_MAX : 0.0);
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <startMotorStateMachine+0x130>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800158a:	d30d      	bcc.n	80015a8 <startMotorStateMachine+0x8c>
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <startMotorStateMachine+0x130>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fba1 	bl	8000cdc <__aeabi_i2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4927      	ldr	r1, [pc, #156]	; (800163c <startMotorStateMachine+0x120>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fca4 	bl	8000eec <__aeabi_fdiv>
 80015a4:	4603      	mov	r3, r0
 80015a6:	e001      	b.n	80015ac <startMotorStateMachine+0x90>
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]

    	mode = 'D';
 80015ae:	2344      	movs	r3, #68	; 0x44
 80015b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015b4:	e01a      	b.n	80015ec <startMotorStateMachine+0xd0>
    }
    else if (state == CRUISE_READY)
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <startMotorStateMachine+0x118>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d10d      	bne.n	80015da <startMotorStateMachine+0xbe>
    {
    	velocity.float_value = velocity_cruise;
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <startMotorStateMachine+0x134>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb8a 	bl	8000cdc <__aeabi_i2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	60bb      	str	r3, [r7, #8]
    	current.float_value = 1;
 80015cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015d0:	60fb      	str	r3, [r7, #12]

    	mode = 'C';
 80015d2:	2343      	movs	r3, #67	; 0x43
 80015d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015d8:	e008      	b.n	80015ec <startMotorStateMachine+0xd0>
    }
    else
    {
    	velocity.float_value = 0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
    	current.float_value = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]

    	mode = 'I';
 80015e6:	2349      	movs	r3, #73	; 0x49
 80015e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    //TODO Replace with CAN
    sprintf(msg, "S:%c V:%d C:%d   \r", mode,(int)velocity.float_value, (int)(current.float_value*100));
 80015ec:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fd16 	bl	8001024 <__aeabi_f2iz>
 80015f8:	4605      	mov	r5, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4912      	ldr	r1, [pc, #72]	; (8001648 <startMotorStateMachine+0x12c>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd0c 	bl	8001024 <__aeabi_f2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	f107 0010 	add.w	r0, r7, #16
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	462b      	mov	r3, r5
 8001616:	4622      	mov	r2, r4
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <startMotorStateMachine+0x138>)
 800161a:	f006 fcf1 	bl	8008000 <siprintf>
    HAL_UART_Transmit(&huart2, msg, sizeof(msg),100);
 800161e:	f107 0110 	add.w	r1, r7, #16
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	2214      	movs	r2, #20
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <startMotorStateMachine+0x13c>)
 8001628:	f002 fcd7 	bl	8003fda <HAL_UART_Transmit>
    osDelay(10);
 800162c:	200a      	movs	r0, #10
 800162e:	f003 fa6f 	bl	8004b10 <osDelay>
  {
 8001632:	e777      	b.n	8001524 <startMotorStateMachine+0x8>
 8001634:	2000028c 	.word	0x2000028c
 8001638:	20000290 	.word	0x20000290
 800163c:	457a0000 	.word	0x457a0000
 8001640:	20000294 	.word	0x20000294
 8001644:	c2c80000 	.word	0xc2c80000
 8001648:	42c80000 	.word	0x42c80000
 800164c:	2000028e 	.word	0x2000028e
 8001650:	2000029c 	.word	0x2000029c
 8001654:	0800bbb0 	.word	0x0800bbb0
 8001658:	200002fc 	.word	0x200002fc

0800165c <HAL_GPIO_EXTI_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
	char msg[20];
	if(GPIO_Pin == BTN_CRUISE_TOGGLE_Pin)
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166c:	d117      	bne.n	800169e <HAL_GPIO_EXTI_Callback+0x42>
	{
		if(state == NORMAL_READY || state == CRUISE_READY)
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_GPIO_EXTI_Callback+0x22>
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d150      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
		{
			event_flags.cruise_status = !event_flags.cruise_status;
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001692:	70da      	strb	r2, [r3, #3]
			velocity_cruise = velocity_current;
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 800169a:	6013      	str	r3, [r2, #0]
	{
		if(state == IDLE)
			event_flags.reverse_enable = !event_flags.reverse_enable;
	}
	//osDelay(5);
}
 800169c:	e040      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN_CRUISE_UP_Pin)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a4:	d112      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x70>
		if(event_flags.cruise_status)
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016a8:	78db      	ldrb	r3, [r3, #3]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d037      	beq.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
			if(velocity_cruise + CRUISE_INCREMENT_VAL < CRUISE_MAX)
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b1c      	cmp	r3, #28
 80016b6:	dc05      	bgt.n	80016c4 <HAL_GPIO_EXTI_Callback+0x68>
				velocity_cruise += CRUISE_INCREMENT_VAL;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	e02d      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
				velocity_cruise = CRUISE_MAX;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016c6:	221e      	movs	r2, #30
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	e029      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN_CRUISE_DOWN_Pin)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016d2:	d112      	bne.n	80016fa <HAL_GPIO_EXTI_Callback+0x9e>
		if(event_flags.cruise_status)
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d020      	beq.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
			if(velocity_cruise - CRUISE_INCREMENT_VAL > CRUISE_MIN)
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	dd05      	ble.n	80016f2 <HAL_GPIO_EXTI_Callback+0x96>
				velocity_cruise -= CRUISE_INCREMENT_VAL;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a12      	ldr	r2, [pc, #72]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	e016      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
				velocity_cruise = CRUISE_MIN;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016f4:	2205      	movs	r2, #5
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	e012      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN_REVERSE_Pin)
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001700:	d10e      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
		if(state == IDLE)
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d10a      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0xc4>
			event_flags.reverse_enable = !event_flags.reverse_enable;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_GPIO_EXTI_Callback+0xd4>)
 800171e:	709a      	strb	r2, [r3, #2]
}
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000028c 	.word	0x2000028c
 8001730:	20000294 	.word	0x20000294
 8001734:	20000000 	.word	0x20000000
 8001738:	2000029c 	.word	0x2000029c

0800173c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_GPIO_Init+0xcc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a2c      	ldr	r2, [pc, #176]	; (8001808 <MX_GPIO_Init+0xcc>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <MX_GPIO_Init+0xcc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_GPIO_Init+0xcc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a26      	ldr	r2, [pc, #152]	; (8001808 <MX_GPIO_Init+0xcc>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_GPIO_Init+0xcc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_GPIO_Init+0xcc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <MX_GPIO_Init+0xcc>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <MX_GPIO_Init+0xcc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_GPIO_Init+0xcc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a1a      	ldr	r2, [pc, #104]	; (8001808 <MX_GPIO_Init+0xcc>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_GPIO_Init+0xcc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	4815      	ldr	r0, [pc, #84]	; (800180c <MX_GPIO_Init+0xd0>)
 80017b6:	f001 fb6f 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ba:	2320      	movs	r3, #32
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	480e      	ldr	r0, [pc, #56]	; (800180c <MX_GPIO_Init+0xd0>)
 80017d2:	f001 f9dd 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_CRUISE_TOGGLE_Pin|BTN_CRUISE_UP_Pin|BTN_CRUISE_DOWN_Pin|BTN_REVERSE_Pin;
 80017d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_GPIO_Init+0xd4>)
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480a      	ldr	r0, [pc, #40]	; (8001814 <MX_GPIO_Init+0xd8>)
 80017ec:	f001 f9d0 	bl	8002b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2105      	movs	r1, #5
 80017f4:	2028      	movs	r0, #40	; 0x28
 80017f6:	f001 f8f0 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017fa:	2028      	movs	r0, #40	; 0x28
 80017fc:	f001 f909 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	40010800 	.word	0x40010800
 8001810:	10210000 	.word	0x10210000
 8001814:	40010c00 	.word	0x40010c00

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f000 fad0 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001820:	f000 f811 	bl	8001846 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001824:	f7ff ff8a 	bl	800173c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001828:	f000 fa34 	bl	8001c94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800182c:	f7ff fc58 	bl	80010e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001830:	f7ff fc94 	bl	800115c <MX_ADC2_Init>
  MX_CAN_Init();
 8001834:	f7ff fd36 	bl	80012a4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001838:	f003 f85a 	bl	80048f0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800183c:	f7ff fdb2 	bl	80013a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001840:	f003 f888 	bl	8004954 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001844:	e7fe      	b.n	8001844 <main+0x2c>

08001846 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b094      	sub	sp, #80	; 0x50
 800184a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001850:	2228      	movs	r2, #40	; 0x28
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f005 fd59 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001876:	2302      	movs	r3, #2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187e:	2310      	movs	r3, #16
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001882:	2302      	movs	r3, #2
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001886:	2300      	movs	r3, #0
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800188a:	2300      	movs	r3, #0
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fb4a 	bl	8002f2c <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800189e:	f000 f839 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fdb6 	bl	8003430 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x88>
  {
    Error_Handler();
 80018ca:	f000 f823 	bl	8001914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ce:	2302      	movs	r3, #2
 80018d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 ff71 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018e4:	f000 f816 	bl	8001914 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001902:	f000 fa73 	bl	8001dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40000800 	.word	0x40000800

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_MspInit+0x68>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_MspInit+0x68>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_MspInit+0x68>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_MspInit+0x68>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_MspInit+0x68>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x68>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	f06f 0001 	mvn.w	r0, #1
 800195e:	f001 f83c 	bl	80029da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_MspInit+0x6c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_MspInit+0x6c>)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000

08001990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	; 0x38
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019a6:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_InitTick+0xe8>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <HAL_InitTick+0xe8>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_InitTick+0xe8>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019be:	f107 0210 	add.w	r2, r7, #16
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 feab 	bl	8003724 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019d8:	f001 fe7c 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 80019dc:	6378      	str	r0, [r7, #52]	; 0x34
 80019de:	e004      	b.n	80019ea <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019e0:	f001 fe78 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 80019e4:	4603      	mov	r3, r0
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_InitTick+0xec>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3b01      	subs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_InitTick+0xf0>)
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_InitTick+0xf4>)
 80019fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a04:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001a1e:	4818      	ldr	r0, [pc, #96]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a20:	f002 f844 	bl	8003aac <HAL_TIM_Base_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11b      	bne.n	8001a6a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a32:	4813      	ldr	r0, [pc, #76]	; (8001a80 <HAL_InitTick+0xf0>)
 8001a34:	f002 f892 	bl	8003b5c <HAL_TIM_Base_Start_IT>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d111      	bne.n	8001a6a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a46:	201e      	movs	r0, #30
 8001a48:	f000 ffe3 	bl	8002a12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	d808      	bhi.n	8001a64 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001a52:	2200      	movs	r2, #0
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	201e      	movs	r0, #30
 8001a58:	f000 ffbf 	bl	80029da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_InitTick+0xf8>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e002      	b.n	8001a6a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3738      	adds	r7, #56	; 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	200002b0 	.word	0x200002b0
 8001a84:	40000800 	.word	0x40000800
 8001a88:	20000008 	.word	0x20000008

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
	...

08001ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM4_IRQHandler+0x10>)
 8001abe:	f002 f89f 	bl	8003c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002b0 	.word	0x200002b0

08001acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <USART2_IRQHandler+0x10>)
 8001ad2:	f002 fb15 	bl	8004100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002fc 	.word	0x200002fc

08001ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_CRUISE_TOGGLE_Pin);
 8001ae4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ae8:	f001 fa08 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_CRUISE_UP_Pin);
 8001aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001af0:	f001 fa04 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_CRUISE_DOWN_Pin);
 8001af4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001af8:	f001 fa00 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_REVERSE_Pin);
 8001afc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b00:	f001 f9fc 	bl	8002efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_kill>:

int _kill(int pid, int sig)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b20:	f005 fbbc 	bl	800729c <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2216      	movs	r2, #22
 8001b28:	601a      	str	r2, [r3, #0]
	return -1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_exit>:

void _exit (int status)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffe7 	bl	8001b16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b48:	e7fe      	b.n	8001b48 <_exit+0x12>

08001b4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e00a      	b.n	8001b72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b5c:	f3af 8000 	nop.w
 8001b60:	4601      	mov	r1, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	b2ca      	uxtb	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbf0      	blt.n	8001b5c <_read+0x12>
	}

return len;
 8001b7a:	687b      	ldr	r3, [r7, #4]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e009      	b.n	8001baa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	60ba      	str	r2, [r7, #8]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dbf1      	blt.n	8001b96 <_write+0x12>
	}
	return len;
 8001bb2:	687b      	ldr	r3, [r7, #4]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_close>:

int _close(int file)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be2:	605a      	str	r2, [r3, #4]
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_isatty>:

int _isatty(int file)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f005 fb26 	bl	800729c <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20005000 	.word	0x20005000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	200002f8 	.word	0x200002f8
 8001c84:	20001ca0 	.word	0x20001ca0

08001c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART2_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	f002 f938 	bl	8003f40 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f7ff fe1d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002fc 	.word	0x200002fc
 8001ce4:	40004400 	.word	0x40004400

08001ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_UART_MspInit+0x80>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d12b      	bne.n	8001d60 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d12:	61d3      	str	r3, [r2, #28]
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d4c:	f000 ff20 	bl	8002b90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2105      	movs	r1, #5
 8001d54:	2026      	movs	r0, #38	; 0x26
 8001d56:	f000 fe40 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d5a:	2026      	movs	r0, #38	; 0x26
 8001d5c:	f000 fe59 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	; (8001db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d9a:	f7ff ff75 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f005 fa83 	bl	80072a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da2:	f7ff fd39 	bl	8001818 <main>
  bx lr
 8001da6:	4770      	bx	lr
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001db0:	0800c154 	.word	0x0800c154
  ldr r2, =_sbss
 8001db4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001db8:	20001c9c 	.word	0x20001c9c

08001dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_2_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_Init+0x28>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_Init+0x28>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 fdf7 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f7ff fdda 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fda0 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20000340 	.word	0x20000340

08001e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000340 	.word	0x20000340

08001e24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0be      	b.n	8001fc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff f9b8 	bl	80011d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fbc5 	bl	80025f8 <ADC_ConversionStop_Disable>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8099 	bne.w	8001fb2 <HAL_ADC_Init+0x18e>
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8095 	bne.w	8001fb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e90:	f023 0302 	bic.w	r3, r3, #2
 8001e94:	f043 0202 	orr.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ea4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7b1b      	ldrb	r3, [r3, #12]
 8001eaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebc:	d003      	beq.n	8001ec6 <HAL_ADC_Init+0xa2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_ADC_Init+0xa8>
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	e000      	b.n	8001ece <HAL_ADC_Init+0xaa>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7d1b      	ldrb	r3, [r3, #20]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d119      	bne.n	8001f10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7b1b      	ldrb	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	035a      	lsls	r2, r3, #13
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e00b      	b.n	8001f10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_ADC_Init+0x1a8>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f40:	d003      	beq.n	8001f4a <HAL_ADC_Init+0x126>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d104      	bne.n	8001f54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	051b      	lsls	r3, r3, #20
 8001f52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_ADC_Init+0x1ac>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f8e:	e018      	b.n	8001fc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f023 0312 	bic.w	r3, r3, #18
 8001f98:	f043 0210 	orr.w	r2, r3, #16
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f043 0210 	orr.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001fd0:	ff1f0efe 	.word	0xff1f0efe

08001fd4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Start+0x1a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e098      	b.n	8002120 <HAL_ADC_Start+0x14c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 faa4 	bl	8002544 <ADC_Enable>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8087 	bne.w	8002116 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a41      	ldr	r2, [pc, #260]	; (8002128 <HAL_ADC_Start+0x154>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d105      	bne.n	8002032 <HAL_ADC_Start+0x5e>
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_ADC_Start+0x158>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d026      	beq.n	800209a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002054:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800205c:	e01d      	b.n	800209a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_ADC_Start+0x158>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_ADC_Start+0xaa>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <HAL_ADC_Start+0x154>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10d      	bne.n	800209a <HAL_ADC_Start+0xc6>
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_ADC_Start+0x158>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002092:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f023 0206 	bic.w	r2, r3, #6
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b2:	e002      	b.n	80020ba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0202 	mvn.w	r2, #2
 80020ca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020da:	d113      	bne.n	8002104 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_ADC_Start+0x154>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d105      	bne.n	80020f2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_ADC_Start+0x158>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	e00c      	b.n	800211e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e003      	b.n	800211e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40012800 	.word	0x40012800
 800212c:	40012400 	.word	0x40012400

08002130 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002146:	f7ff fe63 	bl	8001e10 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0d3      	b.n	800231a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d131      	bne.n	80021e4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12a      	bne.n	80021e4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800218e:	e021      	b.n	80021d4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d01d      	beq.n	80021d4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <HAL_ADC_PollForConversion+0x7e>
 800219e:	f7ff fe37 	bl	8001e10 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d212      	bcs.n	80021d4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f043 0204 	orr.w	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0a2      	b.n	800231a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0d6      	beq.n	8002190 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021e2:	e070      	b.n	80022c6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_ADC_PollForConversion+0x1f4>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	2002      	movs	r0, #2
 80021ea:	f001 fb9f 	bl	800392c <HAL_RCCEx_GetPeriphCLKFreq>
 80021ee:	4603      	mov	r3, r0
 80021f0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_ADC_PollForConversion+0x1f8>)
 80021fc:	400b      	ands	r3, r1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_ADC_PollForConversion+0x104>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	4b48      	ldr	r3, [pc, #288]	; (800232c <HAL_ADC_PollForConversion+0x1fc>)
 800220a:	400b      	ands	r3, r1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_ADC_PollForConversion+0x104>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_ADC_PollForConversion+0x200>)
 8002218:	400b      	ands	r3, r1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <HAL_ADC_PollForConversion+0x100>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68d9      	ldr	r1, [r3, #12]
 8002224:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_ADC_PollForConversion+0x204>)
 8002226:	400b      	ands	r3, r1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_PollForConversion+0x100>
 800222c:	2314      	movs	r3, #20
 800222e:	e020      	b.n	8002272 <HAL_ADC_PollForConversion+0x142>
 8002230:	2329      	movs	r3, #41	; 0x29
 8002232:	e01e      	b.n	8002272 <HAL_ADC_PollForConversion+0x142>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_ADC_PollForConversion+0x200>)
 800223c:	400b      	ands	r3, r1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_ADC_PollForConversion+0x120>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68d9      	ldr	r1, [r3, #12]
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_ADC_PollForConversion+0x204>)
 800224a:	400b      	ands	r3, r1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_ADC_PollForConversion+0x13c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_ADC_PollForConversion+0x208>)
 8002258:	400b      	ands	r3, r1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_ADC_PollForConversion+0x140>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_ADC_PollForConversion+0x208>)
 8002266:	400b      	ands	r3, r1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_PollForConversion+0x140>
 800226c:	2354      	movs	r3, #84	; 0x54
 800226e:	e000      	b.n	8002272 <HAL_ADC_PollForConversion+0x142>
 8002270:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002278:	e021      	b.n	80022be <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d01a      	beq.n	80022b8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_ADC_PollForConversion+0x168>
 8002288:	f7ff fdc2 	bl	8001e10 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d20f      	bcs.n	80022b8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d90b      	bls.n	80022b8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	f043 0204 	orr.w	r2, r3, #4
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e030      	b.n	800231a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d8d9      	bhi.n	800227a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0212 	mvn.w	r2, #18
 80022ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022ea:	d115      	bne.n	8002318 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	20000004 	.word	0x20000004
 8002328:	24924924 	.word	0x24924924
 800232c:	00924924 	.word	0x00924924
 8002330:	12492492 	.word	0x12492492
 8002334:	00492492 	.word	0x00492492
 8002338:	00249249 	.word	0x00249249

0800233c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x20>
 8002370:	2302      	movs	r3, #2
 8002372:	e0dc      	b.n	800252e <HAL_ADC_ConfigChannel+0x1da>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d81c      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b05      	subs	r3, #5
 8002396:	221f      	movs	r2, #31
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	4019      	ands	r1, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b05      	subs	r3, #5
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
 80023bc:	e03c      	b.n	8002438 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d81c      	bhi.n	8002400 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b23      	subs	r3, #35	; 0x23
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	4019      	ands	r1, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b23      	subs	r3, #35	; 0x23
 80023f2:	fa00 f203 	lsl.w	r2, r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
 80023fe:	e01b      	b.n	8002438 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b41      	subs	r3, #65	; 0x41
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	4019      	ands	r1, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b41      	subs	r3, #65	; 0x41
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	d91c      	bls.n	800247a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	4019      	ands	r1, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6898      	ldr	r0, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	e019      	b.n	80024ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	2207      	movs	r2, #7
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6898      	ldr	r0, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d003      	beq.n	80024be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d132      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_ADC_ConfigChannel+0x1e4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d125      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d126      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d11a      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <HAL_ADC_ConfigChannel+0x1e8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_ADC_ConfigChannel+0x1ec>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9a      	lsrs	r2, r3, #18
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002504:	e002      	b.n	800250c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3b01      	subs	r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x1b2>
 8002512:	e007      	b.n	8002524 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40012400 	.word	0x40012400
 800253c:	20000004 	.word	0x20000004
 8002540:	431bde83 	.word	0x431bde83

08002544 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d040      	beq.n	80025e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002572:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <ADC_Enable+0xac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <ADC_Enable+0xb0>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002580:	e002      	b.n	8002588 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800258e:	f7ff fc3f 	bl	8001e10 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002594:	e01f      	b.n	80025d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002596:	f7ff fc3b 	bl	8001e10 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d918      	bls.n	80025d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d011      	beq.n	80025d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e007      	b.n	80025e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d1d8      	bne.n	8002596 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000004 	.word	0x20000004
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12e      	bne.n	8002670 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002622:	f7ff fbf5 	bl	8001e10 <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002628:	e01b      	b.n	8002662 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800262a:	f7ff fbf1 	bl	8001e10 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d914      	bls.n	8002662 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10d      	bne.n	8002662 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e007      	b.n	8002672 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d0dc      	beq.n	800262a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0ed      	b.n	8002868 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fe37 	bl	800130c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026ae:	f7ff fbaf 	bl	8001e10 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026b4:	e012      	b.n	80026dc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026b6:	f7ff fbab 	bl	8001e10 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b0a      	cmp	r3, #10
 80026c2:	d90b      	bls.n	80026dc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2205      	movs	r2, #5
 80026d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0c5      	b.n	8002868 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0e5      	beq.n	80026b6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026fa:	f7ff fb89 	bl	8001e10 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002700:	e012      	b.n	8002728 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002702:	f7ff fb85 	bl	8001e10 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d90b      	bls.n	8002728 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2205      	movs	r2, #5
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e09f      	b.n	8002868 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e5      	bne.n	8002702 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7e1b      	ldrb	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e007      	b.n	8002760 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e5b      	ldrb	r3, [r3, #25]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7e9b      	ldrb	r3, [r3, #26]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0220 	orr.w	r2, r2, #32
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0220 	bic.w	r2, r2, #32
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7edb      	ldrb	r3, [r3, #27]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0210 	bic.w	r2, r2, #16
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e007      	b.n	80027de <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0210 	orr.w	r2, r2, #16
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7f1b      	ldrb	r3, [r3, #28]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0208 	orr.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0208 	bic.w	r2, r2, #8
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7f5b      	ldrb	r3, [r3, #29]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0204 	orr.w	r2, r2, #4
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e007      	b.n	8002832 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0204 	bic.w	r2, r2, #4
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	ea42 0103 	orr.w	r1, r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff4f 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff64 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ffb2 	bl	8002960 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff81 	bl	800290c <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff57 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d008      	beq.n	8002a56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2204      	movs	r2, #4
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e020      	b.n	8002a98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 020e 	bic.w	r2, r2, #14
 8002a64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d005      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e051      	b.n	8002b6a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 020e 	bic.w	r2, r2, #14
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <HAL_DMA_Abort_IT+0xd0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d029      	beq.n	8002b44 <HAL_DMA_Abort_IT+0xa0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_DMA_Abort_IT+0xd4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x9c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_DMA_Abort_IT+0xd8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d01a      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x96>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_DMA_Abort_IT+0xdc>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d012      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x90>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_DMA_Abort_IT+0xe0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00a      	beq.n	8002b2e <HAL_DMA_Abort_IT+0x8a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_DMA_Abort_IT+0xe4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d102      	bne.n	8002b28 <HAL_DMA_Abort_IT+0x84>
 8002b22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b26:	e00e      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b2c:	e00b      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b32:	e008      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	e005      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3e:	e002      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b40:	2310      	movs	r3, #16
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_Abort_IT+0xa2>
 8002b44:	2301      	movs	r3, #1
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_DMA_Abort_IT+0xe8>)
 8002b48:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
    } 
  }
  return status;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020008 	.word	0x40020008
 8002b78:	4002001c 	.word	0x4002001c
 8002b7c:	40020030 	.word	0x40020030
 8002b80:	40020044 	.word	0x40020044
 8002b84:	40020058 	.word	0x40020058
 8002b88:	4002006c 	.word	0x4002006c
 8002b8c:	40020000 	.word	0x40020000

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba2:	e169      	b.n	8002e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 8158 	bne.w	8002e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4a9a      	ldr	r2, [pc, #616]	; (8002e30 <HAL_GPIO_Init+0x2a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d05e      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
 8002bcc:	4a98      	ldr	r2, [pc, #608]	; (8002e30 <HAL_GPIO_Init+0x2a0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d875      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002bd2:	4a98      	ldr	r2, [pc, #608]	; (8002e34 <HAL_GPIO_Init+0x2a4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d058      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
 8002bd8:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_GPIO_Init+0x2a4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d86f      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002bde:	4a96      	ldr	r2, [pc, #600]	; (8002e38 <HAL_GPIO_Init+0x2a8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d052      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
 8002be4:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_GPIO_Init+0x2a8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d869      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002bea:	4a94      	ldr	r2, [pc, #592]	; (8002e3c <HAL_GPIO_Init+0x2ac>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04c      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
 8002bf0:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_GPIO_Init+0x2ac>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d863      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002bf6:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <HAL_GPIO_Init+0x2b0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d046      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
 8002bfc:	4a90      	ldr	r2, [pc, #576]	; (8002e40 <HAL_GPIO_Init+0x2b0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d85d      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002c02:	2b12      	cmp	r3, #18
 8002c04:	d82a      	bhi.n	8002c5c <HAL_GPIO_Init+0xcc>
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d859      	bhi.n	8002cbe <HAL_GPIO_Init+0x12e>
 8002c0a:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <HAL_GPIO_Init+0x80>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c8b 	.word	0x08002c8b
 8002c14:	08002c65 	.word	0x08002c65
 8002c18:	08002c77 	.word	0x08002c77
 8002c1c:	08002cb9 	.word	0x08002cb9
 8002c20:	08002cbf 	.word	0x08002cbf
 8002c24:	08002cbf 	.word	0x08002cbf
 8002c28:	08002cbf 	.word	0x08002cbf
 8002c2c:	08002cbf 	.word	0x08002cbf
 8002c30:	08002cbf 	.word	0x08002cbf
 8002c34:	08002cbf 	.word	0x08002cbf
 8002c38:	08002cbf 	.word	0x08002cbf
 8002c3c:	08002cbf 	.word	0x08002cbf
 8002c40:	08002cbf 	.word	0x08002cbf
 8002c44:	08002cbf 	.word	0x08002cbf
 8002c48:	08002cbf 	.word	0x08002cbf
 8002c4c:	08002cbf 	.word	0x08002cbf
 8002c50:	08002cbf 	.word	0x08002cbf
 8002c54:	08002c6d 	.word	0x08002c6d
 8002c58:	08002c81 	.word	0x08002c81
 8002c5c:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_GPIO_Init+0x2b4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c62:	e02c      	b.n	8002cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	623b      	str	r3, [r7, #32]
          break;
 8002c6a:	e029      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	3304      	adds	r3, #4
 8002c72:	623b      	str	r3, [r7, #32]
          break;
 8002c74:	e024      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	623b      	str	r3, [r7, #32]
          break;
 8002c7e:	e01f      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	330c      	adds	r3, #12
 8002c86:	623b      	str	r3, [r7, #32]
          break;
 8002c88:	e01a      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c92:	2304      	movs	r3, #4
 8002c94:	623b      	str	r3, [r7, #32]
          break;
 8002c96:	e013      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	611a      	str	r2, [r3, #16]
          break;
 8002caa:	e009      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cac:	2308      	movs	r3, #8
 8002cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	615a      	str	r2, [r3, #20]
          break;
 8002cb6:	e003      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]
          break;
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x130>
          break;
 8002cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2bff      	cmp	r3, #255	; 0xff
 8002cc4:	d801      	bhi.n	8002cca <HAL_GPIO_Init+0x13a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	e001      	b.n	8002cce <HAL_GPIO_Init+0x13e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2bff      	cmp	r3, #255	; 0xff
 8002cd4:	d802      	bhi.n	8002cdc <HAL_GPIO_Init+0x14c>
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	e002      	b.n	8002ce2 <HAL_GPIO_Init+0x152>
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	3b08      	subs	r3, #8
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	210f      	movs	r1, #15
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	6a39      	ldr	r1, [r7, #32]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80b1 	beq.w	8002e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d10:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <HAL_GPIO_Init+0x2b8>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_GPIO_Init+0x2b8>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d28:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_GPIO_Init+0x2bc>)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <HAL_GPIO_Init+0x2c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <HAL_GPIO_Init+0x1ec>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3f      	ldr	r2, [pc, #252]	; (8002e54 <HAL_GPIO_Init+0x2c4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00d      	beq.n	8002d78 <HAL_GPIO_Init+0x1e8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <HAL_GPIO_Init+0x2c8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <HAL_GPIO_Init+0x1e4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <HAL_GPIO_Init+0x2cc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_GPIO_Init+0x1e0>
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e006      	b.n	8002d7e <HAL_GPIO_Init+0x1ee>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e004      	b.n	8002d7e <HAL_GPIO_Init+0x1ee>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e002      	b.n	8002d7e <HAL_GPIO_Init+0x1ee>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_GPIO_Init+0x1ee>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	f002 0203 	and.w	r2, r2, #3
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	4093      	lsls	r3, r2
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d8e:	492f      	ldr	r1, [pc, #188]	; (8002e4c <HAL_GPIO_Init+0x2bc>)
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	3302      	adds	r3, #2
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	492c      	ldr	r1, [pc, #176]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	4928      	ldr	r1, [pc, #160]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4922      	ldr	r1, [pc, #136]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	491e      	ldr	r1, [pc, #120]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4918      	ldr	r1, [pc, #96]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4914      	ldr	r1, [pc, #80]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d021      	beq.n	8002e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_GPIO_Init+0x2d0>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
 8002e2c:	e021      	b.n	8002e72 <HAL_GPIO_Init+0x2e2>
 8002e2e:	bf00      	nop
 8002e30:	10320000 	.word	0x10320000
 8002e34:	10310000 	.word	0x10310000
 8002e38:	10220000 	.word	0x10220000
 8002e3c:	10210000 	.word	0x10210000
 8002e40:	10120000 	.word	0x10120000
 8002e44:	10110000 	.word	0x10110000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010800 	.word	0x40010800
 8002e54:	40010c00 	.word	0x40010c00
 8002e58:	40011000 	.word	0x40011000
 8002e5c:	40011400 	.word	0x40011400
 8002e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4909      	ldr	r1, [pc, #36]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	3301      	adds	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f ae8e 	bne.w	8002ba4 <HAL_GPIO_Init+0x14>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	372c      	adds	r7, #44	; 0x2c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43d9      	mvns	r1, r3
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	400b      	ands	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fb9e 	bl	800165c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e272      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f58:	4b8f      	ldr	r3, [pc, #572]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d112      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5e>
 8002f64:	4b8c      	ldr	r3, [pc, #560]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06c      	beq.n	8003058 <HAL_RCC_OscConfig+0x12c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d168      	bne.n	8003058 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e24c      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x76>
 8002f94:	4b80      	ldr	r3, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a7f      	ldr	r2, [pc, #508]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x98>
 8002faa:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a77      	ldr	r2, [pc, #476]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xbc>
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a71      	ldr	r2, [pc, #452]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xd4>
 8002fe8:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6a      	ldr	r2, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a67      	ldr	r2, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff02 	bl	8001e10 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fefe 	bl	8001e10 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e200      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xe4>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe feee 	bl	8001e10 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe feea 	bl	8001e10 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1ec      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x10c>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003072:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x18c>
 800307e:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x176>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c0      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4939      	ldr	r1, [pc, #228]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x270>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe fea3 	bl	8001e10 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fe9f 	bl	8001e10 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a1      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4927      	ldr	r1, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x270>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fe82 	bl	8001e10 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fe7e 	bl	8001e10 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e180      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03a      	beq.n	80031b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d019      	beq.n	8003176 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_RCC_OscConfig+0x274>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003148:	f7fe fe62 	bl	8001e10 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe fe5e 	bl	8001e10 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e160      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <HAL_RCC_OscConfig+0x26c>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800316e:	2001      	movs	r0, #1
 8003170:	f000 fb08 	bl	8003784 <RCC_Delay>
 8003174:	e01c      	b.n	80031b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_OscConfig+0x274>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fe48 	bl	8001e10 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003182:	e00f      	b.n	80031a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7fe fe44 	bl	8001e10 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d908      	bls.n	80031a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e146      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	42420000 	.word	0x42420000
 80031a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e9      	bne.n	8003184 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a6 	beq.w	800330a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c2:	4b8b      	ldr	r3, [pc, #556]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4a87      	ldr	r2, [pc, #540]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	61d3      	str	r3, [r2, #28]
 80031da:	4b85      	ldr	r3, [pc, #532]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d118      	bne.n	8003228 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7e      	ldr	r2, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003202:	f7fe fe05 	bl	8001e10 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fe fe01 	bl	8001e10 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e103      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x4c8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x312>
 8003230:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e02d      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x334>
 8003246:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a69      	ldr	r2, [pc, #420]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	e01c      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x356>
 8003268:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a60      	ldr	r2, [pc, #384]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	e00b      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a57      	ldr	r2, [pc, #348]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d015      	beq.n	80032ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fdb5 	bl	8001e10 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe fdb1 	bl	8001e10 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0b1      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ee      	beq.n	80032aa <HAL_RCC_OscConfig+0x37e>
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fd9f 	bl	8001e10 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fd9b 	bl	8001e10 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e09b      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ee      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8087 	beq.w	8003422 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d061      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d146      	bne.n	80033b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fe fd6f 	bl	8001e10 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fd6b 	bl	8001e10 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e06d      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d108      	bne.n	8003370 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4921      	ldr	r1, [pc, #132]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a19      	ldr	r1, [r3, #32]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	430b      	orrs	r3, r1
 8003382:	491b      	ldr	r1, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7fe fd3f 	bl	8001e10 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7fe fd3b 	bl	8001e10 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e03d      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x46a>
 80033b4:	e035      	b.n	8003422 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_OscConfig+0x4cc>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fd28 	bl	8001e10 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fd24 	bl	8001e10 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e026      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x498>
 80033e2:	e01e      	b.n	8003422 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e019      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_OscConfig+0x500>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0d0      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d910      	bls.n	8003474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 0207 	bic.w	r2, r3, #7
 800345a:	4965      	ldr	r1, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d040      	beq.n	8003550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e073      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06b      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4936      	ldr	r1, [pc, #216]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003520:	f7fe fc76 	bl	8001e10 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fc72 	bl	8001e10 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e053      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d210      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 0207 	bic.w	r2, r3, #7
 8003566:	4922      	ldr	r1, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1cc>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f9d6 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	0800bc8c 	.word	0x0800bc8c
 80035fc:	20000004 	.word	0x20000004
 8003600:	20000008 	.word	0x20000008

08003604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b490      	push	{r4, r7}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800360c:	1d3c      	adds	r4, r7, #4
 800360e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003614:	f240 2301 	movw	r3, #513	; 0x201
 8003618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d002      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x40>
 800363e:	2b08      	cmp	r3, #8
 8003640:	d003      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x46>
 8003642:	e02b      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003646:	623b      	str	r3, [r7, #32]
      break;
 8003648:	e02b      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	0c9b      	lsrs	r3, r3, #18
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3328      	adds	r3, #40	; 0x28
 8003654:	443b      	add	r3, r7
 8003656:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800365a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0c5b      	lsrs	r3, r3, #17
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	3328      	adds	r3, #40	; 0x28
 8003672:	443b      	add	r3, r7
 8003674:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003678:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e004      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	623b      	str	r3, [r7, #32]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800369e:	623b      	str	r3, [r7, #32]
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	6a3b      	ldr	r3, [r7, #32]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc90      	pop	{r4, r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	0800bbc4 	.word	0x0800bbc4
 80036b4:	40021000 	.word	0x40021000
 80036b8:	007a1200 	.word	0x007a1200
 80036bc:	003d0900 	.word	0x003d0900

080036c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c4:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff2 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	0800bc9c 	.word	0x0800bc9c

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffde 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	0800bc9c 	.word	0x0800bc9c

08003724 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	220f      	movs	r2, #15
 8003732:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_RCC_GetClockConfig+0x58>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetClockConfig+0x5c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0207 	and.w	r2, r3, #7
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40022000 	.word	0x40022000

08003784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCC_Delay+0x34>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <RCC_Delay+0x38>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0a5b      	lsrs	r3, r3, #9
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a0:	bf00      	nop
  }
  while (Delay --);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	60fa      	str	r2, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <RCC_Delay+0x1c>
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20000004 	.word	0x20000004
 80037bc:	10624dd3 	.word	0x10624dd3

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d07d      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4a4b      	ldr	r2, [pc, #300]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	61d3      	str	r3, [r2, #28]
 80037f8:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d118      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003820:	f7fe faf6 	bl	8001e10 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003826:	e008      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7fe faf2 	bl	8001e10 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e06d      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02e      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d027      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800386e:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800387a:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe fac1 	bl	8001e10 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fe fabd 	bl	8001e10 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e036      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0ee      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	490b      	ldr	r1, [pc, #44]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4904      	ldr	r1, [pc, #16]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
 8003928:	42420440 	.word	0x42420440

0800392c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b08d      	sub	sp, #52	; 0x34
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003934:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003936:	f107 040c 	add.w	r4, r7, #12
 800393a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003940:	f240 2301 	movw	r3, #513	; 0x201
 8003944:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	2300      	movs	r3, #0
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2300      	movs	r3, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b10      	cmp	r3, #16
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b10      	cmp	r3, #16
 8003964:	f200 808e 	bhi.w	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d049      	beq.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d079      	beq.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003974:	e086      	b.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003976:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d07f      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	3330      	adds	r3, #48	; 0x30
 8003992:	443b      	add	r3, r7
 8003994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003998:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d017      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a4:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c5b      	lsrs	r3, r3, #17
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	3330      	adds	r3, #48	; 0x30
 80039b0:	443b      	add	r3, r7
 80039b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039c2:	4a37      	ldr	r2, [pc, #220]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	4a33      	ldr	r2, [pc, #204]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ea:	d102      	bne.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80039ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039f0:	e04a      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a00:	e042      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d108      	bne.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a24:	e01f      	b.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d109      	bne.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003a3e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a44:	e00f      	b.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a50:	d11c      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003a5e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a64:	e012      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003a66:	e011      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a68:	f7ff fe48 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0b9b      	lsrs	r3, r3, #14
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a8c:	bf00      	nop
    }
  }
  return (frequency);
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3734      	adds	r7, #52	; 0x34
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	0800bbd4 	.word	0x0800bbd4
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	007a1200 	.word	0x007a1200
 8003aa4:	003d0900 	.word	0x003d0900
 8003aa8:	aaaaaaab 	.word	0xaaaaaaab

08003aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f839 	bl	8003b4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 f9b4 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e03a      	b.n	8003bea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_TIM_Base_Start_IT+0x98>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x58>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x58>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x58>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_TIM_Base_Start_IT+0xa0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d010      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	e007      	b.n	8003be8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800

08003c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0202 	mvn.w	r2, #2
 8003c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8ed 	bl	8003e22 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8e0 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8ef 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0204 	mvn.w	r2, #4
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8c3 	bl	8003e22 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8b6 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8c5 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d122      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d11b      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0208 	mvn.w	r2, #8
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f899 	bl	8003e22 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f88c 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f89b 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d122      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d11b      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0210 	mvn.w	r2, #16
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f86f 	bl	8003e22 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f862 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f871 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0201 	mvn.w	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fdb6 	bl	80018f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8bf 	bl	8003f2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f835 	bl	8003e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0220 	mvn.w	r2, #32
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f88a 	bl	8003f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <TIM_Base_SetConfig+0xb8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d007      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a26      	ldr	r2, [pc, #152]	; (8003f14 <TIM_Base_SetConfig+0xbc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_Base_SetConfig+0x30>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <TIM_Base_SetConfig+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <TIM_Base_SetConfig+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0x62>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <TIM_Base_SetConfig+0xbc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <TIM_Base_SetConfig+0xc0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <TIM_Base_SetConfig+0xb8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d103      	bne.n	8003f00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	615a      	str	r2, [r3, #20]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800

08003f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e03f      	b.n	8003fd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd febe 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fc25 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08a      	sub	sp, #40	; 0x28
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d17c      	bne.n	80040f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_Transmit+0x2c>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e075      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x3e>
 8004014:	2302      	movs	r3, #2
 8004016:	e06e      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2221      	movs	r2, #33	; 0x21
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800402e:	f7fd feef 	bl	8001e10 <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d108      	bne.n	800405c <HAL_UART_Transmit+0x82>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e003      	b.n	8004064 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800406c:	e02a      	b.n	80040c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fa11 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e036      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10b      	bne.n	80040a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3302      	adds	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e007      	b.n	80040b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1cf      	bne.n	800406e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f9e1 	bl	80044a0 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e006      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x52>
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa99 	bl	8004682 <UART_Receive_IT>
      return;
 8004150:	e17b      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80b1 	beq.w	80042bc <HAL_UART_IRQHandler+0x1bc>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_UART_IRQHandler+0x70>
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a6 	beq.w	80042bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_UART_IRQHandler+0x90>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_UART_IRQHandler+0xb0>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_UART_IRQHandler+0xd0>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <HAL_UART_IRQHandler+0xfa>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <HAL_UART_IRQHandler+0xee>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0208 	orr.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 811e 	beq.w	8004440 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_UART_IRQHandler+0x11e>
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa32 	bl	8004682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_UART_IRQHandler+0x146>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d031      	beq.n	80042aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f974 	bl	8004534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d023      	beq.n	80042a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004268:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d013      	beq.n	800429a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	4a76      	ldr	r2, [pc, #472]	; (8004450 <HAL_UART_IRQHandler+0x350>)
 8004278:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fc10 	bl	8002aa4 <HAL_DMA_Abort_IT>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004294:	4610      	mov	r0, r2
 8004296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e00e      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8ec 	bl	8004478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	e00a      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8e8 	bl	8004478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	e006      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8e4 	bl	8004478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042b6:	e0c3      	b.n	8004440 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	bf00      	nop
    return;
 80042ba:	e0c1      	b.n	8004440 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80a1 	bne.w	8004408 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 809b 	beq.w	8004408 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8095 	beq.w	8004408 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04e      	beq.n	80043a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800430c:	8a3b      	ldrh	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8098 	beq.w	8004444 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004318:	8a3a      	ldrh	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	f080 8092 	bcs.w	8004444 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8a3a      	ldrh	r2, [r7, #16]
 8004324:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b20      	cmp	r3, #32
 800432e:	d02b      	beq.n	8004388 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0210 	bic.w	r2, r2, #16
 800437c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fb53 	bl	8002a2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	b29b      	uxth	r3, r3
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f876 	bl	800448a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800439e:	e051      	b.n	8004444 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d047      	beq.n	8004448 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043b8:	8a7b      	ldrh	r3, [r7, #18]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d044      	beq.n	8004448 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0210 	bic.w	r2, r2, #16
 80043fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043fc:	8a7b      	ldrh	r3, [r7, #18]
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f842 	bl	800448a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004406:	e01f      	b.n	8004448 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_UART_IRQHandler+0x324>
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8c9 	bl	80045b4 <UART_Transmit_IT>
    return;
 8004422:	e012      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <HAL_UART_IRQHandler+0x34a>
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f90a 	bl	8004652 <UART_EndTransmit_IT>
    return;
 800443e:	e004      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
    return;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
      return;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
      return;
 8004448:	bf00      	nop
  }
}
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0800458d 	.word	0x0800458d

08004454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	e02c      	b.n	800450c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d028      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80044c0:	f7fd fca6 	bl	8001e10 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d21d      	bcs.n	800450c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00f      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d0c3      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800454a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0210 	bic.w	r2, r2, #16
 8004572:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff ff66 	bl	8004478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b21      	cmp	r3, #33	; 0x21
 80045c6:	d13e      	bne.n	8004646 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d0:	d114      	bne.n	80045fc <UART_Transmit_IT+0x48>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	1c9a      	adds	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	621a      	str	r2, [r3, #32]
 80045fa:	e008      	b.n	800460e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	1c59      	adds	r1, r3, #1
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6211      	str	r1, [r2, #32]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29b      	uxth	r3, r3
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004630:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004640:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff feee 	bl	8004454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b22      	cmp	r3, #34	; 0x22
 8004694:	f040 8099 	bne.w	80047ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d117      	bne.n	80046d2 <UART_Receive_IT+0x50>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d113      	bne.n	80046d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
 80046d0:	e026      	b.n	8004720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d007      	beq.n	80046f6 <UART_Receive_IT+0x74>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <UART_Receive_IT+0x82>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e008      	b.n	8004716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004710:	b2da      	uxtb	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29b      	uxth	r3, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4619      	mov	r1, r3
 800472e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004730:	2b00      	cmp	r3, #0
 8004732:	d148      	bne.n	80047c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0220 	bic.w	r2, r2, #32
 8004742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	2b01      	cmp	r3, #1
 8004772:	d123      	bne.n	80047bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0210 	bic.w	r2, r2, #16
 8004788:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d10a      	bne.n	80047ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fe68 	bl	800448a <HAL_UARTEx_RxEventCallback>
 80047ba:	e002      	b.n	80047c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fe52 	bl	8004466 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e002      	b.n	80047cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800480e:	f023 030c 	bic.w	r3, r3, #12
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	430b      	orrs	r3, r1
 800481a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <UART_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7fe ff5e 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	e002      	b.n	800484a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe ff46 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8004848:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a22      	ldr	r2, [pc, #136]	; (80048ec <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	0119      	lsls	r1, r3, #4
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <UART_SetConfig+0x118>)
 8004882:	fba3 0302 	umull	r0, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	fb00 f303 	mul.w	r3, r0, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	; 0x32
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <UART_SetConfig+0x118>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	4419      	add	r1, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <UART_SetConfig+0x118>)
 80048ba:	fba3 0302 	umull	r0, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2064      	movs	r0, #100	; 0x64
 80048c2:	fb00 f303 	mul.w	r3, r0, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a07      	ldr	r2, [pc, #28]	; (80048ec <UART_SetConfig+0x118>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	440a      	add	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40013800 	.word	0x40013800
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80048fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004902:	f3ef 8310 	mrs	r3, PRIMASK
 8004906:	607b      	str	r3, [r7, #4]
  return(result);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <osKernelInitialize+0x32>
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <osKernelInitialize+0x60>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d109      	bne.n	800492a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004916:	f3ef 8311 	mrs	r3, BASEPRI
 800491a:	603b      	str	r3, [r7, #0]
  return(result);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004922:	f06f 0305 	mvn.w	r3, #5
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e00c      	b.n	8004944 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <osKernelInitialize+0x60>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <osKernelInitialize+0x60>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e002      	b.n	8004944 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004944:	68fb      	ldr	r3, [r7, #12]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	20000344 	.word	0x20000344

08004954 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800495a:	f3ef 8305 	mrs	r3, IPSR
 800495e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004960:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10f      	bne.n	8004986 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004966:	f3ef 8310 	mrs	r3, PRIMASK
 800496a:	607b      	str	r3, [r7, #4]
  return(result);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <osKernelStart+0x32>
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <osKernelStart+0x64>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d109      	bne.n	800498e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800497a:	f3ef 8311 	mrs	r3, BASEPRI
 800497e:	603b      	str	r3, [r7, #0]
  return(result);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004986:	f06f 0305 	mvn.w	r3, #5
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e00e      	b.n	80049ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <osKernelStart+0x64>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <osKernelStart+0x64>)
 8004998:	2202      	movs	r2, #2
 800499a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800499c:	f001 f878 	bl	8005a90 <vTaskStartScheduler>
      stat = osOK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e002      	b.n	80049ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049ac:	68fb      	ldr	r3, [r7, #12]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000344 	.word	0x20000344

080049bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b092      	sub	sp, #72	; 0x48
 80049c0:	af04      	add	r7, sp, #16
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049cc:	f3ef 8305 	mrs	r3, IPSR
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 8094 	bne.w	8004b02 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049da:	f3ef 8310 	mrs	r3, PRIMASK
 80049de:	623b      	str	r3, [r7, #32]
  return(result);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f040 808d 	bne.w	8004b02 <osThreadNew+0x146>
 80049e8:	4b48      	ldr	r3, [pc, #288]	; (8004b0c <osThreadNew+0x150>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d106      	bne.n	80049fe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f0:	f3ef 8311 	mrs	r3, BASEPRI
 80049f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8082 	bne.w	8004b02 <osThreadNew+0x146>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d07e      	beq.n	8004b02 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004a08:	2318      	movs	r3, #24
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004a10:	f107 031b 	add.w	r3, r7, #27
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d045      	beq.n	8004aae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <osThreadNew+0x74>
        name = attr->name;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <osThreadNew+0x9a>
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	2b38      	cmp	r3, #56	; 0x38
 8004a48:	d805      	bhi.n	8004a56 <osThreadNew+0x9a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <osThreadNew+0x9e>
        return (NULL);
 8004a56:	2300      	movs	r3, #0
 8004a58:	e054      	b.n	8004b04 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	089b      	lsrs	r3, r3, #2
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <osThreadNew+0xd4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b5b      	cmp	r3, #91	; 0x5b
 8004a78:	d90a      	bls.n	8004a90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <osThreadNew+0xd4>
        mem = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8e:	e010      	b.n	8004ab2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <osThreadNew+0xf6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <osThreadNew+0xf6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <osThreadNew+0xf6>
          mem = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aac:	e001      	b.n	8004ab2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d110      	bne.n	8004ada <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ac0:	9202      	str	r2, [sp, #8]
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004acc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fe12 	bl	80056f8 <xTaskCreateStatic>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e013      	b.n	8004b02 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fe5c 	bl	80057b0 <xTaskCreate>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d001      	beq.n	8004b02 <osThreadNew+0x146>
          hTask = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3738      	adds	r7, #56	; 0x38
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000344 	.word	0x20000344

08004b10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b18:	f3ef 8305 	mrs	r3, IPSR
 8004b1c:	613b      	str	r3, [r7, #16]
  return(result);
 8004b1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b24:	f3ef 8310 	mrs	r3, PRIMASK
 8004b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <osDelay+0x34>
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <osDelay+0x58>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d109      	bne.n	8004b4c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b38:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <osDelay+0x3c>
    stat = osErrorISR;
 8004b44:	f06f 0305 	mvn.w	r3, #5
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e007      	b.n	8004b5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 ff66 	bl	8005a28 <vTaskDelay>
    }
  }

  return (stat);
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000344 	.word	0x20000344

08004b6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <vApplicationGetIdleTaskMemory+0x28>)
 8004b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000348 	.word	0x20000348
 8004b98:	200003a4 	.word	0x200003a4

08004b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <vApplicationGetTimerTaskMemory+0x30>)
 8004bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	200005a4 	.word	0x200005a4
 8004bcc:	20000600 	.word	0x20000600

08004bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 0208 	add.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d103      	bne.n	8004c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e00c      	b.n	8004ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e002      	b.n	8004c9a <vListInsert+0x2e>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d2f6      	bcs.n	8004c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6892      	ldr	r2, [r2, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6852      	ldr	r2, [r2, #4]
 8004cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d103      	bne.n	8004d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1e5a      	subs	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d5a:	f001 ffc7 	bl	8006cec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d114      	bne.n	8004dda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01a      	beq.n	8004dee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3310      	adds	r3, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f8f1 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d012      	beq.n	8004dee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <xQueueGenericReset+0xcc>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e009      	b.n	8004dee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3310      	adds	r3, #16
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fef6 	bl	8004bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3324      	adds	r3, #36	; 0x24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fef1 	bl	8004bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dee:	f001 ffad 	bl	8006d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	; 0x38
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <xQueueGenericCreateStatic+0x52>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <xQueueGenericCreateStatic+0x56>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericCreateStatic+0x58>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	623b      	str	r3, [r7, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <xQueueGenericCreateStatic+0x7e>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <xQueueGenericCreateStatic+0x82>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xQueueGenericCreateStatic+0x84>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	61fb      	str	r3, [r7, #28]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e9e:	2350      	movs	r3, #80	; 0x50
 8004ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d00a      	beq.n	8004ebe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	61bb      	str	r3, [r7, #24]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ed0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f805 	bl	8004eee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3730      	adds	r7, #48	; 0x30
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e002      	b.n	8004f10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	69b8      	ldr	r0, [r7, #24]
 8004f20:	f7ff ff06 	bl	8004d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08e      	sub	sp, #56	; 0x38
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xQueueGenericSend+0x32>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <xQueueGenericSend+0x40>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <xQueueGenericSend+0x44>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <xQueueGenericSend+0x46>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xQueueGenericSend+0x60>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d103      	bne.n	8004fa2 <xQueueGenericSend+0x6e>
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <xQueueGenericSend+0x72>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueGenericSend+0x74>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	623b      	str	r3, [r7, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc2:	f001 f9b1 	bl	8006328 <xTaskGetSchedulerState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <xQueueGenericSend+0x9e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <xQueueGenericSend+0xa2>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <xQueueGenericSend+0xa4>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61fb      	str	r3, [r7, #28]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff2:	f001 fe7b 	bl	8006cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <xQueueGenericSend+0xd4>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d129      	bne.n	800505c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800500e:	f000 fa07 	bl	8005420 <prvCopyDataToQueue>
 8005012:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d010      	beq.n	800503e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	4618      	mov	r0, r3
 8005022:	f000 ffbf 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <xQueueGenericSend+0x1f8>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	e00a      	b.n	8005054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <xQueueGenericSend+0x1f8>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005054:	f001 fe7a 	bl	8006d4c <vPortExitCritical>
				return pdPASS;
 8005058:	2301      	movs	r3, #1
 800505a:	e063      	b.n	8005124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005062:	f001 fe73 	bl	8006d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005066:	2300      	movs	r3, #0
 8005068:	e05c      	b.n	8005124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fff9 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800507a:	2301      	movs	r3, #1
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800507e:	f001 fe65 	bl	8006d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005082:	f000 fd6b 	bl	8005b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005086:	f001 fe31 	bl	8006cec <vPortEnterCritical>
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005090:	b25b      	sxtb	r3, r3
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d103      	bne.n	80050a0 <xQueueGenericSend+0x16c>
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d103      	bne.n	80050b6 <xQueueGenericSend+0x182>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b6:	f001 fe49 	bl	8006d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ba:	1d3a      	adds	r2, r7, #4
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 ffe8 	bl	8006098 <xTaskCheckForTimeOut>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d124      	bne.n	8005118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d0:	f000 fa9e 	bl	8005610 <prvIsQueueFull>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	3310      	adds	r3, #16
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 ff0e 	bl	8005f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ea:	f000 fa29 	bl	8005540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050ee:	f000 fd43 	bl	8005b78 <xTaskResumeAll>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f af7c 	bne.w	8004ff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <xQueueGenericSend+0x1f8>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	e772      	b.n	8004ff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800510c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510e:	f000 fa17 	bl	8005540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005112:	f000 fd31 	bl	8005b78 <xTaskResumeAll>
 8005116:	e76c      	b.n	8004ff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fa11 	bl	8005540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800511e:	f000 fd2b 	bl	8005b78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005122:	2300      	movs	r3, #0
		}
	}
}
 8005124:	4618      	mov	r0, r3
 8005126:	3738      	adds	r7, #56	; 0x38
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08e      	sub	sp, #56	; 0x38
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <xQueueGenericSendFromISR+0x3c>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <xQueueGenericSendFromISR+0x40>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <xQueueGenericSendFromISR+0x42>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	623b      	str	r3, [r7, #32]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d103      	bne.n	800519a <xQueueGenericSendFromISR+0x6a>
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <xQueueGenericSendFromISR+0x6e>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueGenericSendFromISR+0x70>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61fb      	str	r3, [r7, #28]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ba:	f001 fe59 	bl	8006e70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051be:	f3ef 8211 	mrs	r2, BASEPRI
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61ba      	str	r2, [r7, #24]
 80051d4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <xQueueGenericSendFromISR+0xbc>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d12c      	bne.n	8005246 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fc:	f000 f910 	bl	8005420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005200:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d112      	bne.n	8005230 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	3324      	adds	r3, #36	; 0x24
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fec4 	bl	8005fa4 <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005230:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005234:	3301      	adds	r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	b25a      	sxtb	r2, r3
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005244:	e001      	b.n	800524a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005254:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005258:	4618      	mov	r0, r3
 800525a:	3738      	adds	r7, #56	; 0x38
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xQueueReceive+0x30>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	623b      	str	r3, [r7, #32]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <xQueueReceive+0x3e>
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <xQueueReceive+0x42>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueReceive+0x44>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueReceive+0x5e>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61fb      	str	r3, [r7, #28]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052be:	f001 f833 	bl	8006328 <xTaskGetSchedulerState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xQueueReceive+0x6e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xQueueReceive+0x72>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueReceive+0x74>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xQueueReceive+0x8e>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61bb      	str	r3, [r7, #24]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ee:	f001 fcfd 	bl	8006cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01f      	beq.n	800533e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005302:	f000 f8f7 	bl	80054f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1e5a      	subs	r2, r3, #1
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00f      	beq.n	8005336 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	3310      	adds	r3, #16
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe42 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <xQueueReceive+0x1bc>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005336:	f001 fd09 	bl	8006d4c <vPortExitCritical>
				return pdPASS;
 800533a:	2301      	movs	r3, #1
 800533c:	e069      	b.n	8005412 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005344:	f001 fd02 	bl	8006d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
 800534a:	e062      	b.n	8005412 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005352:	f107 0310 	add.w	r3, r7, #16
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fe88 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005360:	f001 fcf4 	bl	8006d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005364:	f000 fbfa 	bl	8005b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005368:	f001 fcc0 	bl	8006cec <vPortEnterCritical>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005372:	b25b      	sxtb	r3, r3
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d103      	bne.n	8005382 <xQueueReceive+0x122>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d103      	bne.n	8005398 <xQueueReceive+0x138>
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005398:	f001 fcd8 	bl	8006d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800539c:	1d3a      	adds	r2, r7, #4
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fe77 	bl	8006098 <xTaskCheckForTimeOut>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d123      	bne.n	80053f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 f917 	bl	80055e4 <prvIsQueueEmpty>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d017      	beq.n	80053ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fd9d 	bl	8005f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053cc:	f000 f8b8 	bl	8005540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053d0:	f000 fbd2 	bl	8005b78 <xTaskResumeAll>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d189      	bne.n	80052ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <xQueueReceive+0x1bc>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	e780      	b.n	80052ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ee:	f000 f8a7 	bl	8005540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053f2:	f000 fbc1 	bl	8005b78 <xTaskResumeAll>
 80053f6:	e77a      	b.n	80052ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fa:	f000 f8a1 	bl	8005540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053fe:	f000 fbbb 	bl	8005b78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005404:	f000 f8ee 	bl	80055e4 <prvIsQueueEmpty>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	f43f af6f 	beq.w	80052ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005412:	4618      	mov	r0, r3
 8005414:	3730      	adds	r7, #48	; 0x30
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d14d      	bne.n	80054e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 ff8a 	bl	8006364 <xTaskPriorityDisinherit>
 8005450:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	e043      	b.n	80054e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d119      	bne.n	8005494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6898      	ldr	r0, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	461a      	mov	r2, r3
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	f001 ff40 	bl	80072f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	441a      	add	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d32b      	bcc.n	80054e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	e026      	b.n	80054e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68d8      	ldr	r0, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	461a      	mov	r2, r3
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	f001 ff26 	bl	80072f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	425b      	negs	r3, r3
 80054ae:	441a      	add	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d207      	bcs.n	80054d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	425b      	negs	r3, r3
 80054ca:	441a      	add	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d105      	bne.n	80054e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3b01      	subs	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054ea:	697b      	ldr	r3, [r7, #20]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d018      	beq.n	8005538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d303      	bcc.n	8005528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68d9      	ldr	r1, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	461a      	mov	r2, r3
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f001 fedc 	bl	80072f0 <memcpy>
	}
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005548:	f001 fbd0 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005554:	e011      	b.n	800557a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fd1e 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800556e:	f000 fdf5 	bl	800615c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	3b01      	subs	r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800557a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dce9      	bgt.n	8005556 <prvUnlockQueue+0x16>
 8005582:	e000      	b.n	8005586 <prvUnlockQueue+0x46>
					break;
 8005584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800558e:	f001 fbdd 	bl	8006d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005592:	f001 fbab 	bl	8006cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800559e:	e011      	b.n	80055c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3310      	adds	r3, #16
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fcf9 	bl	8005fa4 <xTaskRemoveFromEventList>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055b8:	f000 fdd0 	bl	800615c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	3b01      	subs	r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dce9      	bgt.n	80055a0 <prvUnlockQueue+0x60>
 80055cc:	e000      	b.n	80055d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	22ff      	movs	r2, #255	; 0xff
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 fbb8 	bl	8006d4c <vPortExitCritical>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ec:	f001 fb7e 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e001      	b.n	8005602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005602:	f001 fba3 	bl	8006d4c <vPortExitCritical>

	return xReturn;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005618:	f001 fb68 	bl	8006cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	429a      	cmp	r2, r3
 8005626:	d102      	bne.n	800562e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e001      	b.n	8005632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005632:	f001 fb8b 	bl	8006d4c <vPortExitCritical>

	return xReturn;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e014      	b.n	800567a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005650:	4a0e      	ldr	r2, [pc, #56]	; (800568c <vQueueAddToRegistry+0x4c>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800565c:	490b      	ldr	r1, [pc, #44]	; (800568c <vQueueAddToRegistry+0x4c>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005666:	4a09      	ldr	r2, [pc, #36]	; (800568c <vQueueAddToRegistry+0x4c>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005672:	e006      	b.n	8005682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b07      	cmp	r3, #7
 800567e:	d9e7      	bls.n	8005650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	20000a00 	.word	0x20000a00

08005690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056a0:	f001 fb24 	bl	8006cec <vPortEnterCritical>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d103      	bne.n	80056ba <vQueueWaitForMessageRestricted+0x2a>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d103      	bne.n	80056d0 <vQueueWaitForMessageRestricted+0x40>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	f001 fb3c 	bl	8006d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fc31 	bl	8005f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff ff28 	bl	8005540 <prvUnlockQueue>
	}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	; 0x38
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xTaskCreateStatic+0x46>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800573e:	235c      	movs	r3, #92	; 0x5c
 8005740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b5c      	cmp	r3, #92	; 0x5c
 8005746:	d00a      	beq.n	800575e <xTaskCreateStatic+0x66>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61bb      	str	r3, [r7, #24]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <xTaskCreateStatic+0xaa>
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f850 	bl	800583a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579c:	f000 f8d4 	bl	8005948 <prvAddNewTaskToReadyList>
 80057a0:	e001      	b.n	80057a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057a6:	697b      	ldr	r3, [r7, #20]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	; 0x30
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fb91 	bl	8006eec <pvPortMalloc>
 80057ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80057d2:	205c      	movs	r0, #92	; 0x5c
 80057d4:	f001 fb8a 	bl	8006eec <pvPortMalloc>
 80057d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
 80057e6:	e005      	b.n	80057f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f001 fc43 	bl	8007074 <vPortFree>
 80057ee:	e001      	b.n	80057f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	2300      	movs	r3, #0
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f80e 	bl	800583a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800581e:	69f8      	ldr	r0, [r7, #28]
 8005820:	f000 f892 	bl	8005948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e002      	b.n	8005830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005830:	69bb      	ldr	r3, [r7, #24]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b088      	sub	sp, #32
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	461a      	mov	r2, r3
 8005852:	21a5      	movs	r1, #165	; 0xa5
 8005854:	f001 fd5a 	bl	800730c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005862:	3b01      	subs	r3, #1
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f023 0307 	bic.w	r3, r3, #7
 8005870:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <prvInitialiseNewTask+0x58>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	617b      	str	r3, [r7, #20]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e012      	b.n	80058be <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	7819      	ldrb	r1, [r3, #0]
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	3334      	adds	r3, #52	; 0x34
 80058a8:	460a      	mov	r2, r1
 80058aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	2b0f      	cmp	r3, #15
 80058c2:	d9e9      	bls.n	8005898 <prvInitialiseNewTask+0x5e>
 80058c4:	e000      	b.n	80058c8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80058c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	2b37      	cmp	r3, #55	; 0x37
 80058d4:	d901      	bls.n	80058da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058d6:	2337      	movs	r3, #55	; 0x37
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	3304      	adds	r3, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff f98c 	bl	8004c0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	3318      	adds	r3, #24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f987 	bl	8004c0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2200      	movs	r2, #0
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	69b8      	ldr	r0, [r7, #24]
 800592a:	f001 f8ef 	bl	8006b0c <pxPortInitialiseStack>
 800592e:	4602      	mov	r2, r0
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005940:	bf00      	nop
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005950:	f001 f9cc 	bl	8006cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 800595c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800595e:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800596c:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d110      	bne.n	8005996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005974:	f000 fc16 	bl	80061a4 <prvInitialiseTaskLists>
 8005978:	e00d      	b.n	8005996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <prvAddNewTaskToReadyList+0xcc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	429a      	cmp	r2, r3
 800598e:	d802      	bhi.n	8005996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005990:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 800599e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <prvAddNewTaskToReadyList+0xd4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d903      	bls.n	80059bc <prvAddNewTaskToReadyList+0x74>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <prvAddNewTaskToReadyList+0xd4>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <prvAddNewTaskToReadyList+0xd8>)
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7ff f927 	bl	8004c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059d8:	f001 f9b8 	bl	8006d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <prvAddNewTaskToReadyList+0xcc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d207      	bcs.n	8005a02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <prvAddNewTaskToReadyList+0xdc>)
 80059f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000f14 	.word	0x20000f14
 8005a10:	20000a40 	.word	0x20000a40
 8005a14:	20000f20 	.word	0x20000f20
 8005a18:	20000f30 	.word	0x20000f30
 8005a1c:	20000f1c 	.word	0x20000f1c
 8005a20:	20000a44 	.word	0x20000a44
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <vTaskDelay+0x60>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <vTaskDelay+0x30>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60bb      	str	r3, [r7, #8]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a58:	f000 f880 	bl	8005b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fcee 	bl	8006440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a64:	f000 f888 	bl	8005b78 <xTaskResumeAll>
 8005a68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <vTaskDelay+0x64>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000f3c 	.word	0x20000f3c
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a9e:	463a      	mov	r2, r7
 8005aa0:	1d39      	adds	r1, r7, #4
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff f860 	bl	8004b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	9202      	str	r2, [sp, #8]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	460a      	mov	r2, r1
 8005abe:	4921      	ldr	r1, [pc, #132]	; (8005b44 <vTaskStartScheduler+0xb4>)
 8005ac0:	4821      	ldr	r0, [pc, #132]	; (8005b48 <vTaskStartScheduler+0xb8>)
 8005ac2:	f7ff fe19 	bl	80056f8 <xTaskCreateStatic>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4a20      	ldr	r2, [pc, #128]	; (8005b4c <vTaskStartScheduler+0xbc>)
 8005aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005acc:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <vTaskStartScheduler+0xbc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e001      	b.n	8005ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d102      	bne.n	8005aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ae4:	f000 fd00 	bl	80064e8 <xTimerCreateTimerTask>
 8005ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d116      	bne.n	8005b1e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <vTaskStartScheduler+0xc0>)
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <vTaskStartScheduler+0xc4>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <vTaskStartScheduler+0xc8>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b18:	f001 f876 	bl	8006c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b1c:	e00e      	b.n	8005b3c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d10a      	bne.n	8005b3c <vTaskStartScheduler+0xac>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60fb      	str	r3, [r7, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <vTaskStartScheduler+0xaa>
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	0800bbe4 	.word	0x0800bbe4
 8005b48:	08006175 	.word	0x08006175
 8005b4c:	20000f38 	.word	0x20000f38
 8005b50:	20000f34 	.word	0x20000f34
 8005b54:	20000f20 	.word	0x20000f20
 8005b58:	20000f18 	.word	0x20000f18

08005b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <vTaskSuspendAll+0x18>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	4a03      	ldr	r2, [pc, #12]	; (8005b74 <vTaskSuspendAll+0x18>)
 8005b68:	6013      	str	r3, [r2, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000f3c 	.word	0x20000f3c

08005b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b86:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <xTaskResumeAll+0x118>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	603b      	str	r3, [r7, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ba4:	f001 f8a2 	bl	8006cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <xTaskResumeAll+0x118>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a38      	ldr	r2, [pc, #224]	; (8005c90 <xTaskResumeAll+0x118>)
 8005bb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb2:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <xTaskResumeAll+0x118>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d162      	bne.n	8005c80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <xTaskResumeAll+0x11c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d05e      	beq.n	8005c80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bc2:	e02f      	b.n	8005c24 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005bc4:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <xTaskResumeAll+0x120>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3318      	adds	r3, #24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff f883 	bl	8004cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff f87e 	bl	8004cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <xTaskResumeAll+0x124>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d903      	bls.n	8005bf4 <xTaskResumeAll+0x7c>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <xTaskResumeAll+0x124>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <xTaskResumeAll+0x128>)
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7ff f80b 	bl	8004c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c14:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <xTaskResumeAll+0x12c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <xTaskResumeAll+0x130>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <xTaskResumeAll+0x120>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1cb      	bne.n	8005bc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c32:	f000 fb55 	bl	80062e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <xTaskResumeAll+0x134>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c42:	f000 f845 	bl	8005cd0 <xTaskIncrementTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c4c:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <xTaskResumeAll+0x130>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f1      	bne.n	8005c42 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <xTaskResumeAll+0x134>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <xTaskResumeAll+0x130>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xTaskResumeAll+0x138>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c80:	f001 f864 	bl	8006d4c <vPortExitCritical>

	return xAlreadyYielded;
 8005c84:	68bb      	ldr	r3, [r7, #8]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000f3c 	.word	0x20000f3c
 8005c94:	20000f14 	.word	0x20000f14
 8005c98:	20000ed4 	.word	0x20000ed4
 8005c9c:	20000f1c 	.word	0x20000f1c
 8005ca0:	20000a44 	.word	0x20000a44
 8005ca4:	20000a40 	.word	0x20000a40
 8005ca8:	20000f28 	.word	0x20000f28
 8005cac:	20000f24 	.word	0x20000f24
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cba:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <xTaskGetTickCount+0x18>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cc0:	687b      	ldr	r3, [r7, #4]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	20000f18 	.word	0x20000f18

08005cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cda:	4b51      	ldr	r3, [pc, #324]	; (8005e20 <xTaskIncrementTick+0x150>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 808e 	bne.w	8005e00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ce4:	4b4f      	ldr	r3, [pc, #316]	; (8005e24 <xTaskIncrementTick+0x154>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cec:	4a4d      	ldr	r2, [pc, #308]	; (8005e24 <xTaskIncrementTick+0x154>)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d120      	bne.n	8005d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cf8:	4b4b      	ldr	r3, [pc, #300]	; (8005e28 <xTaskIncrementTick+0x158>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	603b      	str	r3, [r7, #0]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xTaskIncrementTick+0x46>
 8005d18:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <xTaskIncrementTick+0x158>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <xTaskIncrementTick+0x15c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a41      	ldr	r2, [pc, #260]	; (8005e28 <xTaskIncrementTick+0x158>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	4a41      	ldr	r2, [pc, #260]	; (8005e2c <xTaskIncrementTick+0x15c>)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <xTaskIncrementTick+0x160>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a3f      	ldr	r2, [pc, #252]	; (8005e30 <xTaskIncrementTick+0x160>)
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	f000 fad3 	bl	80062e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <xTaskIncrementTick+0x164>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d34e      	bcc.n	8005de2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d44:	4b38      	ldr	r3, [pc, #224]	; (8005e28 <xTaskIncrementTick+0x158>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <xTaskIncrementTick+0x82>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <xTaskIncrementTick+0x84>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <xTaskIncrementTick+0x164>)
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5e:	601a      	str	r2, [r3, #0]
					break;
 8005d60:	e03f      	b.n	8005de2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d62:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <xTaskIncrementTick+0x158>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d203      	bcs.n	8005d82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d7a:	4a2e      	ldr	r2, [pc, #184]	; (8005e34 <xTaskIncrementTick+0x164>)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6013      	str	r3, [r2, #0]
						break;
 8005d80:	e02f      	b.n	8005de2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe ffa8 	bl	8004cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3318      	adds	r3, #24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe ff9f 	bl	8004cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	4b25      	ldr	r3, [pc, #148]	; (8005e38 <xTaskIncrementTick+0x168>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d903      	bls.n	8005db2 <xTaskIncrementTick+0xe2>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <xTaskIncrementTick+0x168>)
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <xTaskIncrementTick+0x16c>)
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe ff2c 	bl	8004c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <xTaskIncrementTick+0x170>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d3b3      	bcc.n	8005d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de0:	e7b0      	b.n	8005d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <xTaskIncrementTick+0x170>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	4914      	ldr	r1, [pc, #80]	; (8005e3c <xTaskIncrementTick+0x16c>)
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d907      	bls.n	8005e0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e004      	b.n	8005e0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <xTaskIncrementTick+0x174>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	4a0f      	ldr	r2, [pc, #60]	; (8005e44 <xTaskIncrementTick+0x174>)
 8005e08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <xTaskIncrementTick+0x178>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e16:	697b      	ldr	r3, [r7, #20]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000f3c 	.word	0x20000f3c
 8005e24:	20000f18 	.word	0x20000f18
 8005e28:	20000ecc 	.word	0x20000ecc
 8005e2c:	20000ed0 	.word	0x20000ed0
 8005e30:	20000f2c 	.word	0x20000f2c
 8005e34:	20000f34 	.word	0x20000f34
 8005e38:	20000f1c 	.word	0x20000f1c
 8005e3c:	20000a44 	.word	0x20000a44
 8005e40:	20000a40 	.word	0x20000a40
 8005e44:	20000f24 	.word	0x20000f24
 8005e48:	20000f28 	.word	0x20000f28

08005e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e52:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <vTaskSwitchContext+0xa4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <vTaskSwitchContext+0xa8>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e60:	e041      	b.n	8005ee6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <vTaskSwitchContext+0xa8>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e68:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <vTaskSwitchContext+0xac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e010      	b.n	8005e92 <vTaskSwitchContext+0x46>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <vTaskSwitchContext+0x40>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	607b      	str	r3, [r7, #4]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <vTaskSwitchContext+0x3e>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	491a      	ldr	r1, [pc, #104]	; (8005efc <vTaskSwitchContext+0xb0>)
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0e4      	beq.n	8005e70 <vTaskSwitchContext+0x24>
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4a12      	ldr	r2, [pc, #72]	; (8005efc <vTaskSwitchContext+0xb0>)
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	605a      	str	r2, [r3, #4]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d104      	bne.n	8005ed6 <vTaskSwitchContext+0x8a>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <vTaskSwitchContext+0xb4>)
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4a05      	ldr	r2, [pc, #20]	; (8005ef8 <vTaskSwitchContext+0xac>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	20000f3c 	.word	0x20000f3c
 8005ef4:	20000f28 	.word	0x20000f28
 8005ef8:	20000f1c 	.word	0x20000f1c
 8005efc:	20000a44 	.word	0x20000a44
 8005f00:	20000a40 	.word	0x20000a40

08005f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <vTaskPlaceOnEventList+0x44>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe fe9a 	bl	8004c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f38:	2101      	movs	r1, #1
 8005f3a:	6838      	ldr	r0, [r7, #0]
 8005f3c:	f000 fa80 	bl	8006440 <prvAddCurrentTaskToDelayedList>
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000a40 	.word	0x20000a40

08005f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	617b      	str	r3, [r7, #20]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7fe fe52 	bl	8004c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f000 fa55 	bl	8006440 <prvAddCurrentTaskToDelayedList>
	}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000a40 	.word	0x20000a40

08005fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fe81 	bl	8004cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fda:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <xTaskRemoveFromEventList+0xb0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11d      	bne.n	800601e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fe78 	bl	8004cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d903      	bls.n	8006000 <xTaskRemoveFromEventList+0x5c>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4a13      	ldr	r2, [pc, #76]	; (800605c <xTaskRemoveFromEventList+0xb8>)
 800600e:	441a      	add	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe fe05 	bl	8004c26 <vListInsertEnd>
 800601c:	e005      	b.n	800602a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3318      	adds	r3, #24
 8006022:	4619      	mov	r1, r3
 8006024:	480e      	ldr	r0, [pc, #56]	; (8006060 <xTaskRemoveFromEventList+0xbc>)
 8006026:	f7fe fdfe 	bl	8004c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <xTaskRemoveFromEventList+0xc0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	429a      	cmp	r2, r3
 8006036:	d905      	bls.n	8006044 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <xTaskRemoveFromEventList+0xc4>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e001      	b.n	8006048 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000f3c 	.word	0x20000f3c
 8006058:	20000f1c 	.word	0x20000f1c
 800605c:	20000a44 	.word	0x20000a44
 8006060:	20000ed4 	.word	0x20000ed4
 8006064:	20000a40 	.word	0x20000a40
 8006068:	20000f28 	.word	0x20000f28

0800606c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <vTaskInternalSetTimeOutState+0x24>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <vTaskInternalSetTimeOutState+0x28>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000f2c 	.word	0x20000f2c
 8006094:	20000f18 	.word	0x20000f18

08006098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	613b      	str	r3, [r7, #16]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060da:	f000 fe07 	bl	8006cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <xTaskCheckForTimeOut+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	e023      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <xTaskCheckForTimeOut+0xc0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d007      	beq.n	800611a <xTaskCheckForTimeOut+0x82>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e015      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	429a      	cmp	r2, r3
 8006122:	d20b      	bcs.n	800613c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff9b 	bl	800606c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	e004      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006146:	f000 fe01 	bl	8006d4c <vPortExitCritical>

	return xReturn;
 800614a:	69fb      	ldr	r3, [r7, #28]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000f18 	.word	0x20000f18
 8006158:	20000f2c 	.word	0x20000f2c

0800615c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <vTaskMissedYield+0x14>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000f28 	.word	0x20000f28

08006174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800617c:	f000 f852 	bl	8006224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <prvIdleTask+0x28>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d9f9      	bls.n	800617c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <prvIdleTask+0x2c>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006198:	e7f0      	b.n	800617c <prvIdleTask+0x8>
 800619a:	bf00      	nop
 800619c:	20000a44 	.word	0x20000a44
 80061a0:	e000ed04 	.word	0xe000ed04

080061a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	e00c      	b.n	80061ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <prvInitialiseTaskLists+0x60>)
 80061bc:	4413      	add	r3, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fd06 	bl	8004bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3301      	adds	r3, #1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b37      	cmp	r3, #55	; 0x37
 80061ce:	d9ef      	bls.n	80061b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d0:	480d      	ldr	r0, [pc, #52]	; (8006208 <prvInitialiseTaskLists+0x64>)
 80061d2:	f7fe fcfd 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061d6:	480d      	ldr	r0, [pc, #52]	; (800620c <prvInitialiseTaskLists+0x68>)
 80061d8:	f7fe fcfa 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061dc:	480c      	ldr	r0, [pc, #48]	; (8006210 <prvInitialiseTaskLists+0x6c>)
 80061de:	f7fe fcf7 	bl	8004bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061e2:	480c      	ldr	r0, [pc, #48]	; (8006214 <prvInitialiseTaskLists+0x70>)
 80061e4:	f7fe fcf4 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e8:	480b      	ldr	r0, [pc, #44]	; (8006218 <prvInitialiseTaskLists+0x74>)
 80061ea:	f7fe fcf1 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <prvInitialiseTaskLists+0x78>)
 80061f0:	4a05      	ldr	r2, [pc, #20]	; (8006208 <prvInitialiseTaskLists+0x64>)
 80061f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <prvInitialiseTaskLists+0x7c>)
 80061f6:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvInitialiseTaskLists+0x68>)
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000a44 	.word	0x20000a44
 8006208:	20000ea4 	.word	0x20000ea4
 800620c:	20000eb8 	.word	0x20000eb8
 8006210:	20000ed4 	.word	0x20000ed4
 8006214:	20000ee8 	.word	0x20000ee8
 8006218:	20000f00 	.word	0x20000f00
 800621c:	20000ecc 	.word	0x20000ecc
 8006220:	20000ed0 	.word	0x20000ed0

08006224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800622a:	e019      	b.n	8006260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800622c:	f000 fd5e 	bl	8006cec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <prvCheckTasksWaitingTermination+0x50>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fd4d 	bl	8004cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <prvCheckTasksWaitingTermination+0x54>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <prvCheckTasksWaitingTermination+0x54>)
 800624a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3b01      	subs	r3, #1
 8006252:	4a0a      	ldr	r2, [pc, #40]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 8006254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006256:	f000 fd79 	bl	8006d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f810 	bl	8006280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e1      	bne.n	800622c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000ee8 	.word	0x20000ee8
 8006278:	20000f14 	.word	0x20000f14
 800627c:	20000efc 	.word	0x20000efc

08006280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800628e:	2b00      	cmp	r3, #0
 8006290:	d108      	bne.n	80062a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4618      	mov	r0, r3
 8006298:	f000 feec 	bl	8007074 <vPortFree>
				vPortFree( pxTCB );
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fee9 	bl	8007074 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062a2:	e018      	b.n	80062d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d103      	bne.n	80062b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fee0 	bl	8007074 <vPortFree>
	}
 80062b4:	e00f      	b.n	80062d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d00a      	beq.n	80062d6 <prvDeleteTCB+0x56>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	60fb      	str	r3, [r7, #12]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <prvDeleteTCB+0x54>
	}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <prvResetNextTaskUnblockTime+0x40>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <prvResetNextTaskUnblockTime+0x14>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <prvResetNextTaskUnblockTime+0x16>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvResetNextTaskUnblockTime+0x44>)
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006300:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006302:	e008      	b.n	8006316 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <prvResetNextTaskUnblockTime+0x40>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4a04      	ldr	r2, [pc, #16]	; (8006324 <prvResetNextTaskUnblockTime+0x44>)
 8006314:	6013      	str	r3, [r2, #0]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	20000ecc 	.word	0x20000ecc
 8006324:	20000f34 	.word	0x20000f34

08006328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <xTaskGetSchedulerState+0x34>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006336:	2301      	movs	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e008      	b.n	800634e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633c:	4b08      	ldr	r3, [pc, #32]	; (8006360 <xTaskGetSchedulerState+0x38>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006344:	2302      	movs	r3, #2
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e001      	b.n	800634e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800634e:	687b      	ldr	r3, [r7, #4]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000f20 	.word	0x20000f20
 8006360:	20000f3c 	.word	0x20000f3c

08006364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d056      	beq.n	8006428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <xTaskPriorityDisinherit+0xd0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d00a      	beq.n	800639a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	60fb      	str	r3, [r7, #12]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	1e5a      	subs	r2, r3, #1
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d02c      	beq.n	8006428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d128      	bne.n	8006428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3304      	adds	r3, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fc7e 	bl	8004cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <xTaskPriorityDisinherit+0xd4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d903      	bls.n	8006408 <xTaskPriorityDisinherit+0xa4>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <xTaskPriorityDisinherit+0xd4>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a09      	ldr	r2, [pc, #36]	; (800643c <xTaskPriorityDisinherit+0xd8>)
 8006416:	441a      	add	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe fc01 	bl	8004c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006428:	697b      	ldr	r3, [r7, #20]
	}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000a40 	.word	0x20000a40
 8006438:	20000f1c 	.word	0x20000f1c
 800643c:	20000a44 	.word	0x20000a44

08006440 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800644a:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006450:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3304      	adds	r3, #4
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fc40 	bl	8004cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d10a      	bne.n	800647a <prvAddCurrentTaskToDelayedList+0x3a>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646a:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4819      	ldr	r0, [pc, #100]	; (80064d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006474:	f7fe fbd7 	bl	8004c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006478:	e026      	b.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	429a      	cmp	r2, r3
 8006490:	d209      	bcs.n	80064a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fbe4 	bl	8004c6c <vListInsert>
}
 80064a4:	e010      	b.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064a6:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fe fbda 	bl	8004c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d202      	bcs.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064c2:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6013      	str	r3, [r2, #0]
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000f18 	.word	0x20000f18
 80064d4:	20000a40 	.word	0x20000a40
 80064d8:	20000f00 	.word	0x20000f00
 80064dc:	20000ed0 	.word	0x20000ed0
 80064e0:	20000ecc 	.word	0x20000ecc
 80064e4:	20000f34 	.word	0x20000f34

080064e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064f2:	f000 facb 	bl	8006a8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <xTimerCreateTimerTask+0x80>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d021      	beq.n	8006542 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006506:	1d3a      	adds	r2, r7, #4
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fb43 	bl	8004b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	9202      	str	r2, [sp, #8]
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	2302      	movs	r3, #2
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	460a      	mov	r2, r1
 8006528:	4910      	ldr	r1, [pc, #64]	; (800656c <xTimerCreateTimerTask+0x84>)
 800652a:	4811      	ldr	r0, [pc, #68]	; (8006570 <xTimerCreateTimerTask+0x88>)
 800652c:	f7ff f8e4 	bl	80056f8 <xTaskCreateStatic>
 8006530:	4603      	mov	r3, r0
 8006532:	4a10      	ldr	r2, [pc, #64]	; (8006574 <xTimerCreateTimerTask+0x8c>)
 8006534:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <xTimerCreateTimerTask+0x8c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	613b      	str	r3, [r7, #16]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000f70 	.word	0x20000f70
 800656c:	0800bbec 	.word	0x0800bbec
 8006570:	08006695 	.word	0x08006695
 8006574:	20000f74 	.word	0x20000f74

08006578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006586:	2300      	movs	r3, #0
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <xTimerGenericCommand+0x98>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d02a      	beq.n	8006604 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b05      	cmp	r3, #5
 80065be:	dc18      	bgt.n	80065f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065c0:	f7ff feb2 	bl	8006328 <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d109      	bne.n	80065de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <xTimerGenericCommand+0x98>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f107 0110 	add.w	r1, r7, #16
 80065d2:	2300      	movs	r3, #0
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	f7fe fcad 	bl	8004f34 <xQueueGenericSend>
 80065da:	6278      	str	r0, [r7, #36]	; 0x24
 80065dc:	e012      	b.n	8006604 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <xTimerGenericCommand+0x98>)
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f107 0110 	add.w	r1, r7, #16
 80065e6:	2300      	movs	r3, #0
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7fe fca3 	bl	8004f34 <xQueueGenericSend>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24
 80065f0:	e008      	b.n	8006604 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <xTimerGenericCommand+0x98>)
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	f107 0110 	add.w	r1, r7, #16
 80065fa:	2300      	movs	r3, #0
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	f7fe fd97 	bl	8005130 <xQueueGenericSendFromISR>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006606:	4618      	mov	r0, r3
 8006608:	3728      	adds	r7, #40	; 0x28
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000f70 	.word	0x20000f70

08006614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <prvProcessExpiredTimer+0x7c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3304      	adds	r3, #4
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fb55 	bl	8004cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d122      	bne.n	8006680 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	18d1      	adds	r1, r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f000 f8c8 	bl	80067dc <prvInsertTimerInActiveList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006652:	2300      	movs	r3, #0
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	2100      	movs	r1, #0
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f7ff ff8b 	bl	8006578 <xTimerGenericCommand>
 8006662:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60fb      	str	r3, [r7, #12]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	6978      	ldr	r0, [r7, #20]
 8006686:	4798      	blx	r3
}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000f68 	.word	0x20000f68

08006694 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 f857 	bl	8006754 <prvGetNextExpireTime>
 80066a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4619      	mov	r1, r3
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f803 	bl	80066b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066b2:	f000 f8d5 	bl	8006860 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066b6:	e7f1      	b.n	800669c <prvTimerTask+0x8>

080066b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066c2:	f7ff fa4b 	bl	8005b5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f866 	bl	800679c <prvSampleTimeNow>
 80066d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d130      	bne.n	800673a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <prvProcessTimerOrBlockTask+0x3c>
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d806      	bhi.n	80066f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066e6:	f7ff fa47 	bl	8005b78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff91 	bl	8006614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066f2:	e024      	b.n	800673e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvProcessTimerOrBlockTask+0x90>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bf0c      	ite	eq
 8006704:	2301      	moveq	r3, #1
 8006706:	2300      	movne	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <prvProcessTimerOrBlockTask+0x94>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	f7fe ffb9 	bl	8005690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800671e:	f7ff fa2b 	bl	8005b78 <xTaskResumeAll>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <prvProcessTimerOrBlockTask+0x98>)
 800672a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	f3bf 8f6f 	isb	sy
}
 8006738:	e001      	b.n	800673e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800673a:	f7ff fa1d 	bl	8005b78 <xTaskResumeAll>
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000f6c 	.word	0x20000f6c
 800674c:	20000f70 	.word	0x20000f70
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <prvGetNextExpireTime+0x44>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf0c      	ite	eq
 8006766:	2301      	moveq	r3, #1
 8006768:	2300      	movne	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <prvGetNextExpireTime+0x44>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e001      	b.n	800678a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000f68 	.word	0x20000f68

0800679c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067a4:	f7ff fa86 	bl	8005cb4 <xTaskGetTickCount>
 80067a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvSampleTimeNow+0x3c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d205      	bcs.n	80067c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067b4:	f000 f908 	bl	80069c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e002      	b.n	80067c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067c6:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <prvSampleTimeNow+0x3c>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000f78 	.word	0x20000f78

080067dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d812      	bhi.n	8006828 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	429a      	cmp	r2, r3
 800680e:	d302      	bcc.n	8006816 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e01b      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006816:	4b10      	ldr	r3, [pc, #64]	; (8006858 <prvInsertTimerInActiveList+0x7c>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f7fe fa23 	bl	8004c6c <vListInsert>
 8006826:	e012      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d206      	bcs.n	800683e <prvInsertTimerInActiveList+0x62>
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e007      	b.n	800684e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <prvInsertTimerInActiveList+0x80>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe fa0f 	bl	8004c6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800684e:	697b      	ldr	r3, [r7, #20]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000f6c 	.word	0x20000f6c
 800685c:	20000f68 	.word	0x20000f68

08006860 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	; 0x38
 8006864:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006866:	e09d      	b.n	80069a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	da18      	bge.n	80068a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	3304      	adds	r3, #4
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	61fb      	str	r3, [r7, #28]
}
 800688c:	bf00      	nop
 800688e:	e7fe      	b.n	800688e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006896:	6850      	ldr	r0, [r2, #4]
 8006898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689a:	6892      	ldr	r2, [r2, #8]
 800689c:	4611      	mov	r1, r2
 800689e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	db7d      	blt.n	80069a2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	3304      	adds	r3, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fa10 	bl	8004cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068bc:	463b      	mov	r3, r7
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff ff6c 	bl	800679c <prvSampleTimeNow>
 80068c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b09      	cmp	r3, #9
 80068ca:	d86b      	bhi.n	80069a4 <prvProcessReceivedCommands+0x144>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <prvProcessReceivedCommands+0x74>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	080068fd 	.word	0x080068fd
 80068e0:	080069a5 	.word	0x080069a5
 80068e4:	08006959 	.word	0x08006959
 80068e8:	08006991 	.word	0x08006991
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	080068fd 	.word	0x080068fd
 80068f4:	080069a5 	.word	0x080069a5
 80068f8:	08006959 	.word	0x08006959
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	18d1      	adds	r1, r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690a:	f7ff ff67 	bl	80067dc <prvInsertTimerInActiveList>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d047      	beq.n	80069a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d13f      	bne.n	80069a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	441a      	add	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	2100      	movs	r1, #0
 8006934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006936:	f7ff fe1f 	bl	8006578 <xTimerGenericCommand>
 800693a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d130      	bne.n	80069a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	61bb      	str	r3, [r7, #24]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	18d1      	adds	r1, r2, r3
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698a:	f7ff ff27 	bl	80067dc <prvInsertTimerInActiveList>
					break;
 800698e:	e009      	b.n	80069a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800699a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699c:	f000 fb6a 	bl	8007074 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a0:	e000      	b.n	80069a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <prvProcessReceivedCommands+0x164>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1d39      	adds	r1, r7, #4
 80069aa:	2200      	movs	r2, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fc57 	bl	8005260 <xQueueReceive>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f af57 	bne.w	8006868 <prvProcessReceivedCommands+0x8>
	}
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	3730      	adds	r7, #48	; 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000f70 	.word	0x20000f70

080069c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ce:	e045      	b.n	8006a5c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d0:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069da:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f977 	bl	8004cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d12e      	bne.n	8006a5c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d90e      	bls.n	8006a2e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fe f920 	bl	8004c6c <vListInsert>
 8006a2c:	e016      	b.n	8006a5c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2300      	movs	r3, #0
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	2100      	movs	r1, #0
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff fd9d 	bl	8006578 <xTimerGenericCommand>
 8006a3e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	603b      	str	r3, [r7, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1b4      	bne.n	80069d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <prvSwitchTimerLists+0xbc>)
 8006a72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0xc0>)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6013      	str	r3, [r2, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000f68 	.word	0x20000f68
 8006a88:	20000f6c 	.word	0x20000f6c

08006a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a92:	f000 f92b 	bl	8006cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a96:	4b15      	ldr	r3, [pc, #84]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d120      	bne.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a9e:	4814      	ldr	r0, [pc, #80]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aa0:	f7fe f896 	bl	8004bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa4:	4813      	ldr	r0, [pc, #76]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006aa6:	f7fe f893 	bl	8004bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <prvCheckForValidListAndQueue+0x6c>)
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <prvCheckForValidListAndQueue+0x70>)
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006ab4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <prvCheckForValidListAndQueue+0x74>)
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <prvCheckForValidListAndQueue+0x78>)
 8006abe:	2110      	movs	r1, #16
 8006ac0:	200a      	movs	r0, #10
 8006ac2:	f7fe f99d 	bl	8004e00 <xQueueGenericCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006aca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	490b      	ldr	r1, [pc, #44]	; (8006b08 <prvCheckForValidListAndQueue+0x7c>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fdb0 	bl	8005640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae0:	f000 f934 	bl	8006d4c <vPortExitCritical>
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000f70 	.word	0x20000f70
 8006af0:	20000f40 	.word	0x20000f40
 8006af4:	20000f54 	.word	0x20000f54
 8006af8:	20000f68 	.word	0x20000f68
 8006afc:	20000f6c 	.word	0x20000f6c
 8006b00:	2000101c 	.word	0x2000101c
 8006b04:	20000f7c 	.word	0x20000f7c
 8006b08:	0800bbf4 	.word	0x0800bbf4

08006b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b04      	subs	r3, #4
 8006b1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3b04      	subs	r3, #4
 8006b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <pxPortInitialiseStack+0x54>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3b14      	subs	r3, #20
 8006b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b20      	subs	r3, #32
 8006b52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b54:	68fb      	ldr	r3, [r7, #12]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	08006b65 	.word	0x08006b65

08006b64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <prvTaskExitError+0x54>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d00a      	beq.n	8006b8e <prvTaskExitError+0x2a>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	60fb      	str	r3, [r7, #12]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <prvTaskExitError+0x28>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60bb      	str	r3, [r7, #8]
}
 8006ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ba2:	bf00      	nop
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0fc      	beq.n	8006ba4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000010 	.word	0x20000010
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8006bde:	4770      	bx	lr

08006be0 <pxCurrentTCBConst2>:
 8006be0:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006be8:	4806      	ldr	r0, [pc, #24]	; (8006c04 <prvPortStartFirstTask+0x1c>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	b662      	cpsie	i
 8006bf4:	b661      	cpsie	f
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	df00      	svc	0
 8006c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c02:	bf00      	nop
 8006c04:	e000ed08 	.word	0xe000ed08

08006c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <xPortStartScheduler+0xd0>)
 8006c10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	22ff      	movs	r2, #255	; 0xff
 8006c1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	4b2a      	ldr	r3, [pc, #168]	; (8006cdc <xPortStartScheduler+0xd4>)
 8006c34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c36:	4b2a      	ldr	r3, [pc, #168]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c38:	2207      	movs	r2, #7
 8006c3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c3c:	e009      	b.n	8006c52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c3e:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	4a26      	ldr	r2, [pc, #152]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b80      	cmp	r3, #128	; 0x80
 8006c5c:	d0ef      	beq.n	8006c3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c5e:	4b20      	ldr	r3, [pc, #128]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f1c3 0307 	rsb	r3, r3, #7
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d00a      	beq.n	8006c80 <xPortStartScheduler+0x78>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c80:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c8a:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xPortStartScheduler+0xd8>)
 8006c94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <xPortStartScheduler+0xdc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <xPortStartScheduler+0xdc>)
 8006ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006caa:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <xPortStartScheduler+0xdc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a0d      	ldr	r2, [pc, #52]	; (8006ce4 <xPortStartScheduler+0xdc>)
 8006cb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cb6:	f000 f8b9 	bl	8006e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <xPortStartScheduler+0xe0>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cc0:	f7ff ff92 	bl	8006be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cc4:	f7ff f8c2 	bl	8005e4c <vTaskSwitchContext>
	prvTaskExitError();
 8006cc8:	f7ff ff4c 	bl	8006b64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	e000e400 	.word	0xe000e400
 8006cdc:	2000106c 	.word	0x2000106c
 8006ce0:	20001070 	.word	0x20001070
 8006ce4:	e000ed20 	.word	0xe000ed20
 8006ce8:	20000010 	.word	0x20000010

08006cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d06:	4b0f      	ldr	r3, [pc, #60]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	4a0d      	ldr	r2, [pc, #52]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d10:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <vPortEnterCritical+0x58>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10f      	bne.n	8006d38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <vPortEnterCritical+0x5c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	603b      	str	r3, [r7, #0]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <vPortEnterCritical+0x4a>
	}
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000010 	.word	0x20000010
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <vPortExitCritical+0x4c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <vPortExitCritical+0x24>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	607b      	str	r3, [r7, #4]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <vPortExitCritical+0x4c>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <vPortExitCritical+0x4c>)
 8006d78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <vPortExitCritical+0x4c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d105      	bne.n	8006d8e <vPortExitCritical+0x42>
 8006d82:	2300      	movs	r3, #0
 8006d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f383 8811 	msr	BASEPRI, r3
}
 8006d8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr
 8006d98:	20000010 	.word	0x20000010
 8006d9c:	00000000 	.word	0x00000000

08006da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006da0:	f3ef 8009 	mrs	r0, PSP
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <pxCurrentTCBConst>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006db0:	6010      	str	r0, [r2, #0]
 8006db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006db6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006dba:	f380 8811 	msr	BASEPRI, r0
 8006dbe:	f7ff f845 	bl	8005e4c <vTaskSwitchContext>
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8811 	msr	BASEPRI, r0
 8006dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	6808      	ldr	r0, [r1, #0]
 8006dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006dd6:	f380 8809 	msr	PSP, r0
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	4770      	bx	lr

08006de0 <pxCurrentTCBConst>:
 8006de0:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop

08006de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	607b      	str	r3, [r7, #4]
}
 8006e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e02:	f7fe ff65 	bl	8005cd0 <xTaskIncrementTick>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <SysTick_Handler+0x40>)
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f383 8811 	msr	BASEPRI, r3
}
 8006e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	e000ed04 	.word	0xe000ed04

08006e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <vPortSetupTimerInterrupt+0x30>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <vPortSetupTimerInterrupt+0x34>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <vPortSetupTimerInterrupt+0x38>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <vPortSetupTimerInterrupt+0x3c>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	099b      	lsrs	r3, r3, #6
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <vPortSetupTimerInterrupt+0x40>)
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e4e:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <vPortSetupTimerInterrupt+0x30>)
 8006e50:	2207      	movs	r2, #7
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	e000e010 	.word	0xe000e010
 8006e60:	e000e018 	.word	0xe000e018
 8006e64:	20000004 	.word	0x20000004
 8006e68:	10624dd3 	.word	0x10624dd3
 8006e6c:	e000e014 	.word	0xe000e014

08006e70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e76:	f3ef 8305 	mrs	r3, IPSR
 8006e7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b0f      	cmp	r3, #15
 8006e80:	d914      	bls.n	8006eac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <vPortValidateInterruptPriority+0x6c>)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e8c:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <vPortValidateInterruptPriority+0x70>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	7afa      	ldrb	r2, [r7, #11]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d20a      	bcs.n	8006eac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	607b      	str	r3, [r7, #4]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006eac:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <vPortValidateInterruptPriority+0x74>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <vPortValidateInterruptPriority+0x78>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d90a      	bls.n	8006ed2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	603b      	str	r3, [r7, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <vPortValidateInterruptPriority+0x60>
	}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	e000e3f0 	.word	0xe000e3f0
 8006ee0:	2000106c 	.word	0x2000106c
 8006ee4:	e000ed0c 	.word	0xe000ed0c
 8006ee8:	20001070 	.word	0x20001070

08006eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08a      	sub	sp, #40	; 0x28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ef8:	f7fe fe30 	bl	8005b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006efc:	4b58      	ldr	r3, [pc, #352]	; (8007060 <pvPortMalloc+0x174>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f04:	f000 f910 	bl	8007128 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f08:	4b56      	ldr	r3, [pc, #344]	; (8007064 <pvPortMalloc+0x178>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 808e 	bne.w	8007032 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01d      	beq.n	8006f58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f023 0307 	bic.w	r3, r3, #7
 8006f34:	3308      	adds	r3, #8
 8006f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <pvPortMalloc+0x6c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	617b      	str	r3, [r7, #20]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d069      	beq.n	8007032 <pvPortMalloc+0x146>
 8006f5e:	4b42      	ldr	r3, [pc, #264]	; (8007068 <pvPortMalloc+0x17c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d864      	bhi.n	8007032 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f68:	4b40      	ldr	r3, [pc, #256]	; (800706c <pvPortMalloc+0x180>)
 8006f6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f6c:	4b3f      	ldr	r3, [pc, #252]	; (800706c <pvPortMalloc+0x180>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f72:	e004      	b.n	8006f7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d903      	bls.n	8006f90 <pvPortMalloc+0xa4>
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f1      	bne.n	8006f74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f90:	4b33      	ldr	r3, [pc, #204]	; (8007060 <pvPortMalloc+0x174>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d04b      	beq.n	8007032 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	4413      	add	r3, r2
 8006fa2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d91f      	bls.n	8006ffc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <pvPortMalloc+0xf8>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	613b      	str	r3, [r7, #16]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ff6:	69b8      	ldr	r0, [r7, #24]
 8006ff8:	f000 f8f8 	bl	80071ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <pvPortMalloc+0x17c>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <pvPortMalloc+0x17c>)
 8007008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <pvPortMalloc+0x17c>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b18      	ldr	r3, [pc, #96]	; (8007070 <pvPortMalloc+0x184>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d203      	bcs.n	800701e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <pvPortMalloc+0x17c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a15      	ldr	r2, [pc, #84]	; (8007070 <pvPortMalloc+0x184>)
 800701c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	4b10      	ldr	r3, [pc, #64]	; (8007064 <pvPortMalloc+0x178>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	431a      	orrs	r2, r3
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007032:	f7fe fda1 	bl	8005b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <pvPortMalloc+0x16a>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <pvPortMalloc+0x168>
	return pvReturn;
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20001c7c 	.word	0x20001c7c
 8007064:	20001c88 	.word	0x20001c88
 8007068:	20001c80 	.word	0x20001c80
 800706c:	20001c74 	.word	0x20001c74
 8007070:	20001c84 	.word	0x20001c84

08007074 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d048      	beq.n	8007118 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007086:	2308      	movs	r3, #8
 8007088:	425b      	negs	r3, r3
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4413      	add	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	4b21      	ldr	r3, [pc, #132]	; (8007120 <vPortFree+0xac>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <vPortFree+0x44>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <vPortFree+0x62>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60bb      	str	r3, [r7, #8]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	4b11      	ldr	r3, [pc, #68]	; (8007120 <vPortFree+0xac>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d019      	beq.n	8007118 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d115      	bne.n	8007118 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vPortFree+0xac>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	43db      	mvns	r3, r3
 80070f6:	401a      	ands	r2, r3
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070fc:	f7fe fd2e 	bl	8005b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <vPortFree+0xb0>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4413      	add	r3, r2
 800710a:	4a06      	ldr	r2, [pc, #24]	; (8007124 <vPortFree+0xb0>)
 800710c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f000 f86c 	bl	80071ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007114:	f7fe fd30 	bl	8005b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007118:	bf00      	nop
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20001c88 	.word	0x20001c88
 8007124:	20001c80 	.word	0x20001c80

08007128 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800712e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007132:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007134:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <prvHeapInit+0xac>)
 8007136:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3307      	adds	r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0307 	bic.w	r3, r3, #7
 800714e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <prvHeapInit+0xac>)
 8007158:	4413      	add	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <prvHeapInit+0xb0>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007166:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <prvHeapInit+0xb0>)
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	4413      	add	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007174:	2208      	movs	r2, #8
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4a15      	ldr	r2, [pc, #84]	; (80071dc <prvHeapInit+0xb4>)
 8007188:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <prvHeapInit+0xb4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <prvHeapInit+0xb4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	1ad2      	subs	r2, r2, r3
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <prvHeapInit+0xb4>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <prvHeapInit+0xb8>)
 80071b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <prvHeapInit+0xbc>)
 80071be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <prvHeapInit+0xc0>)
 80071c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071c6:	601a      	str	r2, [r3, #0]
}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20001074 	.word	0x20001074
 80071d8:	20001c74 	.word	0x20001c74
 80071dc:	20001c7c 	.word	0x20001c7c
 80071e0:	20001c84 	.word	0x20001c84
 80071e4:	20001c80 	.word	0x20001c80
 80071e8:	20001c88 	.word	0x20001c88

080071ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <prvInsertBlockIntoFreeList+0xa8>)
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e002      	b.n	8007200 <prvInsertBlockIntoFreeList+0x14>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	d8f7      	bhi.n	80071fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	4413      	add	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	429a      	cmp	r2, r3
 800721a:	d108      	bne.n	800722e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d118      	bne.n	8007274 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <prvInsertBlockIntoFreeList+0xac>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d00d      	beq.n	800726a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e008      	b.n	800727c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <prvInsertBlockIntoFreeList+0xac>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e003      	b.n	800727c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	d002      	beq.n	800728a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr
 8007294:	20001c74 	.word	0x20001c74
 8007298:	20001c7c 	.word	0x20001c7c

0800729c <__errno>:
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <__errno+0x8>)
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000014 	.word	0x20000014

080072a8 <__libc_init_array>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	2600      	movs	r6, #0
 80072ac:	4d0c      	ldr	r5, [pc, #48]	; (80072e0 <__libc_init_array+0x38>)
 80072ae:	4c0d      	ldr	r4, [pc, #52]	; (80072e4 <__libc_init_array+0x3c>)
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	42a6      	cmp	r6, r4
 80072b6:	d109      	bne.n	80072cc <__libc_init_array+0x24>
 80072b8:	f004 fc52 	bl	800bb60 <_init>
 80072bc:	2600      	movs	r6, #0
 80072be:	4d0a      	ldr	r5, [pc, #40]	; (80072e8 <__libc_init_array+0x40>)
 80072c0:	4c0a      	ldr	r4, [pc, #40]	; (80072ec <__libc_init_array+0x44>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	42a6      	cmp	r6, r4
 80072c8:	d105      	bne.n	80072d6 <__libc_init_array+0x2e>
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d0:	4798      	blx	r3
 80072d2:	3601      	adds	r6, #1
 80072d4:	e7ee      	b.n	80072b4 <__libc_init_array+0xc>
 80072d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072da:	4798      	blx	r3
 80072dc:	3601      	adds	r6, #1
 80072de:	e7f2      	b.n	80072c6 <__libc_init_array+0x1e>
 80072e0:	0800c14c 	.word	0x0800c14c
 80072e4:	0800c14c 	.word	0x0800c14c
 80072e8:	0800c14c 	.word	0x0800c14c
 80072ec:	0800c150 	.word	0x0800c150

080072f0 <memcpy>:
 80072f0:	440a      	add	r2, r1
 80072f2:	4291      	cmp	r1, r2
 80072f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f8:	d100      	bne.n	80072fc <memcpy+0xc>
 80072fa:	4770      	bx	lr
 80072fc:	b510      	push	{r4, lr}
 80072fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007302:	4291      	cmp	r1, r2
 8007304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007308:	d1f9      	bne.n	80072fe <memcpy+0xe>
 800730a:	bd10      	pop	{r4, pc}

0800730c <memset>:
 800730c:	4603      	mov	r3, r0
 800730e:	4402      	add	r2, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <__cvt>:
 800731c:	2b00      	cmp	r3, #0
 800731e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007322:	461f      	mov	r7, r3
 8007324:	bfbb      	ittet	lt
 8007326:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800732a:	461f      	movlt	r7, r3
 800732c:	2300      	movge	r3, #0
 800732e:	232d      	movlt	r3, #45	; 0x2d
 8007330:	b088      	sub	sp, #32
 8007332:	4614      	mov	r4, r2
 8007334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007336:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007338:	7013      	strb	r3, [r2, #0]
 800733a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800733c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007340:	f023 0820 	bic.w	r8, r3, #32
 8007344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007348:	d005      	beq.n	8007356 <__cvt+0x3a>
 800734a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800734e:	d100      	bne.n	8007352 <__cvt+0x36>
 8007350:	3501      	adds	r5, #1
 8007352:	2302      	movs	r3, #2
 8007354:	e000      	b.n	8007358 <__cvt+0x3c>
 8007356:	2303      	movs	r3, #3
 8007358:	aa07      	add	r2, sp, #28
 800735a:	9204      	str	r2, [sp, #16]
 800735c:	aa06      	add	r2, sp, #24
 800735e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007362:	e9cd 3500 	strd	r3, r5, [sp]
 8007366:	4622      	mov	r2, r4
 8007368:	463b      	mov	r3, r7
 800736a:	f001 fd85 	bl	8008e78 <_dtoa_r>
 800736e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007372:	4606      	mov	r6, r0
 8007374:	d102      	bne.n	800737c <__cvt+0x60>
 8007376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007378:	07db      	lsls	r3, r3, #31
 800737a:	d522      	bpl.n	80073c2 <__cvt+0xa6>
 800737c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007380:	eb06 0905 	add.w	r9, r6, r5
 8007384:	d110      	bne.n	80073a8 <__cvt+0x8c>
 8007386:	7833      	ldrb	r3, [r6, #0]
 8007388:	2b30      	cmp	r3, #48	; 0x30
 800738a:	d10a      	bne.n	80073a2 <__cvt+0x86>
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	4620      	mov	r0, r4
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8007398:	b918      	cbnz	r0, 80073a2 <__cvt+0x86>
 800739a:	f1c5 0501 	rsb	r5, r5, #1
 800739e:	f8ca 5000 	str.w	r5, [sl]
 80073a2:	f8da 3000 	ldr.w	r3, [sl]
 80073a6:	4499      	add	r9, r3
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4620      	mov	r0, r4
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 80073b4:	b108      	cbz	r0, 80073ba <__cvt+0x9e>
 80073b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80073ba:	2230      	movs	r2, #48	; 0x30
 80073bc:	9b07      	ldr	r3, [sp, #28]
 80073be:	454b      	cmp	r3, r9
 80073c0:	d307      	bcc.n	80073d2 <__cvt+0xb6>
 80073c2:	4630      	mov	r0, r6
 80073c4:	9b07      	ldr	r3, [sp, #28]
 80073c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073c8:	1b9b      	subs	r3, r3, r6
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	b008      	add	sp, #32
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	1c59      	adds	r1, r3, #1
 80073d4:	9107      	str	r1, [sp, #28]
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	e7f0      	b.n	80073bc <__cvt+0xa0>

080073da <__exponent>:
 80073da:	4603      	mov	r3, r0
 80073dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073de:	2900      	cmp	r1, #0
 80073e0:	f803 2b02 	strb.w	r2, [r3], #2
 80073e4:	bfb6      	itet	lt
 80073e6:	222d      	movlt	r2, #45	; 0x2d
 80073e8:	222b      	movge	r2, #43	; 0x2b
 80073ea:	4249      	neglt	r1, r1
 80073ec:	2909      	cmp	r1, #9
 80073ee:	7042      	strb	r2, [r0, #1]
 80073f0:	dd2b      	ble.n	800744a <__exponent+0x70>
 80073f2:	f10d 0407 	add.w	r4, sp, #7
 80073f6:	46a4      	mov	ip, r4
 80073f8:	270a      	movs	r7, #10
 80073fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80073fe:	460a      	mov	r2, r1
 8007400:	46a6      	mov	lr, r4
 8007402:	fb07 1516 	mls	r5, r7, r6, r1
 8007406:	2a63      	cmp	r2, #99	; 0x63
 8007408:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800740c:	4631      	mov	r1, r6
 800740e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007412:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007416:	dcf0      	bgt.n	80073fa <__exponent+0x20>
 8007418:	3130      	adds	r1, #48	; 0x30
 800741a:	f1ae 0502 	sub.w	r5, lr, #2
 800741e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007422:	4629      	mov	r1, r5
 8007424:	1c44      	adds	r4, r0, #1
 8007426:	4561      	cmp	r1, ip
 8007428:	d30a      	bcc.n	8007440 <__exponent+0x66>
 800742a:	f10d 0209 	add.w	r2, sp, #9
 800742e:	eba2 020e 	sub.w	r2, r2, lr
 8007432:	4565      	cmp	r5, ip
 8007434:	bf88      	it	hi
 8007436:	2200      	movhi	r2, #0
 8007438:	4413      	add	r3, r2
 800743a:	1a18      	subs	r0, r3, r0
 800743c:	b003      	add	sp, #12
 800743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007440:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007444:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007448:	e7ed      	b.n	8007426 <__exponent+0x4c>
 800744a:	2330      	movs	r3, #48	; 0x30
 800744c:	3130      	adds	r1, #48	; 0x30
 800744e:	7083      	strb	r3, [r0, #2]
 8007450:	70c1      	strb	r1, [r0, #3]
 8007452:	1d03      	adds	r3, r0, #4
 8007454:	e7f1      	b.n	800743a <__exponent+0x60>
	...

08007458 <_printf_float>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	b091      	sub	sp, #68	; 0x44
 800745e:	460c      	mov	r4, r1
 8007460:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007464:	4616      	mov	r6, r2
 8007466:	461f      	mov	r7, r3
 8007468:	4605      	mov	r5, r0
 800746a:	f002 fe59 	bl	800a120 <_localeconv_r>
 800746e:	6803      	ldr	r3, [r0, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	f7f8 fe6c 	bl	8000150 <strlen>
 8007478:	2300      	movs	r3, #0
 800747a:	930e      	str	r3, [sp, #56]	; 0x38
 800747c:	f8d8 3000 	ldr.w	r3, [r8]
 8007480:	900a      	str	r0, [sp, #40]	; 0x28
 8007482:	3307      	adds	r3, #7
 8007484:	f023 0307 	bic.w	r3, r3, #7
 8007488:	f103 0208 	add.w	r2, r3, #8
 800748c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007490:	f8d4 b000 	ldr.w	fp, [r4]
 8007494:	f8c8 2000 	str.w	r2, [r8]
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074a0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074a4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	4640      	mov	r0, r8
 80074b0:	4b9c      	ldr	r3, [pc, #624]	; (8007724 <_printf_float+0x2cc>)
 80074b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074b4:	f7f9 faaa 	bl	8000a0c <__aeabi_dcmpun>
 80074b8:	bb70      	cbnz	r0, 8007518 <_printf_float+0xc0>
 80074ba:	f04f 32ff 	mov.w	r2, #4294967295
 80074be:	4640      	mov	r0, r8
 80074c0:	4b98      	ldr	r3, [pc, #608]	; (8007724 <_printf_float+0x2cc>)
 80074c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074c4:	f7f9 fa84 	bl	80009d0 <__aeabi_dcmple>
 80074c8:	bb30      	cbnz	r0, 8007518 <_printf_float+0xc0>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4640      	mov	r0, r8
 80074d0:	4651      	mov	r1, sl
 80074d2:	f7f9 fa73 	bl	80009bc <__aeabi_dcmplt>
 80074d6:	b110      	cbz	r0, 80074de <_printf_float+0x86>
 80074d8:	232d      	movs	r3, #45	; 0x2d
 80074da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074de:	4b92      	ldr	r3, [pc, #584]	; (8007728 <_printf_float+0x2d0>)
 80074e0:	4892      	ldr	r0, [pc, #584]	; (800772c <_printf_float+0x2d4>)
 80074e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074e6:	bf94      	ite	ls
 80074e8:	4698      	movls	r8, r3
 80074ea:	4680      	movhi	r8, r0
 80074ec:	2303      	movs	r3, #3
 80074ee:	f04f 0a00 	mov.w	sl, #0
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	f02b 0304 	bic.w	r3, fp, #4
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	4633      	mov	r3, r6
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	9700      	str	r7, [sp, #0]
 8007502:	aa0f      	add	r2, sp, #60	; 0x3c
 8007504:	f000 f9d4 	bl	80078b0 <_printf_common>
 8007508:	3001      	adds	r0, #1
 800750a:	f040 8090 	bne.w	800762e <_printf_float+0x1d6>
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	b011      	add	sp, #68	; 0x44
 8007514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007518:	4642      	mov	r2, r8
 800751a:	4653      	mov	r3, sl
 800751c:	4640      	mov	r0, r8
 800751e:	4651      	mov	r1, sl
 8007520:	f7f9 fa74 	bl	8000a0c <__aeabi_dcmpun>
 8007524:	b148      	cbz	r0, 800753a <_printf_float+0xe2>
 8007526:	f1ba 0f00 	cmp.w	sl, #0
 800752a:	bfb8      	it	lt
 800752c:	232d      	movlt	r3, #45	; 0x2d
 800752e:	4880      	ldr	r0, [pc, #512]	; (8007730 <_printf_float+0x2d8>)
 8007530:	bfb8      	it	lt
 8007532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007536:	4b7f      	ldr	r3, [pc, #508]	; (8007734 <_printf_float+0x2dc>)
 8007538:	e7d3      	b.n	80074e2 <_printf_float+0x8a>
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	d142      	bne.n	80075ca <_printf_float+0x172>
 8007544:	2306      	movs	r3, #6
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	9206      	str	r2, [sp, #24]
 800754c:	aa0e      	add	r2, sp, #56	; 0x38
 800754e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007552:	aa0d      	add	r2, sp, #52	; 0x34
 8007554:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007558:	9203      	str	r2, [sp, #12]
 800755a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800755e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	4642      	mov	r2, r8
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	4628      	mov	r0, r5
 800756c:	4653      	mov	r3, sl
 800756e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007570:	f7ff fed4 	bl	800731c <__cvt>
 8007574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007576:	4680      	mov	r8, r0
 8007578:	2947      	cmp	r1, #71	; 0x47
 800757a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800757c:	d108      	bne.n	8007590 <_printf_float+0x138>
 800757e:	1cc8      	adds	r0, r1, #3
 8007580:	db02      	blt.n	8007588 <_printf_float+0x130>
 8007582:	6863      	ldr	r3, [r4, #4]
 8007584:	4299      	cmp	r1, r3
 8007586:	dd40      	ble.n	800760a <_printf_float+0x1b2>
 8007588:	f1a9 0902 	sub.w	r9, r9, #2
 800758c:	fa5f f989 	uxtb.w	r9, r9
 8007590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007594:	d81f      	bhi.n	80075d6 <_printf_float+0x17e>
 8007596:	464a      	mov	r2, r9
 8007598:	3901      	subs	r1, #1
 800759a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800759e:	910d      	str	r1, [sp, #52]	; 0x34
 80075a0:	f7ff ff1b 	bl	80073da <__exponent>
 80075a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075a6:	4682      	mov	sl, r0
 80075a8:	1813      	adds	r3, r2, r0
 80075aa:	2a01      	cmp	r2, #1
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	dc02      	bgt.n	80075b6 <_printf_float+0x15e>
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	07d2      	lsls	r2, r2, #31
 80075b4:	d501      	bpl.n	80075ba <_printf_float+0x162>
 80075b6:	3301      	adds	r3, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d09b      	beq.n	80074fa <_printf_float+0xa2>
 80075c2:	232d      	movs	r3, #45	; 0x2d
 80075c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c8:	e797      	b.n	80074fa <_printf_float+0xa2>
 80075ca:	2947      	cmp	r1, #71	; 0x47
 80075cc:	d1bc      	bne.n	8007548 <_printf_float+0xf0>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1ba      	bne.n	8007548 <_printf_float+0xf0>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7b7      	b.n	8007546 <_printf_float+0xee>
 80075d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075da:	d118      	bne.n	800760e <_printf_float+0x1b6>
 80075dc:	2900      	cmp	r1, #0
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	dd0b      	ble.n	80075fa <_printf_float+0x1a2>
 80075e2:	6121      	str	r1, [r4, #16]
 80075e4:	b913      	cbnz	r3, 80075ec <_printf_float+0x194>
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d502      	bpl.n	80075f2 <_printf_float+0x19a>
 80075ec:	3301      	adds	r3, #1
 80075ee:	440b      	add	r3, r1
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	f04f 0a00 	mov.w	sl, #0
 80075f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075f8:	e7df      	b.n	80075ba <_printf_float+0x162>
 80075fa:	b913      	cbnz	r3, 8007602 <_printf_float+0x1aa>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	07d2      	lsls	r2, r2, #31
 8007600:	d501      	bpl.n	8007606 <_printf_float+0x1ae>
 8007602:	3302      	adds	r3, #2
 8007604:	e7f4      	b.n	80075f0 <_printf_float+0x198>
 8007606:	2301      	movs	r3, #1
 8007608:	e7f2      	b.n	80075f0 <_printf_float+0x198>
 800760a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007610:	4299      	cmp	r1, r3
 8007612:	db05      	blt.n	8007620 <_printf_float+0x1c8>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	6121      	str	r1, [r4, #16]
 8007618:	07d8      	lsls	r0, r3, #31
 800761a:	d5ea      	bpl.n	80075f2 <_printf_float+0x19a>
 800761c:	1c4b      	adds	r3, r1, #1
 800761e:	e7e7      	b.n	80075f0 <_printf_float+0x198>
 8007620:	2900      	cmp	r1, #0
 8007622:	bfcc      	ite	gt
 8007624:	2201      	movgt	r2, #1
 8007626:	f1c1 0202 	rsble	r2, r1, #2
 800762a:	4413      	add	r3, r2
 800762c:	e7e0      	b.n	80075f0 <_printf_float+0x198>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	055a      	lsls	r2, r3, #21
 8007632:	d407      	bmi.n	8007644 <_printf_float+0x1ec>
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	4642      	mov	r2, r8
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	d12b      	bne.n	800769a <_printf_float+0x242>
 8007642:	e764      	b.n	800750e <_printf_float+0xb6>
 8007644:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007648:	f240 80dd 	bls.w	8007806 <_printf_float+0x3ae>
 800764c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007650:	2200      	movs	r2, #0
 8007652:	2300      	movs	r3, #0
 8007654:	f7f9 f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8007658:	2800      	cmp	r0, #0
 800765a:	d033      	beq.n	80076c4 <_printf_float+0x26c>
 800765c:	2301      	movs	r3, #1
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	4a35      	ldr	r2, [pc, #212]	; (8007738 <_printf_float+0x2e0>)
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f af51 	beq.w	800750e <_printf_float+0xb6>
 800766c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007670:	429a      	cmp	r2, r3
 8007672:	db02      	blt.n	800767a <_printf_float+0x222>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	07d8      	lsls	r0, r3, #31
 8007678:	d50f      	bpl.n	800769a <_printf_float+0x242>
 800767a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f af42 	beq.w	800750e <_printf_float+0xb6>
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	f104 091a 	add.w	r9, r4, #26
 8007692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007694:	3b01      	subs	r3, #1
 8007696:	4543      	cmp	r3, r8
 8007698:	dc09      	bgt.n	80076ae <_printf_float+0x256>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	079b      	lsls	r3, r3, #30
 800769e:	f100 8102 	bmi.w	80078a6 <_printf_float+0x44e>
 80076a2:	68e0      	ldr	r0, [r4, #12]
 80076a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076a6:	4298      	cmp	r0, r3
 80076a8:	bfb8      	it	lt
 80076aa:	4618      	movlt	r0, r3
 80076ac:	e731      	b.n	8007512 <_printf_float+0xba>
 80076ae:	2301      	movs	r3, #1
 80076b0:	464a      	mov	r2, r9
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	f43f af28 	beq.w	800750e <_printf_float+0xb6>
 80076be:	f108 0801 	add.w	r8, r8, #1
 80076c2:	e7e6      	b.n	8007692 <_printf_float+0x23a>
 80076c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dc38      	bgt.n	800773c <_printf_float+0x2e4>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	4a19      	ldr	r2, [pc, #100]	; (8007738 <_printf_float+0x2e0>)
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f af1a 	beq.w	800750e <_printf_float+0xb6>
 80076da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076de:	4313      	orrs	r3, r2
 80076e0:	d102      	bne.n	80076e8 <_printf_float+0x290>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	07d9      	lsls	r1, r3, #31
 80076e6:	d5d8      	bpl.n	800769a <_printf_float+0x242>
 80076e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f af0b 	beq.w	800750e <_printf_float+0xb6>
 80076f8:	f04f 0900 	mov.w	r9, #0
 80076fc:	f104 0a1a 	add.w	sl, r4, #26
 8007700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007702:	425b      	negs	r3, r3
 8007704:	454b      	cmp	r3, r9
 8007706:	dc01      	bgt.n	800770c <_printf_float+0x2b4>
 8007708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800770a:	e794      	b.n	8007636 <_printf_float+0x1de>
 800770c:	2301      	movs	r3, #1
 800770e:	4652      	mov	r2, sl
 8007710:	4631      	mov	r1, r6
 8007712:	4628      	mov	r0, r5
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	f43f aef9 	beq.w	800750e <_printf_float+0xb6>
 800771c:	f109 0901 	add.w	r9, r9, #1
 8007720:	e7ee      	b.n	8007700 <_printf_float+0x2a8>
 8007722:	bf00      	nop
 8007724:	7fefffff 	.word	0x7fefffff
 8007728:	0800bca8 	.word	0x0800bca8
 800772c:	0800bcac 	.word	0x0800bcac
 8007730:	0800bcb4 	.word	0x0800bcb4
 8007734:	0800bcb0 	.word	0x0800bcb0
 8007738:	0800bcb8 	.word	0x0800bcb8
 800773c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800773e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007740:	429a      	cmp	r2, r3
 8007742:	bfa8      	it	ge
 8007744:	461a      	movge	r2, r3
 8007746:	2a00      	cmp	r2, #0
 8007748:	4691      	mov	r9, r2
 800774a:	dc37      	bgt.n	80077bc <_printf_float+0x364>
 800774c:	f04f 0b00 	mov.w	fp, #0
 8007750:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007754:	f104 021a 	add.w	r2, r4, #26
 8007758:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800775c:	ebaa 0309 	sub.w	r3, sl, r9
 8007760:	455b      	cmp	r3, fp
 8007762:	dc33      	bgt.n	80077cc <_printf_float+0x374>
 8007764:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007768:	429a      	cmp	r2, r3
 800776a:	db3b      	blt.n	80077e4 <_printf_float+0x38c>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07da      	lsls	r2, r3, #31
 8007770:	d438      	bmi.n	80077e4 <_printf_float+0x38c>
 8007772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007774:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007776:	eba3 020a 	sub.w	r2, r3, sl
 800777a:	eba3 0901 	sub.w	r9, r3, r1
 800777e:	4591      	cmp	r9, r2
 8007780:	bfa8      	it	ge
 8007782:	4691      	movge	r9, r2
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	dc34      	bgt.n	80077f4 <_printf_float+0x39c>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007792:	f104 0a1a 	add.w	sl, r4, #26
 8007796:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	eba3 0309 	sub.w	r3, r3, r9
 80077a0:	4543      	cmp	r3, r8
 80077a2:	f77f af7a 	ble.w	800769a <_printf_float+0x242>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4652      	mov	r2, sl
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f aeac 	beq.w	800750e <_printf_float+0xb6>
 80077b6:	f108 0801 	add.w	r8, r8, #1
 80077ba:	e7ec      	b.n	8007796 <_printf_float+0x33e>
 80077bc:	4613      	mov	r3, r2
 80077be:	4631      	mov	r1, r6
 80077c0:	4642      	mov	r2, r8
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	d1c0      	bne.n	800774c <_printf_float+0x2f4>
 80077ca:	e6a0      	b.n	800750e <_printf_float+0xb6>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f ae99 	beq.w	800750e <_printf_float+0xb6>
 80077dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077de:	f10b 0b01 	add.w	fp, fp, #1
 80077e2:	e7b9      	b.n	8007758 <_printf_float+0x300>
 80077e4:	4631      	mov	r1, r6
 80077e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	d1bf      	bne.n	8007772 <_printf_float+0x31a>
 80077f2:	e68c      	b.n	800750e <_printf_float+0xb6>
 80077f4:	464b      	mov	r3, r9
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	eb08 020a 	add.w	r2, r8, sl
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	d1c2      	bne.n	800778a <_printf_float+0x332>
 8007804:	e683      	b.n	800750e <_printf_float+0xb6>
 8007806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007808:	2a01      	cmp	r2, #1
 800780a:	dc01      	bgt.n	8007810 <_printf_float+0x3b8>
 800780c:	07db      	lsls	r3, r3, #31
 800780e:	d537      	bpl.n	8007880 <_printf_float+0x428>
 8007810:	2301      	movs	r3, #1
 8007812:	4642      	mov	r2, r8
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f ae77 	beq.w	800750e <_printf_float+0xb6>
 8007820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f ae6f 	beq.w	800750e <_printf_float+0xb6>
 8007830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	f7f9 f8b6 	bl	80009a8 <__aeabi_dcmpeq>
 800783c:	b9d8      	cbnz	r0, 8007876 <_printf_float+0x41e>
 800783e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007840:	f108 0201 	add.w	r2, r8, #1
 8007844:	3b01      	subs	r3, #1
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	d10e      	bne.n	800786e <_printf_float+0x416>
 8007850:	e65d      	b.n	800750e <_printf_float+0xb6>
 8007852:	2301      	movs	r3, #1
 8007854:	464a      	mov	r2, r9
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f ae56 	beq.w	800750e <_printf_float+0xb6>
 8007862:	f108 0801 	add.w	r8, r8, #1
 8007866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007868:	3b01      	subs	r3, #1
 800786a:	4543      	cmp	r3, r8
 800786c:	dcf1      	bgt.n	8007852 <_printf_float+0x3fa>
 800786e:	4653      	mov	r3, sl
 8007870:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007874:	e6e0      	b.n	8007638 <_printf_float+0x1e0>
 8007876:	f04f 0800 	mov.w	r8, #0
 800787a:	f104 091a 	add.w	r9, r4, #26
 800787e:	e7f2      	b.n	8007866 <_printf_float+0x40e>
 8007880:	2301      	movs	r3, #1
 8007882:	4642      	mov	r2, r8
 8007884:	e7df      	b.n	8007846 <_printf_float+0x3ee>
 8007886:	2301      	movs	r3, #1
 8007888:	464a      	mov	r2, r9
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	f43f ae3c 	beq.w	800750e <_printf_float+0xb6>
 8007896:	f108 0801 	add.w	r8, r8, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	4543      	cmp	r3, r8
 80078a2:	dcf0      	bgt.n	8007886 <_printf_float+0x42e>
 80078a4:	e6fd      	b.n	80076a2 <_printf_float+0x24a>
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	f104 0919 	add.w	r9, r4, #25
 80078ae:	e7f4      	b.n	800789a <_printf_float+0x442>

080078b0 <_printf_common>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	4616      	mov	r6, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	688a      	ldr	r2, [r1, #8]
 80078ba:	690b      	ldr	r3, [r1, #16]
 80078bc:	4607      	mov	r7, r0
 80078be:	4293      	cmp	r3, r2
 80078c0:	bfb8      	it	lt
 80078c2:	4613      	movlt	r3, r2
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078ca:	460c      	mov	r4, r1
 80078cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d0:	b10a      	cbz	r2, 80078d6 <_printf_common+0x26>
 80078d2:	3301      	adds	r3, #1
 80078d4:	6033      	str	r3, [r6, #0]
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	0699      	lsls	r1, r3, #26
 80078da:	bf42      	ittt	mi
 80078dc:	6833      	ldrmi	r3, [r6, #0]
 80078de:	3302      	addmi	r3, #2
 80078e0:	6033      	strmi	r3, [r6, #0]
 80078e2:	6825      	ldr	r5, [r4, #0]
 80078e4:	f015 0506 	ands.w	r5, r5, #6
 80078e8:	d106      	bne.n	80078f8 <_printf_common+0x48>
 80078ea:	f104 0a19 	add.w	sl, r4, #25
 80078ee:	68e3      	ldr	r3, [r4, #12]
 80078f0:	6832      	ldr	r2, [r6, #0]
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dc28      	bgt.n	800794a <_printf_common+0x9a>
 80078f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078fc:	1e13      	subs	r3, r2, #0
 80078fe:	6822      	ldr	r2, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	2301      	movne	r3, #1
 8007904:	0692      	lsls	r2, r2, #26
 8007906:	d42d      	bmi.n	8007964 <_printf_common+0xb4>
 8007908:	4649      	mov	r1, r9
 800790a:	4638      	mov	r0, r7
 800790c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007910:	47c0      	blx	r8
 8007912:	3001      	adds	r0, #1
 8007914:	d020      	beq.n	8007958 <_printf_common+0xa8>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	68e5      	ldr	r5, [r4, #12]
 800791a:	f003 0306 	and.w	r3, r3, #6
 800791e:	2b04      	cmp	r3, #4
 8007920:	bf18      	it	ne
 8007922:	2500      	movne	r5, #0
 8007924:	6832      	ldr	r2, [r6, #0]
 8007926:	f04f 0600 	mov.w	r6, #0
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	bf08      	it	eq
 800792e:	1aad      	subeq	r5, r5, r2
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	bf08      	it	eq
 8007934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007938:	4293      	cmp	r3, r2
 800793a:	bfc4      	itt	gt
 800793c:	1a9b      	subgt	r3, r3, r2
 800793e:	18ed      	addgt	r5, r5, r3
 8007940:	341a      	adds	r4, #26
 8007942:	42b5      	cmp	r5, r6
 8007944:	d11a      	bne.n	800797c <_printf_common+0xcc>
 8007946:	2000      	movs	r0, #0
 8007948:	e008      	b.n	800795c <_printf_common+0xac>
 800794a:	2301      	movs	r3, #1
 800794c:	4652      	mov	r2, sl
 800794e:	4649      	mov	r1, r9
 8007950:	4638      	mov	r0, r7
 8007952:	47c0      	blx	r8
 8007954:	3001      	adds	r0, #1
 8007956:	d103      	bne.n	8007960 <_printf_common+0xb0>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	3501      	adds	r5, #1
 8007962:	e7c4      	b.n	80078ee <_printf_common+0x3e>
 8007964:	2030      	movs	r0, #48	; 0x30
 8007966:	18e1      	adds	r1, r4, r3
 8007968:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007972:	4422      	add	r2, r4
 8007974:	3302      	adds	r3, #2
 8007976:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800797a:	e7c5      	b.n	8007908 <_printf_common+0x58>
 800797c:	2301      	movs	r3, #1
 800797e:	4622      	mov	r2, r4
 8007980:	4649      	mov	r1, r9
 8007982:	4638      	mov	r0, r7
 8007984:	47c0      	blx	r8
 8007986:	3001      	adds	r0, #1
 8007988:	d0e6      	beq.n	8007958 <_printf_common+0xa8>
 800798a:	3601      	adds	r6, #1
 800798c:	e7d9      	b.n	8007942 <_printf_common+0x92>
	...

08007990 <_printf_i>:
 8007990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	7e0f      	ldrb	r7, [r1, #24]
 8007996:	4691      	mov	r9, r2
 8007998:	2f78      	cmp	r7, #120	; 0x78
 800799a:	4680      	mov	r8, r0
 800799c:	460c      	mov	r4, r1
 800799e:	469a      	mov	sl, r3
 80079a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079a6:	d807      	bhi.n	80079b8 <_printf_i+0x28>
 80079a8:	2f62      	cmp	r7, #98	; 0x62
 80079aa:	d80a      	bhi.n	80079c2 <_printf_i+0x32>
 80079ac:	2f00      	cmp	r7, #0
 80079ae:	f000 80d9 	beq.w	8007b64 <_printf_i+0x1d4>
 80079b2:	2f58      	cmp	r7, #88	; 0x58
 80079b4:	f000 80a4 	beq.w	8007b00 <_printf_i+0x170>
 80079b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079c0:	e03a      	b.n	8007a38 <_printf_i+0xa8>
 80079c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079c6:	2b15      	cmp	r3, #21
 80079c8:	d8f6      	bhi.n	80079b8 <_printf_i+0x28>
 80079ca:	a101      	add	r1, pc, #4	; (adr r1, 80079d0 <_printf_i+0x40>)
 80079cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d0:	08007a29 	.word	0x08007a29
 80079d4:	08007a3d 	.word	0x08007a3d
 80079d8:	080079b9 	.word	0x080079b9
 80079dc:	080079b9 	.word	0x080079b9
 80079e0:	080079b9 	.word	0x080079b9
 80079e4:	080079b9 	.word	0x080079b9
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	080079b9 	.word	0x080079b9
 80079f0:	080079b9 	.word	0x080079b9
 80079f4:	080079b9 	.word	0x080079b9
 80079f8:	080079b9 	.word	0x080079b9
 80079fc:	08007b4b 	.word	0x08007b4b
 8007a00:	08007a6d 	.word	0x08007a6d
 8007a04:	08007b2d 	.word	0x08007b2d
 8007a08:	080079b9 	.word	0x080079b9
 8007a0c:	080079b9 	.word	0x080079b9
 8007a10:	08007b6d 	.word	0x08007b6d
 8007a14:	080079b9 	.word	0x080079b9
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	080079b9 	.word	0x080079b9
 8007a20:	080079b9 	.word	0x080079b9
 8007a24:	08007b35 	.word	0x08007b35
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	1d1a      	adds	r2, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	602a      	str	r2, [r5, #0]
 8007a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0a4      	b.n	8007b86 <_printf_i+0x1f6>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	6829      	ldr	r1, [r5, #0]
 8007a40:	0606      	lsls	r6, r0, #24
 8007a42:	f101 0304 	add.w	r3, r1, #4
 8007a46:	d50a      	bpl.n	8007a5e <_printf_i+0xce>
 8007a48:	680e      	ldr	r6, [r1, #0]
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	2e00      	cmp	r6, #0
 8007a4e:	da03      	bge.n	8007a58 <_printf_i+0xc8>
 8007a50:	232d      	movs	r3, #45	; 0x2d
 8007a52:	4276      	negs	r6, r6
 8007a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a58:	230a      	movs	r3, #10
 8007a5a:	485e      	ldr	r0, [pc, #376]	; (8007bd4 <_printf_i+0x244>)
 8007a5c:	e019      	b.n	8007a92 <_printf_i+0x102>
 8007a5e:	680e      	ldr	r6, [r1, #0]
 8007a60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	bf18      	it	ne
 8007a68:	b236      	sxthne	r6, r6
 8007a6a:	e7ef      	b.n	8007a4c <_printf_i+0xbc>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	6820      	ldr	r0, [r4, #0]
 8007a70:	1d19      	adds	r1, r3, #4
 8007a72:	6029      	str	r1, [r5, #0]
 8007a74:	0601      	lsls	r1, r0, #24
 8007a76:	d501      	bpl.n	8007a7c <_printf_i+0xec>
 8007a78:	681e      	ldr	r6, [r3, #0]
 8007a7a:	e002      	b.n	8007a82 <_printf_i+0xf2>
 8007a7c:	0646      	lsls	r6, r0, #25
 8007a7e:	d5fb      	bpl.n	8007a78 <_printf_i+0xe8>
 8007a80:	881e      	ldrh	r6, [r3, #0]
 8007a82:	2f6f      	cmp	r7, #111	; 0x6f
 8007a84:	bf0c      	ite	eq
 8007a86:	2308      	moveq	r3, #8
 8007a88:	230a      	movne	r3, #10
 8007a8a:	4852      	ldr	r0, [pc, #328]	; (8007bd4 <_printf_i+0x244>)
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a92:	6865      	ldr	r5, [r4, #4]
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	bfa8      	it	ge
 8007a98:	6821      	ldrge	r1, [r4, #0]
 8007a9a:	60a5      	str	r5, [r4, #8]
 8007a9c:	bfa4      	itt	ge
 8007a9e:	f021 0104 	bicge.w	r1, r1, #4
 8007aa2:	6021      	strge	r1, [r4, #0]
 8007aa4:	b90e      	cbnz	r6, 8007aaa <_printf_i+0x11a>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	d04d      	beq.n	8007b46 <_printf_i+0x1b6>
 8007aaa:	4615      	mov	r5, r2
 8007aac:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ab0:	fb03 6711 	mls	r7, r3, r1, r6
 8007ab4:	5dc7      	ldrb	r7, [r0, r7]
 8007ab6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007aba:	4637      	mov	r7, r6
 8007abc:	42bb      	cmp	r3, r7
 8007abe:	460e      	mov	r6, r1
 8007ac0:	d9f4      	bls.n	8007aac <_printf_i+0x11c>
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d10b      	bne.n	8007ade <_printf_i+0x14e>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	07de      	lsls	r6, r3, #31
 8007aca:	d508      	bpl.n	8007ade <_printf_i+0x14e>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	6861      	ldr	r1, [r4, #4]
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	bfde      	ittt	le
 8007ad4:	2330      	movle	r3, #48	; 0x30
 8007ad6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ada:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ade:	1b52      	subs	r2, r2, r5
 8007ae0:	6122      	str	r2, [r4, #16]
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f8cd a000 	str.w	sl, [sp]
 8007aec:	aa03      	add	r2, sp, #12
 8007aee:	f7ff fedf 	bl	80078b0 <_printf_common>
 8007af2:	3001      	adds	r0, #1
 8007af4:	d14c      	bne.n	8007b90 <_printf_i+0x200>
 8007af6:	f04f 30ff 	mov.w	r0, #4294967295
 8007afa:	b004      	add	sp, #16
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	4834      	ldr	r0, [pc, #208]	; (8007bd4 <_printf_i+0x244>)
 8007b02:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b06:	6829      	ldr	r1, [r5, #0]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b0e:	6029      	str	r1, [r5, #0]
 8007b10:	061d      	lsls	r5, r3, #24
 8007b12:	d514      	bpl.n	8007b3e <_printf_i+0x1ae>
 8007b14:	07df      	lsls	r7, r3, #31
 8007b16:	bf44      	itt	mi
 8007b18:	f043 0320 	orrmi.w	r3, r3, #32
 8007b1c:	6023      	strmi	r3, [r4, #0]
 8007b1e:	b91e      	cbnz	r6, 8007b28 <_printf_i+0x198>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	f023 0320 	bic.w	r3, r3, #32
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	2310      	movs	r3, #16
 8007b2a:	e7af      	b.n	8007a8c <_printf_i+0xfc>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f043 0320 	orr.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	2378      	movs	r3, #120	; 0x78
 8007b36:	4828      	ldr	r0, [pc, #160]	; (8007bd8 <_printf_i+0x248>)
 8007b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b3c:	e7e3      	b.n	8007b06 <_printf_i+0x176>
 8007b3e:	0659      	lsls	r1, r3, #25
 8007b40:	bf48      	it	mi
 8007b42:	b2b6      	uxthmi	r6, r6
 8007b44:	e7e6      	b.n	8007b14 <_printf_i+0x184>
 8007b46:	4615      	mov	r5, r2
 8007b48:	e7bb      	b.n	8007ac2 <_printf_i+0x132>
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	6826      	ldr	r6, [r4, #0]
 8007b4e:	1d18      	adds	r0, r3, #4
 8007b50:	6961      	ldr	r1, [r4, #20]
 8007b52:	6028      	str	r0, [r5, #0]
 8007b54:	0635      	lsls	r5, r6, #24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	d501      	bpl.n	8007b5e <_printf_i+0x1ce>
 8007b5a:	6019      	str	r1, [r3, #0]
 8007b5c:	e002      	b.n	8007b64 <_printf_i+0x1d4>
 8007b5e:	0670      	lsls	r0, r6, #25
 8007b60:	d5fb      	bpl.n	8007b5a <_printf_i+0x1ca>
 8007b62:	8019      	strh	r1, [r3, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	4615      	mov	r5, r2
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	e7ba      	b.n	8007ae2 <_printf_i+0x152>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	1d1a      	adds	r2, r3, #4
 8007b72:	602a      	str	r2, [r5, #0]
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f002 faef 	bl	800a15c <memchr>
 8007b7e:	b108      	cbz	r0, 8007b84 <_printf_i+0x1f4>
 8007b80:	1b40      	subs	r0, r0, r5
 8007b82:	6060      	str	r0, [r4, #4]
 8007b84:	6863      	ldr	r3, [r4, #4]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8e:	e7a8      	b.n	8007ae2 <_printf_i+0x152>
 8007b90:	462a      	mov	r2, r5
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	47d0      	blx	sl
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	d0ab      	beq.n	8007af6 <_printf_i+0x166>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	079b      	lsls	r3, r3, #30
 8007ba2:	d413      	bmi.n	8007bcc <_printf_i+0x23c>
 8007ba4:	68e0      	ldr	r0, [r4, #12]
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	4298      	cmp	r0, r3
 8007baa:	bfb8      	it	lt
 8007bac:	4618      	movlt	r0, r3
 8007bae:	e7a4      	b.n	8007afa <_printf_i+0x16a>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	47d0      	blx	sl
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d09b      	beq.n	8007af6 <_printf_i+0x166>
 8007bbe:	3501      	adds	r5, #1
 8007bc0:	68e3      	ldr	r3, [r4, #12]
 8007bc2:	9903      	ldr	r1, [sp, #12]
 8007bc4:	1a5b      	subs	r3, r3, r1
 8007bc6:	42ab      	cmp	r3, r5
 8007bc8:	dcf2      	bgt.n	8007bb0 <_printf_i+0x220>
 8007bca:	e7eb      	b.n	8007ba4 <_printf_i+0x214>
 8007bcc:	2500      	movs	r5, #0
 8007bce:	f104 0619 	add.w	r6, r4, #25
 8007bd2:	e7f5      	b.n	8007bc0 <_printf_i+0x230>
 8007bd4:	0800bcba 	.word	0x0800bcba
 8007bd8:	0800bccb 	.word	0x0800bccb

08007bdc <_scanf_float>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	b087      	sub	sp, #28
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	688b      	ldr	r3, [r1, #8]
 8007be6:	4617      	mov	r7, r2
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bee:	bf85      	ittet	hi
 8007bf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007bf4:	195b      	addhi	r3, r3, r5
 8007bf6:	2300      	movls	r3, #0
 8007bf8:	9302      	strhi	r3, [sp, #8]
 8007bfa:	bf88      	it	hi
 8007bfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c00:	468b      	mov	fp, r1
 8007c02:	f04f 0500 	mov.w	r5, #0
 8007c06:	bf8c      	ite	hi
 8007c08:	608b      	strhi	r3, [r1, #8]
 8007c0a:	9302      	strls	r3, [sp, #8]
 8007c0c:	680b      	ldr	r3, [r1, #0]
 8007c0e:	4680      	mov	r8, r0
 8007c10:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c14:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c18:	460c      	mov	r4, r1
 8007c1a:	465e      	mov	r6, fp
 8007c1c:	46aa      	mov	sl, r5
 8007c1e:	46a9      	mov	r9, r5
 8007c20:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c24:	9501      	str	r5, [sp, #4]
 8007c26:	68a2      	ldr	r2, [r4, #8]
 8007c28:	b152      	cbz	r2, 8007c40 <_scanf_float+0x64>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8007c30:	d864      	bhi.n	8007cfc <_scanf_float+0x120>
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d83c      	bhi.n	8007cb0 <_scanf_float+0xd4>
 8007c36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c3a:	b2c8      	uxtb	r0, r1
 8007c3c:	280e      	cmp	r0, #14
 8007c3e:	d93a      	bls.n	8007cb6 <_scanf_float+0xda>
 8007c40:	f1b9 0f00 	cmp.w	r9, #0
 8007c44:	d003      	beq.n	8007c4e <_scanf_float+0x72>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c52:	f1ba 0f01 	cmp.w	sl, #1
 8007c56:	f200 8113 	bhi.w	8007e80 <_scanf_float+0x2a4>
 8007c5a:	455e      	cmp	r6, fp
 8007c5c:	f200 8105 	bhi.w	8007e6a <_scanf_float+0x28e>
 8007c60:	2501      	movs	r5, #1
 8007c62:	4628      	mov	r0, r5
 8007c64:	b007      	add	sp, #28
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c6e:	2a0d      	cmp	r2, #13
 8007c70:	d8e6      	bhi.n	8007c40 <_scanf_float+0x64>
 8007c72:	a101      	add	r1, pc, #4	; (adr r1, 8007c78 <_scanf_float+0x9c>)
 8007c74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c78:	08007db7 	.word	0x08007db7
 8007c7c:	08007c41 	.word	0x08007c41
 8007c80:	08007c41 	.word	0x08007c41
 8007c84:	08007c41 	.word	0x08007c41
 8007c88:	08007e17 	.word	0x08007e17
 8007c8c:	08007def 	.word	0x08007def
 8007c90:	08007c41 	.word	0x08007c41
 8007c94:	08007c41 	.word	0x08007c41
 8007c98:	08007dc5 	.word	0x08007dc5
 8007c9c:	08007c41 	.word	0x08007c41
 8007ca0:	08007c41 	.word	0x08007c41
 8007ca4:	08007c41 	.word	0x08007c41
 8007ca8:	08007c41 	.word	0x08007c41
 8007cac:	08007d7d 	.word	0x08007d7d
 8007cb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cb4:	e7db      	b.n	8007c6e <_scanf_float+0x92>
 8007cb6:	290e      	cmp	r1, #14
 8007cb8:	d8c2      	bhi.n	8007c40 <_scanf_float+0x64>
 8007cba:	a001      	add	r0, pc, #4	; (adr r0, 8007cc0 <_scanf_float+0xe4>)
 8007cbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cc0:	08007d6f 	.word	0x08007d6f
 8007cc4:	08007c41 	.word	0x08007c41
 8007cc8:	08007d6f 	.word	0x08007d6f
 8007ccc:	08007e03 	.word	0x08007e03
 8007cd0:	08007c41 	.word	0x08007c41
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d59 	.word	0x08007d59
 8007cdc:	08007d59 	.word	0x08007d59
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d59 	.word	0x08007d59
 8007ce8:	08007d59 	.word	0x08007d59
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007d59 	.word	0x08007d59
 8007cfc:	2b6e      	cmp	r3, #110	; 0x6e
 8007cfe:	d809      	bhi.n	8007d14 <_scanf_float+0x138>
 8007d00:	2b60      	cmp	r3, #96	; 0x60
 8007d02:	d8b2      	bhi.n	8007c6a <_scanf_float+0x8e>
 8007d04:	2b54      	cmp	r3, #84	; 0x54
 8007d06:	d077      	beq.n	8007df8 <_scanf_float+0x21c>
 8007d08:	2b59      	cmp	r3, #89	; 0x59
 8007d0a:	d199      	bne.n	8007c40 <_scanf_float+0x64>
 8007d0c:	2d07      	cmp	r5, #7
 8007d0e:	d197      	bne.n	8007c40 <_scanf_float+0x64>
 8007d10:	2508      	movs	r5, #8
 8007d12:	e029      	b.n	8007d68 <_scanf_float+0x18c>
 8007d14:	2b74      	cmp	r3, #116	; 0x74
 8007d16:	d06f      	beq.n	8007df8 <_scanf_float+0x21c>
 8007d18:	2b79      	cmp	r3, #121	; 0x79
 8007d1a:	e7f6      	b.n	8007d0a <_scanf_float+0x12e>
 8007d1c:	6821      	ldr	r1, [r4, #0]
 8007d1e:	05c8      	lsls	r0, r1, #23
 8007d20:	d51a      	bpl.n	8007d58 <_scanf_float+0x17c>
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d28:	6021      	str	r1, [r4, #0]
 8007d2a:	f109 0901 	add.w	r9, r9, #1
 8007d2e:	b11b      	cbz	r3, 8007d38 <_scanf_float+0x15c>
 8007d30:	3b01      	subs	r3, #1
 8007d32:	3201      	adds	r2, #1
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	60a2      	str	r2, [r4, #8]
 8007d38:	68a3      	ldr	r3, [r4, #8]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	607b      	str	r3, [r7, #4]
 8007d4c:	f340 8084 	ble.w	8007e58 <_scanf_float+0x27c>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	603b      	str	r3, [r7, #0]
 8007d56:	e766      	b.n	8007c26 <_scanf_float+0x4a>
 8007d58:	eb1a 0f05 	cmn.w	sl, r5
 8007d5c:	f47f af70 	bne.w	8007c40 <_scanf_float+0x64>
 8007d60:	6822      	ldr	r2, [r4, #0]
 8007d62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d66:	6022      	str	r2, [r4, #0]
 8007d68:	f806 3b01 	strb.w	r3, [r6], #1
 8007d6c:	e7e4      	b.n	8007d38 <_scanf_float+0x15c>
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	0610      	lsls	r0, r2, #24
 8007d72:	f57f af65 	bpl.w	8007c40 <_scanf_float+0x64>
 8007d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7a:	e7f4      	b.n	8007d66 <_scanf_float+0x18a>
 8007d7c:	f1ba 0f00 	cmp.w	sl, #0
 8007d80:	d10e      	bne.n	8007da0 <_scanf_float+0x1c4>
 8007d82:	f1b9 0f00 	cmp.w	r9, #0
 8007d86:	d10e      	bne.n	8007da6 <_scanf_float+0x1ca>
 8007d88:	6822      	ldr	r2, [r4, #0]
 8007d8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d92:	d108      	bne.n	8007da6 <_scanf_float+0x1ca>
 8007d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d98:	f04f 0a01 	mov.w	sl, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	e7e3      	b.n	8007d68 <_scanf_float+0x18c>
 8007da0:	f1ba 0f02 	cmp.w	sl, #2
 8007da4:	d055      	beq.n	8007e52 <_scanf_float+0x276>
 8007da6:	2d01      	cmp	r5, #1
 8007da8:	d002      	beq.n	8007db0 <_scanf_float+0x1d4>
 8007daa:	2d04      	cmp	r5, #4
 8007dac:	f47f af48 	bne.w	8007c40 <_scanf_float+0x64>
 8007db0:	3501      	adds	r5, #1
 8007db2:	b2ed      	uxtb	r5, r5
 8007db4:	e7d8      	b.n	8007d68 <_scanf_float+0x18c>
 8007db6:	f1ba 0f01 	cmp.w	sl, #1
 8007dba:	f47f af41 	bne.w	8007c40 <_scanf_float+0x64>
 8007dbe:	f04f 0a02 	mov.w	sl, #2
 8007dc2:	e7d1      	b.n	8007d68 <_scanf_float+0x18c>
 8007dc4:	b97d      	cbnz	r5, 8007de6 <_scanf_float+0x20a>
 8007dc6:	f1b9 0f00 	cmp.w	r9, #0
 8007dca:	f47f af3c 	bne.w	8007c46 <_scanf_float+0x6a>
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007dd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007dd8:	f47f af39 	bne.w	8007c4e <_scanf_float+0x72>
 8007ddc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007de0:	2501      	movs	r5, #1
 8007de2:	6022      	str	r2, [r4, #0]
 8007de4:	e7c0      	b.n	8007d68 <_scanf_float+0x18c>
 8007de6:	2d03      	cmp	r5, #3
 8007de8:	d0e2      	beq.n	8007db0 <_scanf_float+0x1d4>
 8007dea:	2d05      	cmp	r5, #5
 8007dec:	e7de      	b.n	8007dac <_scanf_float+0x1d0>
 8007dee:	2d02      	cmp	r5, #2
 8007df0:	f47f af26 	bne.w	8007c40 <_scanf_float+0x64>
 8007df4:	2503      	movs	r5, #3
 8007df6:	e7b7      	b.n	8007d68 <_scanf_float+0x18c>
 8007df8:	2d06      	cmp	r5, #6
 8007dfa:	f47f af21 	bne.w	8007c40 <_scanf_float+0x64>
 8007dfe:	2507      	movs	r5, #7
 8007e00:	e7b2      	b.n	8007d68 <_scanf_float+0x18c>
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	0591      	lsls	r1, r2, #22
 8007e06:	f57f af1b 	bpl.w	8007c40 <_scanf_float+0x64>
 8007e0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e14:	e7a8      	b.n	8007d68 <_scanf_float+0x18c>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e20:	d006      	beq.n	8007e30 <_scanf_float+0x254>
 8007e22:	0550      	lsls	r0, r2, #21
 8007e24:	f57f af0c 	bpl.w	8007c40 <_scanf_float+0x64>
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	f43f af0f 	beq.w	8007c4e <_scanf_float+0x72>
 8007e30:	0591      	lsls	r1, r2, #22
 8007e32:	bf58      	it	pl
 8007e34:	9901      	ldrpl	r1, [sp, #4]
 8007e36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e3a:	bf58      	it	pl
 8007e3c:	eba9 0101 	subpl.w	r1, r9, r1
 8007e40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	bf58      	it	pl
 8007e4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	e78a      	b.n	8007d68 <_scanf_float+0x18c>
 8007e52:	f04f 0a03 	mov.w	sl, #3
 8007e56:	e787      	b.n	8007d68 <_scanf_float+0x18c>
 8007e58:	4639      	mov	r1, r7
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e60:	4798      	blx	r3
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f43f aedf 	beq.w	8007c26 <_scanf_float+0x4a>
 8007e68:	e6ea      	b.n	8007c40 <_scanf_float+0x64>
 8007e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e6e:	463a      	mov	r2, r7
 8007e70:	4640      	mov	r0, r8
 8007e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e76:	4798      	blx	r3
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	e6ec      	b.n	8007c5a <_scanf_float+0x7e>
 8007e80:	1e6b      	subs	r3, r5, #1
 8007e82:	2b06      	cmp	r3, #6
 8007e84:	d825      	bhi.n	8007ed2 <_scanf_float+0x2f6>
 8007e86:	2d02      	cmp	r5, #2
 8007e88:	d836      	bhi.n	8007ef8 <_scanf_float+0x31c>
 8007e8a:	455e      	cmp	r6, fp
 8007e8c:	f67f aee8 	bls.w	8007c60 <_scanf_float+0x84>
 8007e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e94:	463a      	mov	r2, r7
 8007e96:	4640      	mov	r0, r8
 8007e98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e9c:	4798      	blx	r3
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	e7f1      	b.n	8007e8a <_scanf_float+0x2ae>
 8007ea6:	9802      	ldr	r0, [sp, #8]
 8007ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007eb0:	463a      	mov	r2, r7
 8007eb2:	9002      	str	r0, [sp, #8]
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4798      	blx	r3
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec2:	fa5f fa8a 	uxtb.w	sl, sl
 8007ec6:	f1ba 0f02 	cmp.w	sl, #2
 8007eca:	d1ec      	bne.n	8007ea6 <_scanf_float+0x2ca>
 8007ecc:	3d03      	subs	r5, #3
 8007ece:	b2ed      	uxtb	r5, r5
 8007ed0:	1b76      	subs	r6, r6, r5
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	05da      	lsls	r2, r3, #23
 8007ed6:	d52f      	bpl.n	8007f38 <_scanf_float+0x35c>
 8007ed8:	055b      	lsls	r3, r3, #21
 8007eda:	d510      	bpl.n	8007efe <_scanf_float+0x322>
 8007edc:	455e      	cmp	r6, fp
 8007ede:	f67f aebf 	bls.w	8007c60 <_scanf_float+0x84>
 8007ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ee6:	463a      	mov	r2, r7
 8007ee8:	4640      	mov	r0, r8
 8007eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eee:	4798      	blx	r3
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	e7f1      	b.n	8007edc <_scanf_float+0x300>
 8007ef8:	46aa      	mov	sl, r5
 8007efa:	9602      	str	r6, [sp, #8]
 8007efc:	e7df      	b.n	8007ebe <_scanf_float+0x2e2>
 8007efe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f02:	6923      	ldr	r3, [r4, #16]
 8007f04:	2965      	cmp	r1, #101	; 0x65
 8007f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	d00c      	beq.n	8007f2c <_scanf_float+0x350>
 8007f12:	2945      	cmp	r1, #69	; 0x45
 8007f14:	d00a      	beq.n	8007f2c <_scanf_float+0x350>
 8007f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f1a:	463a      	mov	r2, r7
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4798      	blx	r3
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	1eb5      	subs	r5, r6, #2
 8007f2a:	6123      	str	r3, [r4, #16]
 8007f2c:	463a      	mov	r2, r7
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f34:	4798      	blx	r3
 8007f36:	462e      	mov	r6, r5
 8007f38:	6825      	ldr	r5, [r4, #0]
 8007f3a:	f015 0510 	ands.w	r5, r5, #16
 8007f3e:	d155      	bne.n	8007fec <_scanf_float+0x410>
 8007f40:	7035      	strb	r5, [r6, #0]
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4c:	d11b      	bne.n	8007f86 <_scanf_float+0x3aa>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	454b      	cmp	r3, r9
 8007f52:	eba3 0209 	sub.w	r2, r3, r9
 8007f56:	d123      	bne.n	8007fa0 <_scanf_float+0x3c4>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4659      	mov	r1, fp
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	f000 fe7b 	bl	8008c58 <_strtod_r>
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	f012 0f02 	tst.w	r2, #2
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	d021      	beq.n	8007fb6 <_scanf_float+0x3da>
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	9903      	ldr	r1, [sp, #12]
 8007f76:	600a      	str	r2, [r1, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	e9c3 6700 	strd	r6, r7, [r3]
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60e3      	str	r3, [r4, #12]
 8007f84:	e66d      	b.n	8007c62 <_scanf_float+0x86>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0e5      	beq.n	8007f58 <_scanf_float+0x37c>
 8007f8c:	9905      	ldr	r1, [sp, #20]
 8007f8e:	230a      	movs	r3, #10
 8007f90:	462a      	mov	r2, r5
 8007f92:	4640      	mov	r0, r8
 8007f94:	3101      	adds	r1, #1
 8007f96:	f000 fee1 	bl	8008d5c <_strtol_r>
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	9e05      	ldr	r6, [sp, #20]
 8007f9e:	1ac2      	subs	r2, r0, r3
 8007fa0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fa4:	429e      	cmp	r6, r3
 8007fa6:	bf28      	it	cs
 8007fa8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fac:	4630      	mov	r0, r6
 8007fae:	4910      	ldr	r1, [pc, #64]	; (8007ff0 <_scanf_float+0x414>)
 8007fb0:	f000 f826 	bl	8008000 <siprintf>
 8007fb4:	e7d0      	b.n	8007f58 <_scanf_float+0x37c>
 8007fb6:	f012 0f04 	tst.w	r2, #4
 8007fba:	f103 0204 	add.w	r2, r3, #4
 8007fbe:	d1d9      	bne.n	8007f74 <_scanf_float+0x398>
 8007fc0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007fc4:	f8cc 2000 	str.w	r2, [ip]
 8007fc8:	f8d3 8000 	ldr.w	r8, [r3]
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	f7f8 fd1c 	bl	8000a0c <__aeabi_dcmpun>
 8007fd4:	b128      	cbz	r0, 8007fe2 <_scanf_float+0x406>
 8007fd6:	4807      	ldr	r0, [pc, #28]	; (8007ff4 <_scanf_float+0x418>)
 8007fd8:	f000 f80e 	bl	8007ff8 <nanf>
 8007fdc:	f8c8 0000 	str.w	r0, [r8]
 8007fe0:	e7cd      	b.n	8007f7e <_scanf_float+0x3a2>
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 fd6f 	bl	8000ac8 <__aeabi_d2f>
 8007fea:	e7f7      	b.n	8007fdc <_scanf_float+0x400>
 8007fec:	2500      	movs	r5, #0
 8007fee:	e638      	b.n	8007c62 <_scanf_float+0x86>
 8007ff0:	0800bcdc 	.word	0x0800bcdc
 8007ff4:	0800c0e8 	.word	0x0800c0e8

08007ff8 <nanf>:
 8007ff8:	4800      	ldr	r0, [pc, #0]	; (8007ffc <nanf+0x4>)
 8007ffa:	4770      	bx	lr
 8007ffc:	7fc00000 	.word	0x7fc00000

08008000 <siprintf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	9107      	str	r1, [sp, #28]
 8008012:	9104      	str	r1, [sp, #16]
 8008014:	4808      	ldr	r0, [pc, #32]	; (8008038 <siprintf+0x38>)
 8008016:	4909      	ldr	r1, [pc, #36]	; (800803c <siprintf+0x3c>)
 8008018:	f853 2b04 	ldr.w	r2, [r3], #4
 800801c:	9105      	str	r1, [sp, #20]
 800801e:	6800      	ldr	r0, [r0, #0]
 8008020:	a902      	add	r1, sp, #8
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	f002 feac 	bl	800ad80 <_svfiprintf_r>
 8008028:	2200      	movs	r2, #0
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	b01c      	add	sp, #112	; 0x70
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b003      	add	sp, #12
 8008036:	4770      	bx	lr
 8008038:	20000014 	.word	0x20000014
 800803c:	ffff0208 	.word	0xffff0208

08008040 <sulp>:
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	460f      	mov	r7, r1
 8008046:	4690      	mov	r8, r2
 8008048:	f002 fc06 	bl	800a858 <__ulp>
 800804c:	4604      	mov	r4, r0
 800804e:	460d      	mov	r5, r1
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	d011      	beq.n	800807a <sulp+0x3a>
 8008056:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800805a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd0b      	ble.n	800807a <sulp+0x3a>
 8008062:	2400      	movs	r4, #0
 8008064:	051b      	lsls	r3, r3, #20
 8008066:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800806a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	f7f8 fa31 	bl	80004d8 <__aeabi_dmul>
 8008076:	4604      	mov	r4, r0
 8008078:	460d      	mov	r5, r1
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008082:	0000      	movs	r0, r0
 8008084:	0000      	movs	r0, r0
	...

08008088 <_strtod_l>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	469b      	mov	fp, r3
 800808e:	2300      	movs	r3, #0
 8008090:	b09f      	sub	sp, #124	; 0x7c
 8008092:	931a      	str	r3, [sp, #104]	; 0x68
 8008094:	4b9e      	ldr	r3, [pc, #632]	; (8008310 <_strtod_l+0x288>)
 8008096:	4682      	mov	sl, r0
 8008098:	681f      	ldr	r7, [r3, #0]
 800809a:	460e      	mov	r6, r1
 800809c:	4638      	mov	r0, r7
 800809e:	9215      	str	r2, [sp, #84]	; 0x54
 80080a0:	f7f8 f856 	bl	8000150 <strlen>
 80080a4:	f04f 0800 	mov.w	r8, #0
 80080a8:	4604      	mov	r4, r0
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	9619      	str	r6, [sp, #100]	; 0x64
 80080b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	2a2b      	cmp	r2, #43	; 0x2b
 80080b6:	d04c      	beq.n	8008152 <_strtod_l+0xca>
 80080b8:	d83a      	bhi.n	8008130 <_strtod_l+0xa8>
 80080ba:	2a0d      	cmp	r2, #13
 80080bc:	d833      	bhi.n	8008126 <_strtod_l+0x9e>
 80080be:	2a08      	cmp	r2, #8
 80080c0:	d833      	bhi.n	800812a <_strtod_l+0xa2>
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	d03d      	beq.n	8008142 <_strtod_l+0xba>
 80080c6:	2300      	movs	r3, #0
 80080c8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80080cc:	782b      	ldrb	r3, [r5, #0]
 80080ce:	2b30      	cmp	r3, #48	; 0x30
 80080d0:	f040 80aa 	bne.w	8008228 <_strtod_l+0x1a0>
 80080d4:	786b      	ldrb	r3, [r5, #1]
 80080d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080da:	2b58      	cmp	r3, #88	; 0x58
 80080dc:	d166      	bne.n	80081ac <_strtod_l+0x124>
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	4650      	mov	r0, sl
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	ab1a      	add	r3, sp, #104	; 0x68
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4a8a      	ldr	r2, [pc, #552]	; (8008314 <_strtod_l+0x28c>)
 80080ea:	f8cd b008 	str.w	fp, [sp, #8]
 80080ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80080f0:	a919      	add	r1, sp, #100	; 0x64
 80080f2:	f001 fd17 	bl	8009b24 <__gethex>
 80080f6:	f010 0607 	ands.w	r6, r0, #7
 80080fa:	4604      	mov	r4, r0
 80080fc:	d005      	beq.n	800810a <_strtod_l+0x82>
 80080fe:	2e06      	cmp	r6, #6
 8008100:	d129      	bne.n	8008156 <_strtod_l+0xce>
 8008102:	2300      	movs	r3, #0
 8008104:	3501      	adds	r5, #1
 8008106:	9519      	str	r5, [sp, #100]	; 0x64
 8008108:	930a      	str	r3, [sp, #40]	; 0x28
 800810a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 858a 	bne.w	8008c26 <_strtod_l+0xb9e>
 8008112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008114:	b1d3      	cbz	r3, 800814c <_strtod_l+0xc4>
 8008116:	4642      	mov	r2, r8
 8008118:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800811c:	4610      	mov	r0, r2
 800811e:	4619      	mov	r1, r3
 8008120:	b01f      	add	sp, #124	; 0x7c
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	2a20      	cmp	r2, #32
 8008128:	d1cd      	bne.n	80080c6 <_strtod_l+0x3e>
 800812a:	3301      	adds	r3, #1
 800812c:	9319      	str	r3, [sp, #100]	; 0x64
 800812e:	e7bf      	b.n	80080b0 <_strtod_l+0x28>
 8008130:	2a2d      	cmp	r2, #45	; 0x2d
 8008132:	d1c8      	bne.n	80080c6 <_strtod_l+0x3e>
 8008134:	2201      	movs	r2, #1
 8008136:	920a      	str	r2, [sp, #40]	; 0x28
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	9219      	str	r2, [sp, #100]	; 0x64
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1c3      	bne.n	80080ca <_strtod_l+0x42>
 8008142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008144:	9619      	str	r6, [sp, #100]	; 0x64
 8008146:	2b00      	cmp	r3, #0
 8008148:	f040 856b 	bne.w	8008c22 <_strtod_l+0xb9a>
 800814c:	4642      	mov	r2, r8
 800814e:	464b      	mov	r3, r9
 8008150:	e7e4      	b.n	800811c <_strtod_l+0x94>
 8008152:	2200      	movs	r2, #0
 8008154:	e7ef      	b.n	8008136 <_strtod_l+0xae>
 8008156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008158:	b13a      	cbz	r2, 800816a <_strtod_l+0xe2>
 800815a:	2135      	movs	r1, #53	; 0x35
 800815c:	a81c      	add	r0, sp, #112	; 0x70
 800815e:	f002 fc7f 	bl	800aa60 <__copybits>
 8008162:	4650      	mov	r0, sl
 8008164:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008166:	f002 f847 	bl	800a1f8 <_Bfree>
 800816a:	3e01      	subs	r6, #1
 800816c:	2e04      	cmp	r6, #4
 800816e:	d806      	bhi.n	800817e <_strtod_l+0xf6>
 8008170:	e8df f006 	tbb	[pc, r6]
 8008174:	1714030a 	.word	0x1714030a
 8008178:	0a          	.byte	0x0a
 8008179:	00          	.byte	0x00
 800817a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800817e:	0721      	lsls	r1, r4, #28
 8008180:	d5c3      	bpl.n	800810a <_strtod_l+0x82>
 8008182:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008186:	e7c0      	b.n	800810a <_strtod_l+0x82>
 8008188:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800818a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800818e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008196:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800819a:	e7f0      	b.n	800817e <_strtod_l+0xf6>
 800819c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008318 <_strtod_l+0x290>
 80081a0:	e7ed      	b.n	800817e <_strtod_l+0xf6>
 80081a2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80081a6:	f04f 38ff 	mov.w	r8, #4294967295
 80081aa:	e7e8      	b.n	800817e <_strtod_l+0xf6>
 80081ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	9219      	str	r2, [sp, #100]	; 0x64
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b30      	cmp	r3, #48	; 0x30
 80081b6:	d0f9      	beq.n	80081ac <_strtod_l+0x124>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0a6      	beq.n	800810a <_strtod_l+0x82>
 80081bc:	2301      	movs	r3, #1
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80081c2:	220a      	movs	r2, #10
 80081c4:	9308      	str	r3, [sp, #32]
 80081c6:	2300      	movs	r3, #0
 80081c8:	469b      	mov	fp, r3
 80081ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80081ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80081d0:	7805      	ldrb	r5, [r0, #0]
 80081d2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	2909      	cmp	r1, #9
 80081da:	d927      	bls.n	800822c <_strtod_l+0x1a4>
 80081dc:	4622      	mov	r2, r4
 80081de:	4639      	mov	r1, r7
 80081e0:	f002 fee4 	bl	800afac <strncmp>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d033      	beq.n	8008250 <_strtod_l+0x1c8>
 80081e8:	2000      	movs	r0, #0
 80081ea:	462a      	mov	r2, r5
 80081ec:	465c      	mov	r4, fp
 80081ee:	4603      	mov	r3, r0
 80081f0:	9004      	str	r0, [sp, #16]
 80081f2:	2a65      	cmp	r2, #101	; 0x65
 80081f4:	d001      	beq.n	80081fa <_strtod_l+0x172>
 80081f6:	2a45      	cmp	r2, #69	; 0x45
 80081f8:	d114      	bne.n	8008224 <_strtod_l+0x19c>
 80081fa:	b91c      	cbnz	r4, 8008204 <_strtod_l+0x17c>
 80081fc:	9a07      	ldr	r2, [sp, #28]
 80081fe:	4302      	orrs	r2, r0
 8008200:	d09f      	beq.n	8008142 <_strtod_l+0xba>
 8008202:	2400      	movs	r4, #0
 8008204:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008206:	1c72      	adds	r2, r6, #1
 8008208:	9219      	str	r2, [sp, #100]	; 0x64
 800820a:	7872      	ldrb	r2, [r6, #1]
 800820c:	2a2b      	cmp	r2, #43	; 0x2b
 800820e:	d079      	beq.n	8008304 <_strtod_l+0x27c>
 8008210:	2a2d      	cmp	r2, #45	; 0x2d
 8008212:	f000 8083 	beq.w	800831c <_strtod_l+0x294>
 8008216:	2700      	movs	r7, #0
 8008218:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800821c:	2909      	cmp	r1, #9
 800821e:	f240 8083 	bls.w	8008328 <_strtod_l+0x2a0>
 8008222:	9619      	str	r6, [sp, #100]	; 0x64
 8008224:	2500      	movs	r5, #0
 8008226:	e09f      	b.n	8008368 <_strtod_l+0x2e0>
 8008228:	2300      	movs	r3, #0
 800822a:	e7c8      	b.n	80081be <_strtod_l+0x136>
 800822c:	f1bb 0f08 	cmp.w	fp, #8
 8008230:	bfd5      	itete	le
 8008232:	9906      	ldrle	r1, [sp, #24]
 8008234:	9905      	ldrgt	r1, [sp, #20]
 8008236:	fb02 3301 	mlale	r3, r2, r1, r3
 800823a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800823e:	f100 0001 	add.w	r0, r0, #1
 8008242:	bfd4      	ite	le
 8008244:	9306      	strle	r3, [sp, #24]
 8008246:	9305      	strgt	r3, [sp, #20]
 8008248:	f10b 0b01 	add.w	fp, fp, #1
 800824c:	9019      	str	r0, [sp, #100]	; 0x64
 800824e:	e7be      	b.n	80081ce <_strtod_l+0x146>
 8008250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008252:	191a      	adds	r2, r3, r4
 8008254:	9219      	str	r2, [sp, #100]	; 0x64
 8008256:	5d1a      	ldrb	r2, [r3, r4]
 8008258:	f1bb 0f00 	cmp.w	fp, #0
 800825c:	d036      	beq.n	80082cc <_strtod_l+0x244>
 800825e:	465c      	mov	r4, fp
 8008260:	9004      	str	r0, [sp, #16]
 8008262:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d912      	bls.n	8008290 <_strtod_l+0x208>
 800826a:	2301      	movs	r3, #1
 800826c:	e7c1      	b.n	80081f2 <_strtod_l+0x16a>
 800826e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008270:	3001      	adds	r0, #1
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	9219      	str	r2, [sp, #100]	; 0x64
 8008276:	785a      	ldrb	r2, [r3, #1]
 8008278:	2a30      	cmp	r2, #48	; 0x30
 800827a:	d0f8      	beq.n	800826e <_strtod_l+0x1e6>
 800827c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008280:	2b08      	cmp	r3, #8
 8008282:	f200 84d5 	bhi.w	8008c30 <_strtod_l+0xba8>
 8008286:	9004      	str	r0, [sp, #16]
 8008288:	2000      	movs	r0, #0
 800828a:	4604      	mov	r4, r0
 800828c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800828e:	9308      	str	r3, [sp, #32]
 8008290:	3a30      	subs	r2, #48	; 0x30
 8008292:	f100 0301 	add.w	r3, r0, #1
 8008296:	d013      	beq.n	80082c0 <_strtod_l+0x238>
 8008298:	9904      	ldr	r1, [sp, #16]
 800829a:	1905      	adds	r5, r0, r4
 800829c:	4419      	add	r1, r3
 800829e:	9104      	str	r1, [sp, #16]
 80082a0:	4623      	mov	r3, r4
 80082a2:	210a      	movs	r1, #10
 80082a4:	42ab      	cmp	r3, r5
 80082a6:	d113      	bne.n	80082d0 <_strtod_l+0x248>
 80082a8:	1823      	adds	r3, r4, r0
 80082aa:	2b08      	cmp	r3, #8
 80082ac:	f104 0401 	add.w	r4, r4, #1
 80082b0:	4404      	add	r4, r0
 80082b2:	dc1b      	bgt.n	80082ec <_strtod_l+0x264>
 80082b4:	230a      	movs	r3, #10
 80082b6:	9906      	ldr	r1, [sp, #24]
 80082b8:	fb03 2301 	mla	r3, r3, r1, r2
 80082bc:	9306      	str	r3, [sp, #24]
 80082be:	2300      	movs	r3, #0
 80082c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082c2:	4618      	mov	r0, r3
 80082c4:	1c51      	adds	r1, r2, #1
 80082c6:	9119      	str	r1, [sp, #100]	; 0x64
 80082c8:	7852      	ldrb	r2, [r2, #1]
 80082ca:	e7ca      	b.n	8008262 <_strtod_l+0x1da>
 80082cc:	4658      	mov	r0, fp
 80082ce:	e7d3      	b.n	8008278 <_strtod_l+0x1f0>
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	dc04      	bgt.n	80082de <_strtod_l+0x256>
 80082d4:	9f06      	ldr	r7, [sp, #24]
 80082d6:	434f      	muls	r7, r1
 80082d8:	9706      	str	r7, [sp, #24]
 80082da:	3301      	adds	r3, #1
 80082dc:	e7e2      	b.n	80082a4 <_strtod_l+0x21c>
 80082de:	1c5f      	adds	r7, r3, #1
 80082e0:	2f10      	cmp	r7, #16
 80082e2:	bfde      	ittt	le
 80082e4:	9f05      	ldrle	r7, [sp, #20]
 80082e6:	434f      	mulle	r7, r1
 80082e8:	9705      	strle	r7, [sp, #20]
 80082ea:	e7f6      	b.n	80082da <_strtod_l+0x252>
 80082ec:	2c10      	cmp	r4, #16
 80082ee:	bfdf      	itttt	le
 80082f0:	230a      	movle	r3, #10
 80082f2:	9905      	ldrle	r1, [sp, #20]
 80082f4:	fb03 2301 	mlale	r3, r3, r1, r2
 80082f8:	9305      	strle	r3, [sp, #20]
 80082fa:	e7e0      	b.n	80082be <_strtod_l+0x236>
 80082fc:	2300      	movs	r3, #0
 80082fe:	9304      	str	r3, [sp, #16]
 8008300:	2301      	movs	r3, #1
 8008302:	e77b      	b.n	80081fc <_strtod_l+0x174>
 8008304:	2700      	movs	r7, #0
 8008306:	1cb2      	adds	r2, r6, #2
 8008308:	9219      	str	r2, [sp, #100]	; 0x64
 800830a:	78b2      	ldrb	r2, [r6, #2]
 800830c:	e784      	b.n	8008218 <_strtod_l+0x190>
 800830e:	bf00      	nop
 8008310:	0800bf30 	.word	0x0800bf30
 8008314:	0800bce4 	.word	0x0800bce4
 8008318:	7ff00000 	.word	0x7ff00000
 800831c:	2701      	movs	r7, #1
 800831e:	e7f2      	b.n	8008306 <_strtod_l+0x27e>
 8008320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008322:	1c51      	adds	r1, r2, #1
 8008324:	9119      	str	r1, [sp, #100]	; 0x64
 8008326:	7852      	ldrb	r2, [r2, #1]
 8008328:	2a30      	cmp	r2, #48	; 0x30
 800832a:	d0f9      	beq.n	8008320 <_strtod_l+0x298>
 800832c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008330:	2908      	cmp	r1, #8
 8008332:	f63f af77 	bhi.w	8008224 <_strtod_l+0x19c>
 8008336:	f04f 0e0a 	mov.w	lr, #10
 800833a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800833e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008340:	9209      	str	r2, [sp, #36]	; 0x24
 8008342:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008344:	1c51      	adds	r1, r2, #1
 8008346:	9119      	str	r1, [sp, #100]	; 0x64
 8008348:	7852      	ldrb	r2, [r2, #1]
 800834a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800834e:	2d09      	cmp	r5, #9
 8008350:	d935      	bls.n	80083be <_strtod_l+0x336>
 8008352:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008354:	1b49      	subs	r1, r1, r5
 8008356:	2908      	cmp	r1, #8
 8008358:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800835c:	dc02      	bgt.n	8008364 <_strtod_l+0x2dc>
 800835e:	4565      	cmp	r5, ip
 8008360:	bfa8      	it	ge
 8008362:	4665      	movge	r5, ip
 8008364:	b107      	cbz	r7, 8008368 <_strtod_l+0x2e0>
 8008366:	426d      	negs	r5, r5
 8008368:	2c00      	cmp	r4, #0
 800836a:	d14c      	bne.n	8008406 <_strtod_l+0x37e>
 800836c:	9907      	ldr	r1, [sp, #28]
 800836e:	4301      	orrs	r1, r0
 8008370:	f47f aecb 	bne.w	800810a <_strtod_l+0x82>
 8008374:	2b00      	cmp	r3, #0
 8008376:	f47f aee4 	bne.w	8008142 <_strtod_l+0xba>
 800837a:	2a69      	cmp	r2, #105	; 0x69
 800837c:	d026      	beq.n	80083cc <_strtod_l+0x344>
 800837e:	dc23      	bgt.n	80083c8 <_strtod_l+0x340>
 8008380:	2a49      	cmp	r2, #73	; 0x49
 8008382:	d023      	beq.n	80083cc <_strtod_l+0x344>
 8008384:	2a4e      	cmp	r2, #78	; 0x4e
 8008386:	f47f aedc 	bne.w	8008142 <_strtod_l+0xba>
 800838a:	499d      	ldr	r1, [pc, #628]	; (8008600 <_strtod_l+0x578>)
 800838c:	a819      	add	r0, sp, #100	; 0x64
 800838e:	f001 fe17 	bl	8009fc0 <__match>
 8008392:	2800      	cmp	r0, #0
 8008394:	f43f aed5 	beq.w	8008142 <_strtod_l+0xba>
 8008398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b28      	cmp	r3, #40	; 0x28
 800839e:	d12c      	bne.n	80083fa <_strtod_l+0x372>
 80083a0:	4998      	ldr	r1, [pc, #608]	; (8008604 <_strtod_l+0x57c>)
 80083a2:	aa1c      	add	r2, sp, #112	; 0x70
 80083a4:	a819      	add	r0, sp, #100	; 0x64
 80083a6:	f001 fe1f 	bl	8009fe8 <__hexnan>
 80083aa:	2805      	cmp	r0, #5
 80083ac:	d125      	bne.n	80083fa <_strtod_l+0x372>
 80083ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80083b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80083b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80083bc:	e6a5      	b.n	800810a <_strtod_l+0x82>
 80083be:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80083c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80083c6:	e7bc      	b.n	8008342 <_strtod_l+0x2ba>
 80083c8:	2a6e      	cmp	r2, #110	; 0x6e
 80083ca:	e7dc      	b.n	8008386 <_strtod_l+0x2fe>
 80083cc:	498e      	ldr	r1, [pc, #568]	; (8008608 <_strtod_l+0x580>)
 80083ce:	a819      	add	r0, sp, #100	; 0x64
 80083d0:	f001 fdf6 	bl	8009fc0 <__match>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f43f aeb4 	beq.w	8008142 <_strtod_l+0xba>
 80083da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083dc:	498b      	ldr	r1, [pc, #556]	; (800860c <_strtod_l+0x584>)
 80083de:	3b01      	subs	r3, #1
 80083e0:	a819      	add	r0, sp, #100	; 0x64
 80083e2:	9319      	str	r3, [sp, #100]	; 0x64
 80083e4:	f001 fdec 	bl	8009fc0 <__match>
 80083e8:	b910      	cbnz	r0, 80083f0 <_strtod_l+0x368>
 80083ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ec:	3301      	adds	r3, #1
 80083ee:	9319      	str	r3, [sp, #100]	; 0x64
 80083f0:	f04f 0800 	mov.w	r8, #0
 80083f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008610 <_strtod_l+0x588>
 80083f8:	e687      	b.n	800810a <_strtod_l+0x82>
 80083fa:	4886      	ldr	r0, [pc, #536]	; (8008614 <_strtod_l+0x58c>)
 80083fc:	f002 fdc0 	bl	800af80 <nan>
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	e681      	b.n	800810a <_strtod_l+0x82>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	f1bb 0f00 	cmp.w	fp, #0
 800840c:	bf08      	it	eq
 800840e:	46a3      	moveq	fp, r4
 8008410:	1aeb      	subs	r3, r5, r3
 8008412:	2c10      	cmp	r4, #16
 8008414:	9806      	ldr	r0, [sp, #24]
 8008416:	4626      	mov	r6, r4
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	bfa8      	it	ge
 800841c:	2610      	movge	r6, #16
 800841e:	f7f7 ffe1 	bl	80003e4 <__aeabi_ui2d>
 8008422:	2c09      	cmp	r4, #9
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	dd13      	ble.n	8008452 <_strtod_l+0x3ca>
 800842a:	4b7b      	ldr	r3, [pc, #492]	; (8008618 <_strtod_l+0x590>)
 800842c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008430:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008434:	f7f8 f850 	bl	80004d8 <__aeabi_dmul>
 8008438:	4680      	mov	r8, r0
 800843a:	9805      	ldr	r0, [sp, #20]
 800843c:	4689      	mov	r9, r1
 800843e:	f7f7 ffd1 	bl	80003e4 <__aeabi_ui2d>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f7 fe8f 	bl	800016c <__adddf3>
 800844e:	4680      	mov	r8, r0
 8008450:	4689      	mov	r9, r1
 8008452:	2c0f      	cmp	r4, #15
 8008454:	dc36      	bgt.n	80084c4 <_strtod_l+0x43c>
 8008456:	9b07      	ldr	r3, [sp, #28]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f43f ae56 	beq.w	800810a <_strtod_l+0x82>
 800845e:	dd22      	ble.n	80084a6 <_strtod_l+0x41e>
 8008460:	2b16      	cmp	r3, #22
 8008462:	dc09      	bgt.n	8008478 <_strtod_l+0x3f0>
 8008464:	496c      	ldr	r1, [pc, #432]	; (8008618 <_strtod_l+0x590>)
 8008466:	4642      	mov	r2, r8
 8008468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800846c:	464b      	mov	r3, r9
 800846e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008472:	f7f8 f831 	bl	80004d8 <__aeabi_dmul>
 8008476:	e7c3      	b.n	8008400 <_strtod_l+0x378>
 8008478:	9a07      	ldr	r2, [sp, #28]
 800847a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800847e:	4293      	cmp	r3, r2
 8008480:	db20      	blt.n	80084c4 <_strtod_l+0x43c>
 8008482:	4d65      	ldr	r5, [pc, #404]	; (8008618 <_strtod_l+0x590>)
 8008484:	f1c4 040f 	rsb	r4, r4, #15
 8008488:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800848c:	4642      	mov	r2, r8
 800848e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008492:	464b      	mov	r3, r9
 8008494:	f7f8 f820 	bl	80004d8 <__aeabi_dmul>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	1b1c      	subs	r4, r3, r4
 800849c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80084a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084a4:	e7e5      	b.n	8008472 <_strtod_l+0x3ea>
 80084a6:	9b07      	ldr	r3, [sp, #28]
 80084a8:	3316      	adds	r3, #22
 80084aa:	db0b      	blt.n	80084c4 <_strtod_l+0x43c>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	4640      	mov	r0, r8
 80084b0:	1b5d      	subs	r5, r3, r5
 80084b2:	4b59      	ldr	r3, [pc, #356]	; (8008618 <_strtod_l+0x590>)
 80084b4:	4649      	mov	r1, r9
 80084b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084be:	f7f8 f935 	bl	800072c <__aeabi_ddiv>
 80084c2:	e79d      	b.n	8008400 <_strtod_l+0x378>
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	1ba6      	subs	r6, r4, r6
 80084c8:	441e      	add	r6, r3
 80084ca:	2e00      	cmp	r6, #0
 80084cc:	dd74      	ble.n	80085b8 <_strtod_l+0x530>
 80084ce:	f016 030f 	ands.w	r3, r6, #15
 80084d2:	d00a      	beq.n	80084ea <_strtod_l+0x462>
 80084d4:	4950      	ldr	r1, [pc, #320]	; (8008618 <_strtod_l+0x590>)
 80084d6:	4642      	mov	r2, r8
 80084d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e0:	464b      	mov	r3, r9
 80084e2:	f7f7 fff9 	bl	80004d8 <__aeabi_dmul>
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	f036 060f 	bics.w	r6, r6, #15
 80084ee:	d052      	beq.n	8008596 <_strtod_l+0x50e>
 80084f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80084f4:	dd27      	ble.n	8008546 <_strtod_l+0x4be>
 80084f6:	f04f 0b00 	mov.w	fp, #0
 80084fa:	f8cd b010 	str.w	fp, [sp, #16]
 80084fe:	f8cd b020 	str.w	fp, [sp, #32]
 8008502:	f8cd b018 	str.w	fp, [sp, #24]
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	f04f 0800 	mov.w	r8, #0
 800850c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008610 <_strtod_l+0x588>
 8008510:	f8ca 3000 	str.w	r3, [sl]
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f43f adf7 	beq.w	800810a <_strtod_l+0x82>
 800851c:	4650      	mov	r0, sl
 800851e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008520:	f001 fe6a 	bl	800a1f8 <_Bfree>
 8008524:	4650      	mov	r0, sl
 8008526:	9906      	ldr	r1, [sp, #24]
 8008528:	f001 fe66 	bl	800a1f8 <_Bfree>
 800852c:	4650      	mov	r0, sl
 800852e:	9904      	ldr	r1, [sp, #16]
 8008530:	f001 fe62 	bl	800a1f8 <_Bfree>
 8008534:	4650      	mov	r0, sl
 8008536:	9908      	ldr	r1, [sp, #32]
 8008538:	f001 fe5e 	bl	800a1f8 <_Bfree>
 800853c:	4659      	mov	r1, fp
 800853e:	4650      	mov	r0, sl
 8008540:	f001 fe5a 	bl	800a1f8 <_Bfree>
 8008544:	e5e1      	b.n	800810a <_strtod_l+0x82>
 8008546:	4b35      	ldr	r3, [pc, #212]	; (800861c <_strtod_l+0x594>)
 8008548:	4640      	mov	r0, r8
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	2300      	movs	r3, #0
 800854e:	4649      	mov	r1, r9
 8008550:	461f      	mov	r7, r3
 8008552:	1136      	asrs	r6, r6, #4
 8008554:	2e01      	cmp	r6, #1
 8008556:	dc21      	bgt.n	800859c <_strtod_l+0x514>
 8008558:	b10b      	cbz	r3, 800855e <_strtod_l+0x4d6>
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	4b2f      	ldr	r3, [pc, #188]	; (800861c <_strtod_l+0x594>)
 8008560:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008564:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008568:	4642      	mov	r2, r8
 800856a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800856e:	464b      	mov	r3, r9
 8008570:	f7f7 ffb2 	bl	80004d8 <__aeabi_dmul>
 8008574:	4b26      	ldr	r3, [pc, #152]	; (8008610 <_strtod_l+0x588>)
 8008576:	460a      	mov	r2, r1
 8008578:	400b      	ands	r3, r1
 800857a:	4929      	ldr	r1, [pc, #164]	; (8008620 <_strtod_l+0x598>)
 800857c:	4680      	mov	r8, r0
 800857e:	428b      	cmp	r3, r1
 8008580:	d8b9      	bhi.n	80084f6 <_strtod_l+0x46e>
 8008582:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008586:	428b      	cmp	r3, r1
 8008588:	bf86      	itte	hi
 800858a:	f04f 38ff 	movhi.w	r8, #4294967295
 800858e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008624 <_strtod_l+0x59c>
 8008592:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008596:	2300      	movs	r3, #0
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	e07f      	b.n	800869c <_strtod_l+0x614>
 800859c:	07f2      	lsls	r2, r6, #31
 800859e:	d505      	bpl.n	80085ac <_strtod_l+0x524>
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 ff97 	bl	80004d8 <__aeabi_dmul>
 80085aa:	2301      	movs	r3, #1
 80085ac:	9a05      	ldr	r2, [sp, #20]
 80085ae:	3701      	adds	r7, #1
 80085b0:	3208      	adds	r2, #8
 80085b2:	1076      	asrs	r6, r6, #1
 80085b4:	9205      	str	r2, [sp, #20]
 80085b6:	e7cd      	b.n	8008554 <_strtod_l+0x4cc>
 80085b8:	d0ed      	beq.n	8008596 <_strtod_l+0x50e>
 80085ba:	4276      	negs	r6, r6
 80085bc:	f016 020f 	ands.w	r2, r6, #15
 80085c0:	d00a      	beq.n	80085d8 <_strtod_l+0x550>
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <_strtod_l+0x590>)
 80085c4:	4640      	mov	r0, r8
 80085c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ca:	4649      	mov	r1, r9
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f7f8 f8ac 	bl	800072c <__aeabi_ddiv>
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	1136      	asrs	r6, r6, #4
 80085da:	d0dc      	beq.n	8008596 <_strtod_l+0x50e>
 80085dc:	2e1f      	cmp	r6, #31
 80085de:	dd23      	ble.n	8008628 <_strtod_l+0x5a0>
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	f8cd b010 	str.w	fp, [sp, #16]
 80085e8:	f8cd b020 	str.w	fp, [sp, #32]
 80085ec:	f8cd b018 	str.w	fp, [sp, #24]
 80085f0:	2322      	movs	r3, #34	; 0x22
 80085f2:	f04f 0800 	mov.w	r8, #0
 80085f6:	f04f 0900 	mov.w	r9, #0
 80085fa:	f8ca 3000 	str.w	r3, [sl]
 80085fe:	e789      	b.n	8008514 <_strtod_l+0x48c>
 8008600:	0800bcb5 	.word	0x0800bcb5
 8008604:	0800bcf8 	.word	0x0800bcf8
 8008608:	0800bcad 	.word	0x0800bcad
 800860c:	0800be3c 	.word	0x0800be3c
 8008610:	7ff00000 	.word	0x7ff00000
 8008614:	0800c0e8 	.word	0x0800c0e8
 8008618:	0800bfc8 	.word	0x0800bfc8
 800861c:	0800bfa0 	.word	0x0800bfa0
 8008620:	7ca00000 	.word	0x7ca00000
 8008624:	7fefffff 	.word	0x7fefffff
 8008628:	f016 0310 	ands.w	r3, r6, #16
 800862c:	bf18      	it	ne
 800862e:	236a      	movne	r3, #106	; 0x6a
 8008630:	4640      	mov	r0, r8
 8008632:	9305      	str	r3, [sp, #20]
 8008634:	4649      	mov	r1, r9
 8008636:	2300      	movs	r3, #0
 8008638:	4fb0      	ldr	r7, [pc, #704]	; (80088fc <_strtod_l+0x874>)
 800863a:	07f2      	lsls	r2, r6, #31
 800863c:	d504      	bpl.n	8008648 <_strtod_l+0x5c0>
 800863e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008642:	f7f7 ff49 	bl	80004d8 <__aeabi_dmul>
 8008646:	2301      	movs	r3, #1
 8008648:	1076      	asrs	r6, r6, #1
 800864a:	f107 0708 	add.w	r7, r7, #8
 800864e:	d1f4      	bne.n	800863a <_strtod_l+0x5b2>
 8008650:	b10b      	cbz	r3, 8008656 <_strtod_l+0x5ce>
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	9b05      	ldr	r3, [sp, #20]
 8008658:	b1c3      	cbz	r3, 800868c <_strtod_l+0x604>
 800865a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800865e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008662:	2b00      	cmp	r3, #0
 8008664:	4649      	mov	r1, r9
 8008666:	dd11      	ble.n	800868c <_strtod_l+0x604>
 8008668:	2b1f      	cmp	r3, #31
 800866a:	f340 8127 	ble.w	80088bc <_strtod_l+0x834>
 800866e:	2b34      	cmp	r3, #52	; 0x34
 8008670:	bfd8      	it	le
 8008672:	f04f 33ff 	movle.w	r3, #4294967295
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	bfcf      	iteee	gt
 800867c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008680:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008684:	fa03 f202 	lslle.w	r2, r3, r2
 8008688:	ea02 0901 	andle.w	r9, r2, r1
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 f988 	bl	80009a8 <__aeabi_dcmpeq>
 8008698:	2800      	cmp	r0, #0
 800869a:	d1a1      	bne.n	80085e0 <_strtod_l+0x558>
 800869c:	9b06      	ldr	r3, [sp, #24]
 800869e:	465a      	mov	r2, fp
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4650      	mov	r0, sl
 80086a4:	4623      	mov	r3, r4
 80086a6:	9908      	ldr	r1, [sp, #32]
 80086a8:	f001 fe0e 	bl	800a2c8 <__s2b>
 80086ac:	9008      	str	r0, [sp, #32]
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f43f af21 	beq.w	80084f6 <_strtod_l+0x46e>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	f04f 0b00 	mov.w	fp, #0
 80086ba:	1b5d      	subs	r5, r3, r5
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	f8cd b010 	str.w	fp, [sp, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfb4      	ite	lt
 80086c6:	462b      	movlt	r3, r5
 80086c8:	2300      	movge	r3, #0
 80086ca:	930e      	str	r3, [sp, #56]	; 0x38
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086d2:	9314      	str	r3, [sp, #80]	; 0x50
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	4650      	mov	r0, sl
 80086d8:	6859      	ldr	r1, [r3, #4]
 80086da:	f001 fd4d 	bl	800a178 <_Balloc>
 80086de:	9006      	str	r0, [sp, #24]
 80086e0:	2800      	cmp	r0, #0
 80086e2:	f43f af10 	beq.w	8008506 <_strtod_l+0x47e>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	300c      	adds	r0, #12
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	f103 010c 	add.w	r1, r3, #12
 80086f0:	3202      	adds	r2, #2
 80086f2:	0092      	lsls	r2, r2, #2
 80086f4:	f7fe fdfc 	bl	80072f0 <memcpy>
 80086f8:	ab1c      	add	r3, sp, #112	; 0x70
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	4650      	mov	r0, sl
 8008706:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800870a:	f002 f91f 	bl	800a94c <__d2b>
 800870e:	901a      	str	r0, [sp, #104]	; 0x68
 8008710:	2800      	cmp	r0, #0
 8008712:	f43f aef8 	beq.w	8008506 <_strtod_l+0x47e>
 8008716:	2101      	movs	r1, #1
 8008718:	4650      	mov	r0, sl
 800871a:	f001 fe6d 	bl	800a3f8 <__i2b>
 800871e:	4603      	mov	r3, r0
 8008720:	9004      	str	r0, [sp, #16]
 8008722:	2800      	cmp	r0, #0
 8008724:	f43f aeef 	beq.w	8008506 <_strtod_l+0x47e>
 8008728:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800872a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800872c:	2d00      	cmp	r5, #0
 800872e:	bfab      	itete	ge
 8008730:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008732:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008734:	18ee      	addge	r6, r5, r3
 8008736:	1b5c      	sublt	r4, r3, r5
 8008738:	9b05      	ldr	r3, [sp, #20]
 800873a:	bfa8      	it	ge
 800873c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800873e:	eba5 0503 	sub.w	r5, r5, r3
 8008742:	4415      	add	r5, r2
 8008744:	4b6e      	ldr	r3, [pc, #440]	; (8008900 <_strtod_l+0x878>)
 8008746:	f105 35ff 	add.w	r5, r5, #4294967295
 800874a:	bfb8      	it	lt
 800874c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800874e:	429d      	cmp	r5, r3
 8008750:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008754:	f280 80c4 	bge.w	80088e0 <_strtod_l+0x858>
 8008758:	1b5b      	subs	r3, r3, r5
 800875a:	2b1f      	cmp	r3, #31
 800875c:	f04f 0701 	mov.w	r7, #1
 8008760:	eba2 0203 	sub.w	r2, r2, r3
 8008764:	f300 80b1 	bgt.w	80088ca <_strtod_l+0x842>
 8008768:	2500      	movs	r5, #0
 800876a:	fa07 f303 	lsl.w	r3, r7, r3
 800876e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008770:	18b7      	adds	r7, r6, r2
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	42be      	cmp	r6, r7
 8008776:	4414      	add	r4, r2
 8008778:	441c      	add	r4, r3
 800877a:	4633      	mov	r3, r6
 800877c:	bfa8      	it	ge
 800877e:	463b      	movge	r3, r7
 8008780:	42a3      	cmp	r3, r4
 8008782:	bfa8      	it	ge
 8008784:	4623      	movge	r3, r4
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfc2      	ittt	gt
 800878a:	1aff      	subgt	r7, r7, r3
 800878c:	1ae4      	subgt	r4, r4, r3
 800878e:	1af6      	subgt	r6, r6, r3
 8008790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd17      	ble.n	80087c6 <_strtod_l+0x73e>
 8008796:	461a      	mov	r2, r3
 8008798:	4650      	mov	r0, sl
 800879a:	9904      	ldr	r1, [sp, #16]
 800879c:	f001 feea 	bl	800a574 <__pow5mult>
 80087a0:	9004      	str	r0, [sp, #16]
 80087a2:	2800      	cmp	r0, #0
 80087a4:	f43f aeaf 	beq.w	8008506 <_strtod_l+0x47e>
 80087a8:	4601      	mov	r1, r0
 80087aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087ac:	4650      	mov	r0, sl
 80087ae:	f001 fe39 	bl	800a424 <__multiply>
 80087b2:	9009      	str	r0, [sp, #36]	; 0x24
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f43f aea6 	beq.w	8008506 <_strtod_l+0x47e>
 80087ba:	4650      	mov	r0, sl
 80087bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80087be:	f001 fd1b 	bl	800a1f8 <_Bfree>
 80087c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c4:	931a      	str	r3, [sp, #104]	; 0x68
 80087c6:	2f00      	cmp	r7, #0
 80087c8:	f300 808e 	bgt.w	80088e8 <_strtod_l+0x860>
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd08      	ble.n	80087e4 <_strtod_l+0x75c>
 80087d2:	4650      	mov	r0, sl
 80087d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087d6:	9906      	ldr	r1, [sp, #24]
 80087d8:	f001 fecc 	bl	800a574 <__pow5mult>
 80087dc:	9006      	str	r0, [sp, #24]
 80087de:	2800      	cmp	r0, #0
 80087e0:	f43f ae91 	beq.w	8008506 <_strtod_l+0x47e>
 80087e4:	2c00      	cmp	r4, #0
 80087e6:	dd08      	ble.n	80087fa <_strtod_l+0x772>
 80087e8:	4622      	mov	r2, r4
 80087ea:	4650      	mov	r0, sl
 80087ec:	9906      	ldr	r1, [sp, #24]
 80087ee:	f001 ff1b 	bl	800a628 <__lshift>
 80087f2:	9006      	str	r0, [sp, #24]
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f43f ae86 	beq.w	8008506 <_strtod_l+0x47e>
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	dd08      	ble.n	8008810 <_strtod_l+0x788>
 80087fe:	4632      	mov	r2, r6
 8008800:	4650      	mov	r0, sl
 8008802:	9904      	ldr	r1, [sp, #16]
 8008804:	f001 ff10 	bl	800a628 <__lshift>
 8008808:	9004      	str	r0, [sp, #16]
 800880a:	2800      	cmp	r0, #0
 800880c:	f43f ae7b 	beq.w	8008506 <_strtod_l+0x47e>
 8008810:	4650      	mov	r0, sl
 8008812:	9a06      	ldr	r2, [sp, #24]
 8008814:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008816:	f001 ff93 	bl	800a740 <__mdiff>
 800881a:	4683      	mov	fp, r0
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f ae72 	beq.w	8008506 <_strtod_l+0x47e>
 8008822:	2400      	movs	r4, #0
 8008824:	68c3      	ldr	r3, [r0, #12]
 8008826:	9904      	ldr	r1, [sp, #16]
 8008828:	60c4      	str	r4, [r0, #12]
 800882a:	930b      	str	r3, [sp, #44]	; 0x2c
 800882c:	f001 ff6c 	bl	800a708 <__mcmp>
 8008830:	42a0      	cmp	r0, r4
 8008832:	da6b      	bge.n	800890c <_strtod_l+0x884>
 8008834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008836:	ea53 0308 	orrs.w	r3, r3, r8
 800883a:	f040 8091 	bne.w	8008960 <_strtod_l+0x8d8>
 800883e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008842:	2b00      	cmp	r3, #0
 8008844:	f040 808c 	bne.w	8008960 <_strtod_l+0x8d8>
 8008848:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800884c:	0d1b      	lsrs	r3, r3, #20
 800884e:	051b      	lsls	r3, r3, #20
 8008850:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008854:	f240 8084 	bls.w	8008960 <_strtod_l+0x8d8>
 8008858:	f8db 3014 	ldr.w	r3, [fp, #20]
 800885c:	b91b      	cbnz	r3, 8008866 <_strtod_l+0x7de>
 800885e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008862:	2b01      	cmp	r3, #1
 8008864:	dd7c      	ble.n	8008960 <_strtod_l+0x8d8>
 8008866:	4659      	mov	r1, fp
 8008868:	2201      	movs	r2, #1
 800886a:	4650      	mov	r0, sl
 800886c:	f001 fedc 	bl	800a628 <__lshift>
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	4683      	mov	fp, r0
 8008874:	f001 ff48 	bl	800a708 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	dd71      	ble.n	8008960 <_strtod_l+0x8d8>
 800887c:	9905      	ldr	r1, [sp, #20]
 800887e:	464b      	mov	r3, r9
 8008880:	4a20      	ldr	r2, [pc, #128]	; (8008904 <_strtod_l+0x87c>)
 8008882:	2900      	cmp	r1, #0
 8008884:	f000 808c 	beq.w	80089a0 <_strtod_l+0x918>
 8008888:	ea02 0109 	and.w	r1, r2, r9
 800888c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008890:	f300 8086 	bgt.w	80089a0 <_strtod_l+0x918>
 8008894:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008898:	f77f aeaa 	ble.w	80085f0 <_strtod_l+0x568>
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	4b19      	ldr	r3, [pc, #100]	; (8008908 <_strtod_l+0x880>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	f7f7 fe18 	bl	80004d8 <__aeabi_dmul>
 80088a8:	460b      	mov	r3, r1
 80088aa:	4303      	orrs	r3, r0
 80088ac:	bf08      	it	eq
 80088ae:	2322      	moveq	r3, #34	; 0x22
 80088b0:	4680      	mov	r8, r0
 80088b2:	4689      	mov	r9, r1
 80088b4:	bf08      	it	eq
 80088b6:	f8ca 3000 	streq.w	r3, [sl]
 80088ba:	e62f      	b.n	800851c <_strtod_l+0x494>
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	ea03 0808 	and.w	r8, r3, r8
 80088c8:	e6e0      	b.n	800868c <_strtod_l+0x604>
 80088ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80088ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80088d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80088d6:	35e2      	adds	r5, #226	; 0xe2
 80088d8:	fa07 f505 	lsl.w	r5, r7, r5
 80088dc:	970f      	str	r7, [sp, #60]	; 0x3c
 80088de:	e747      	b.n	8008770 <_strtod_l+0x6e8>
 80088e0:	2301      	movs	r3, #1
 80088e2:	2500      	movs	r5, #0
 80088e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e6:	e743      	b.n	8008770 <_strtod_l+0x6e8>
 80088e8:	463a      	mov	r2, r7
 80088ea:	4650      	mov	r0, sl
 80088ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088ee:	f001 fe9b 	bl	800a628 <__lshift>
 80088f2:	901a      	str	r0, [sp, #104]	; 0x68
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f47f af69 	bne.w	80087cc <_strtod_l+0x744>
 80088fa:	e604      	b.n	8008506 <_strtod_l+0x47e>
 80088fc:	0800bd10 	.word	0x0800bd10
 8008900:	fffffc02 	.word	0xfffffc02
 8008904:	7ff00000 	.word	0x7ff00000
 8008908:	39500000 	.word	0x39500000
 800890c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008910:	d165      	bne.n	80089de <_strtod_l+0x956>
 8008912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008914:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008918:	b35a      	cbz	r2, 8008972 <_strtod_l+0x8ea>
 800891a:	4a99      	ldr	r2, [pc, #612]	; (8008b80 <_strtod_l+0xaf8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d12b      	bne.n	8008978 <_strtod_l+0x8f0>
 8008920:	9b05      	ldr	r3, [sp, #20]
 8008922:	4641      	mov	r1, r8
 8008924:	b303      	cbz	r3, 8008968 <_strtod_l+0x8e0>
 8008926:	464a      	mov	r2, r9
 8008928:	4b96      	ldr	r3, [pc, #600]	; (8008b84 <_strtod_l+0xafc>)
 800892a:	4013      	ands	r3, r2
 800892c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008930:	f04f 32ff 	mov.w	r2, #4294967295
 8008934:	d81b      	bhi.n	800896e <_strtod_l+0x8e6>
 8008936:	0d1b      	lsrs	r3, r3, #20
 8008938:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	4299      	cmp	r1, r3
 8008942:	d119      	bne.n	8008978 <_strtod_l+0x8f0>
 8008944:	4b90      	ldr	r3, [pc, #576]	; (8008b88 <_strtod_l+0xb00>)
 8008946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008948:	429a      	cmp	r2, r3
 800894a:	d102      	bne.n	8008952 <_strtod_l+0x8ca>
 800894c:	3101      	adds	r1, #1
 800894e:	f43f adda 	beq.w	8008506 <_strtod_l+0x47e>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	4b8b      	ldr	r3, [pc, #556]	; (8008b84 <_strtod_l+0xafc>)
 8008958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800895a:	401a      	ands	r2, r3
 800895c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008960:	9b05      	ldr	r3, [sp, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d19a      	bne.n	800889c <_strtod_l+0x814>
 8008966:	e5d9      	b.n	800851c <_strtod_l+0x494>
 8008968:	f04f 33ff 	mov.w	r3, #4294967295
 800896c:	e7e8      	b.n	8008940 <_strtod_l+0x8b8>
 800896e:	4613      	mov	r3, r2
 8008970:	e7e6      	b.n	8008940 <_strtod_l+0x8b8>
 8008972:	ea53 0308 	orrs.w	r3, r3, r8
 8008976:	d081      	beq.n	800887c <_strtod_l+0x7f4>
 8008978:	b1e5      	cbz	r5, 80089b4 <_strtod_l+0x92c>
 800897a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897c:	421d      	tst	r5, r3
 800897e:	d0ef      	beq.n	8008960 <_strtod_l+0x8d8>
 8008980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	9a05      	ldr	r2, [sp, #20]
 8008988:	b1c3      	cbz	r3, 80089bc <_strtod_l+0x934>
 800898a:	f7ff fb59 	bl	8008040 <sulp>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008996:	f7f7 fbe9 	bl	800016c <__adddf3>
 800899a:	4680      	mov	r8, r0
 800899c:	4689      	mov	r9, r1
 800899e:	e7df      	b.n	8008960 <_strtod_l+0x8d8>
 80089a0:	4013      	ands	r3, r2
 80089a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80089aa:	f04f 38ff 	mov.w	r8, #4294967295
 80089ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80089b2:	e7d5      	b.n	8008960 <_strtod_l+0x8d8>
 80089b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089b6:	ea13 0f08 	tst.w	r3, r8
 80089ba:	e7e0      	b.n	800897e <_strtod_l+0x8f6>
 80089bc:	f7ff fb40 	bl	8008040 <sulp>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089c8:	f7f7 fbce 	bl	8000168 <__aeabi_dsub>
 80089cc:	2200      	movs	r2, #0
 80089ce:	2300      	movs	r3, #0
 80089d0:	4680      	mov	r8, r0
 80089d2:	4689      	mov	r9, r1
 80089d4:	f7f7 ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d0c1      	beq.n	8008960 <_strtod_l+0x8d8>
 80089dc:	e608      	b.n	80085f0 <_strtod_l+0x568>
 80089de:	4658      	mov	r0, fp
 80089e0:	9904      	ldr	r1, [sp, #16]
 80089e2:	f002 f80f 	bl	800aa04 <__ratio>
 80089e6:	2200      	movs	r2, #0
 80089e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ec:	4606      	mov	r6, r0
 80089ee:	460f      	mov	r7, r1
 80089f0:	f7f7 ffee 	bl	80009d0 <__aeabi_dcmple>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d070      	beq.n	8008ada <_strtod_l+0xa52>
 80089f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d042      	beq.n	8008a84 <_strtod_l+0x9fc>
 80089fe:	2600      	movs	r6, #0
 8008a00:	4f62      	ldr	r7, [pc, #392]	; (8008b8c <_strtod_l+0xb04>)
 8008a02:	4d62      	ldr	r5, [pc, #392]	; (8008b8c <_strtod_l+0xb04>)
 8008a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a0a:	0d1b      	lsrs	r3, r3, #20
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a12:	4b5f      	ldr	r3, [pc, #380]	; (8008b90 <_strtod_l+0xb08>)
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f040 80c3 	bne.w	8008ba0 <_strtod_l+0xb18>
 8008a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008a22:	4649      	mov	r1, r9
 8008a24:	f001 ff18 	bl	800a858 <__ulp>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 fd52 	bl	80004d8 <__aeabi_dmul>
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	f7f7 fb98 	bl	800016c <__adddf3>
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4951      	ldr	r1, [pc, #324]	; (8008b84 <_strtod_l+0xafc>)
 8008a40:	4a54      	ldr	r2, [pc, #336]	; (8008b94 <_strtod_l+0xb0c>)
 8008a42:	4019      	ands	r1, r3
 8008a44:	4291      	cmp	r1, r2
 8008a46:	4680      	mov	r8, r0
 8008a48:	d95d      	bls.n	8008b06 <_strtod_l+0xa7e>
 8008a4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a4c:	4b4e      	ldr	r3, [pc, #312]	; (8008b88 <_strtod_l+0xb00>)
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d103      	bne.n	8008a5a <_strtod_l+0x9d2>
 8008a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a54:	3301      	adds	r3, #1
 8008a56:	f43f ad56 	beq.w	8008506 <_strtod_l+0x47e>
 8008a5a:	f04f 38ff 	mov.w	r8, #4294967295
 8008a5e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008b88 <_strtod_l+0xb00>
 8008a62:	4650      	mov	r0, sl
 8008a64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a66:	f001 fbc7 	bl	800a1f8 <_Bfree>
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	9906      	ldr	r1, [sp, #24]
 8008a6e:	f001 fbc3 	bl	800a1f8 <_Bfree>
 8008a72:	4650      	mov	r0, sl
 8008a74:	9904      	ldr	r1, [sp, #16]
 8008a76:	f001 fbbf 	bl	800a1f8 <_Bfree>
 8008a7a:	4659      	mov	r1, fp
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	f001 fbbb 	bl	800a1f8 <_Bfree>
 8008a82:	e627      	b.n	80086d4 <_strtod_l+0x64c>
 8008a84:	f1b8 0f00 	cmp.w	r8, #0
 8008a88:	d119      	bne.n	8008abe <_strtod_l+0xa36>
 8008a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a90:	b9e3      	cbnz	r3, 8008acc <_strtod_l+0xa44>
 8008a92:	2200      	movs	r2, #0
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	4b3c      	ldr	r3, [pc, #240]	; (8008b8c <_strtod_l+0xb04>)
 8008a9a:	f7f7 ff8f 	bl	80009bc <__aeabi_dcmplt>
 8008a9e:	b9c8      	cbnz	r0, 8008ad4 <_strtod_l+0xa4c>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4b3c      	ldr	r3, [pc, #240]	; (8008b98 <_strtod_l+0xb10>)
 8008aa8:	f7f7 fd16 	bl	80004d8 <__aeabi_dmul>
 8008aac:	4604      	mov	r4, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ab4:	9416      	str	r4, [sp, #88]	; 0x58
 8008ab6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ab8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008abc:	e7a2      	b.n	8008a04 <_strtod_l+0x97c>
 8008abe:	f1b8 0f01 	cmp.w	r8, #1
 8008ac2:	d103      	bne.n	8008acc <_strtod_l+0xa44>
 8008ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f43f ad92 	beq.w	80085f0 <_strtod_l+0x568>
 8008acc:	2600      	movs	r6, #0
 8008ace:	2400      	movs	r4, #0
 8008ad0:	4f32      	ldr	r7, [pc, #200]	; (8008b9c <_strtod_l+0xb14>)
 8008ad2:	e796      	b.n	8008a02 <_strtod_l+0x97a>
 8008ad4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008ad6:	4d30      	ldr	r5, [pc, #192]	; (8008b98 <_strtod_l+0xb10>)
 8008ad8:	e7ea      	b.n	8008ab0 <_strtod_l+0xa28>
 8008ada:	4b2f      	ldr	r3, [pc, #188]	; (8008b98 <_strtod_l+0xb10>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fcf9 	bl	80004d8 <__aeabi_dmul>
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	b933      	cbnz	r3, 8008afc <_strtod_l+0xa74>
 8008aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008af2:	9010      	str	r0, [sp, #64]	; 0x40
 8008af4:	9311      	str	r3, [sp, #68]	; 0x44
 8008af6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008afa:	e783      	b.n	8008a04 <_strtod_l+0x97c>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008b04:	e7f7      	b.n	8008af6 <_strtod_l+0xa6e>
 8008b06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1a8      	bne.n	8008a62 <_strtod_l+0x9da>
 8008b10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b16:	0d1b      	lsrs	r3, r3, #20
 8008b18:	051b      	lsls	r3, r3, #20
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d1a1      	bne.n	8008a62 <_strtod_l+0x9da>
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f8 faa5 	bl	8001070 <__aeabi_d2lz>
 8008b26:	f7f7 fca9 	bl	800047c <__aeabi_l2d>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fb19 	bl	8000168 <__aeabi_dsub>
 8008b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b3c:	ea43 0308 	orr.w	r3, r3, r8
 8008b40:	4313      	orrs	r3, r2
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	d066      	beq.n	8008c16 <_strtod_l+0xb8e>
 8008b48:	a309      	add	r3, pc, #36	; (adr r3, 8008b70 <_strtod_l+0xae8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 ff35 	bl	80009bc <__aeabi_dcmplt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f47f ace2 	bne.w	800851c <_strtod_l+0x494>
 8008b58:	a307      	add	r3, pc, #28	; (adr r3, 8008b78 <_strtod_l+0xaf0>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 ff49 	bl	80009f8 <__aeabi_dcmpgt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f af7b 	beq.w	8008a62 <_strtod_l+0x9da>
 8008b6c:	e4d6      	b.n	800851c <_strtod_l+0x494>
 8008b6e:	bf00      	nop
 8008b70:	94a03595 	.word	0x94a03595
 8008b74:	3fdfffff 	.word	0x3fdfffff
 8008b78:	35afe535 	.word	0x35afe535
 8008b7c:	3fe00000 	.word	0x3fe00000
 8008b80:	000fffff 	.word	0x000fffff
 8008b84:	7ff00000 	.word	0x7ff00000
 8008b88:	7fefffff 	.word	0x7fefffff
 8008b8c:	3ff00000 	.word	0x3ff00000
 8008b90:	7fe00000 	.word	0x7fe00000
 8008b94:	7c9fffff 	.word	0x7c9fffff
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	bff00000 	.word	0xbff00000
 8008ba0:	9b05      	ldr	r3, [sp, #20]
 8008ba2:	b313      	cbz	r3, 8008bea <_strtod_l+0xb62>
 8008ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ba6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008baa:	d81e      	bhi.n	8008bea <_strtod_l+0xb62>
 8008bac:	a326      	add	r3, pc, #152	; (adr r3, 8008c48 <_strtod_l+0xbc0>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f7 ff0b 	bl	80009d0 <__aeabi_dcmple>
 8008bba:	b190      	cbz	r0, 8008be2 <_strtod_l+0xb5a>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7f7 ff62 	bl	8000a88 <__aeabi_d2uiz>
 8008bc4:	2801      	cmp	r0, #1
 8008bc6:	bf38      	it	cc
 8008bc8:	2001      	movcc	r0, #1
 8008bca:	f7f7 fc0b 	bl	80003e4 <__aeabi_ui2d>
 8008bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	b9d3      	cbnz	r3, 8008c0c <_strtod_l+0xb84>
 8008bd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bda:	9012      	str	r0, [sp, #72]	; 0x48
 8008bdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bde:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008be2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008be8:	1a9f      	subs	r7, r3, r2
 8008bea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bee:	f001 fe33 	bl	800a858 <__ulp>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fc6d 	bl	80004d8 <__aeabi_dmul>
 8008bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c02:	f7f7 fab3 	bl	800016c <__adddf3>
 8008c06:	4680      	mov	r8, r0
 8008c08:	4689      	mov	r9, r1
 8008c0a:	e77e      	b.n	8008b0a <_strtod_l+0xa82>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008c14:	e7e3      	b.n	8008bde <_strtod_l+0xb56>
 8008c16:	a30e      	add	r3, pc, #56	; (adr r3, 8008c50 <_strtod_l+0xbc8>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fece 	bl	80009bc <__aeabi_dcmplt>
 8008c20:	e7a1      	b.n	8008b66 <_strtod_l+0xade>
 8008c22:	2300      	movs	r3, #0
 8008c24:	930a      	str	r3, [sp, #40]	; 0x28
 8008c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	f7ff ba71 	b.w	8008112 <_strtod_l+0x8a>
 8008c30:	2a65      	cmp	r2, #101	; 0x65
 8008c32:	f43f ab63 	beq.w	80082fc <_strtod_l+0x274>
 8008c36:	2a45      	cmp	r2, #69	; 0x45
 8008c38:	f43f ab60 	beq.w	80082fc <_strtod_l+0x274>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f7ff bb95 	b.w	800836c <_strtod_l+0x2e4>
 8008c42:	bf00      	nop
 8008c44:	f3af 8000 	nop.w
 8008c48:	ffc00000 	.word	0xffc00000
 8008c4c:	41dfffff 	.word	0x41dfffff
 8008c50:	94a03595 	.word	0x94a03595
 8008c54:	3fcfffff 	.word	0x3fcfffff

08008c58 <_strtod_r>:
 8008c58:	4b01      	ldr	r3, [pc, #4]	; (8008c60 <_strtod_r+0x8>)
 8008c5a:	f7ff ba15 	b.w	8008088 <_strtod_l>
 8008c5e:	bf00      	nop
 8008c60:	2000007c 	.word	0x2000007c

08008c64 <_strtol_l.constprop.0>:
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	d001      	beq.n	8008c72 <_strtol_l.constprop.0+0xe>
 8008c6e:	2b24      	cmp	r3, #36	; 0x24
 8008c70:	d906      	bls.n	8008c80 <_strtol_l.constprop.0+0x1c>
 8008c72:	f7fe fb13 	bl	800729c <__errno>
 8008c76:	2316      	movs	r3, #22
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	460d      	mov	r5, r1
 8008c82:	4f35      	ldr	r7, [pc, #212]	; (8008d58 <_strtol_l.constprop.0+0xf4>)
 8008c84:	4628      	mov	r0, r5
 8008c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c8a:	5de6      	ldrb	r6, [r4, r7]
 8008c8c:	f016 0608 	ands.w	r6, r6, #8
 8008c90:	d1f8      	bne.n	8008c84 <_strtol_l.constprop.0+0x20>
 8008c92:	2c2d      	cmp	r4, #45	; 0x2d
 8008c94:	d12f      	bne.n	8008cf6 <_strtol_l.constprop.0+0x92>
 8008c96:	2601      	movs	r6, #1
 8008c98:	782c      	ldrb	r4, [r5, #0]
 8008c9a:	1c85      	adds	r5, r0, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d057      	beq.n	8008d50 <_strtol_l.constprop.0+0xec>
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d109      	bne.n	8008cb8 <_strtol_l.constprop.0+0x54>
 8008ca4:	2c30      	cmp	r4, #48	; 0x30
 8008ca6:	d107      	bne.n	8008cb8 <_strtol_l.constprop.0+0x54>
 8008ca8:	7828      	ldrb	r0, [r5, #0]
 8008caa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008cae:	2858      	cmp	r0, #88	; 0x58
 8008cb0:	d149      	bne.n	8008d46 <_strtol_l.constprop.0+0xe2>
 8008cb2:	2310      	movs	r3, #16
 8008cb4:	786c      	ldrb	r4, [r5, #1]
 8008cb6:	3502      	adds	r5, #2
 8008cb8:	2700      	movs	r7, #0
 8008cba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008cbe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008cc2:	fbbe f9f3 	udiv	r9, lr, r3
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	fb03 ea19 	mls	sl, r3, r9, lr
 8008ccc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008cd0:	f1bc 0f09 	cmp.w	ip, #9
 8008cd4:	d814      	bhi.n	8008d00 <_strtol_l.constprop.0+0x9c>
 8008cd6:	4664      	mov	r4, ip
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	dd22      	ble.n	8008d22 <_strtol_l.constprop.0+0xbe>
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	db1d      	blt.n	8008d1c <_strtol_l.constprop.0+0xb8>
 8008ce0:	4581      	cmp	r9, r0
 8008ce2:	d31b      	bcc.n	8008d1c <_strtol_l.constprop.0+0xb8>
 8008ce4:	d101      	bne.n	8008cea <_strtol_l.constprop.0+0x86>
 8008ce6:	45a2      	cmp	sl, r4
 8008ce8:	db18      	blt.n	8008d1c <_strtol_l.constprop.0+0xb8>
 8008cea:	2701      	movs	r7, #1
 8008cec:	fb00 4003 	mla	r0, r0, r3, r4
 8008cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf4:	e7ea      	b.n	8008ccc <_strtol_l.constprop.0+0x68>
 8008cf6:	2c2b      	cmp	r4, #43	; 0x2b
 8008cf8:	bf04      	itt	eq
 8008cfa:	782c      	ldrbeq	r4, [r5, #0]
 8008cfc:	1c85      	addeq	r5, r0, #2
 8008cfe:	e7cd      	b.n	8008c9c <_strtol_l.constprop.0+0x38>
 8008d00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008d04:	f1bc 0f19 	cmp.w	ip, #25
 8008d08:	d801      	bhi.n	8008d0e <_strtol_l.constprop.0+0xaa>
 8008d0a:	3c37      	subs	r4, #55	; 0x37
 8008d0c:	e7e4      	b.n	8008cd8 <_strtol_l.constprop.0+0x74>
 8008d0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008d12:	f1bc 0f19 	cmp.w	ip, #25
 8008d16:	d804      	bhi.n	8008d22 <_strtol_l.constprop.0+0xbe>
 8008d18:	3c57      	subs	r4, #87	; 0x57
 8008d1a:	e7dd      	b.n	8008cd8 <_strtol_l.constprop.0+0x74>
 8008d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008d20:	e7e6      	b.n	8008cf0 <_strtol_l.constprop.0+0x8c>
 8008d22:	2f00      	cmp	r7, #0
 8008d24:	da07      	bge.n	8008d36 <_strtol_l.constprop.0+0xd2>
 8008d26:	2322      	movs	r3, #34	; 0x22
 8008d28:	4670      	mov	r0, lr
 8008d2a:	f8c8 3000 	str.w	r3, [r8]
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d0a4      	beq.n	8008c7c <_strtol_l.constprop.0+0x18>
 8008d32:	1e69      	subs	r1, r5, #1
 8008d34:	e005      	b.n	8008d42 <_strtol_l.constprop.0+0xde>
 8008d36:	b106      	cbz	r6, 8008d3a <_strtol_l.constprop.0+0xd6>
 8008d38:	4240      	negs	r0, r0
 8008d3a:	2a00      	cmp	r2, #0
 8008d3c:	d09e      	beq.n	8008c7c <_strtol_l.constprop.0+0x18>
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	d1f7      	bne.n	8008d32 <_strtol_l.constprop.0+0xce>
 8008d42:	6011      	str	r1, [r2, #0]
 8008d44:	e79a      	b.n	8008c7c <_strtol_l.constprop.0+0x18>
 8008d46:	2430      	movs	r4, #48	; 0x30
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1b5      	bne.n	8008cb8 <_strtol_l.constprop.0+0x54>
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	e7b3      	b.n	8008cb8 <_strtol_l.constprop.0+0x54>
 8008d50:	2c30      	cmp	r4, #48	; 0x30
 8008d52:	d0a9      	beq.n	8008ca8 <_strtol_l.constprop.0+0x44>
 8008d54:	230a      	movs	r3, #10
 8008d56:	e7af      	b.n	8008cb8 <_strtol_l.constprop.0+0x54>
 8008d58:	0800bd39 	.word	0x0800bd39

08008d5c <_strtol_r>:
 8008d5c:	f7ff bf82 	b.w	8008c64 <_strtol_l.constprop.0>

08008d60 <quorem>:
 8008d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	6903      	ldr	r3, [r0, #16]
 8008d66:	690c      	ldr	r4, [r1, #16]
 8008d68:	4607      	mov	r7, r0
 8008d6a:	42a3      	cmp	r3, r4
 8008d6c:	f2c0 8082 	blt.w	8008e74 <quorem+0x114>
 8008d70:	3c01      	subs	r4, #1
 8008d72:	f100 0514 	add.w	r5, r0, #20
 8008d76:	f101 0814 	add.w	r8, r1, #20
 8008d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d98:	d331      	bcc.n	8008dfe <quorem+0x9e>
 8008d9a:	f04f 0e00 	mov.w	lr, #0
 8008d9e:	4640      	mov	r0, r8
 8008da0:	46ac      	mov	ip, r5
 8008da2:	46f2      	mov	sl, lr
 8008da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008da8:	b293      	uxth	r3, r2
 8008daa:	fb06 e303 	mla	r3, r6, r3, lr
 8008dae:	0c12      	lsrs	r2, r2, #16
 8008db0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	fb06 e202 	mla	r2, r6, r2, lr
 8008dba:	ebaa 0303 	sub.w	r3, sl, r3
 8008dbe:	f8dc a000 	ldr.w	sl, [ip]
 8008dc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dc6:	fa1f fa8a 	uxth.w	sl, sl
 8008dca:	4453      	add	r3, sl
 8008dcc:	f8dc a000 	ldr.w	sl, [ip]
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008dd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de0:	4581      	cmp	r9, r0
 8008de2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008de6:	f84c 3b04 	str.w	r3, [ip], #4
 8008dea:	d2db      	bcs.n	8008da4 <quorem+0x44>
 8008dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8008df0:	b92b      	cbnz	r3, 8008dfe <quorem+0x9e>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	3b04      	subs	r3, #4
 8008df6:	429d      	cmp	r5, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	d32f      	bcc.n	8008e5c <quorem+0xfc>
 8008dfc:	613c      	str	r4, [r7, #16]
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f001 fc82 	bl	800a708 <__mcmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	db25      	blt.n	8008e54 <quorem+0xf4>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f04f 0c00 	mov.w	ip, #0
 8008e0e:	3601      	adds	r6, #1
 8008e10:	f858 1b04 	ldr.w	r1, [r8], #4
 8008e14:	f8d0 e000 	ldr.w	lr, [r0]
 8008e18:	b28b      	uxth	r3, r1
 8008e1a:	ebac 0303 	sub.w	r3, ip, r3
 8008e1e:	fa1f f28e 	uxth.w	r2, lr
 8008e22:	4413      	add	r3, r2
 8008e24:	0c0a      	lsrs	r2, r1, #16
 8008e26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e34:	45c1      	cmp	r9, r8
 8008e36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e3a:	f840 3b04 	str.w	r3, [r0], #4
 8008e3e:	d2e7      	bcs.n	8008e10 <quorem+0xb0>
 8008e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e48:	b922      	cbnz	r2, 8008e54 <quorem+0xf4>
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	429d      	cmp	r5, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	d30a      	bcc.n	8008e68 <quorem+0x108>
 8008e52:	613c      	str	r4, [r7, #16]
 8008e54:	4630      	mov	r0, r6
 8008e56:	b003      	add	sp, #12
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	6812      	ldr	r2, [r2, #0]
 8008e5e:	3b04      	subs	r3, #4
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d1cb      	bne.n	8008dfc <quorem+0x9c>
 8008e64:	3c01      	subs	r4, #1
 8008e66:	e7c6      	b.n	8008df6 <quorem+0x96>
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	3b04      	subs	r3, #4
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	d1f0      	bne.n	8008e52 <quorem+0xf2>
 8008e70:	3c01      	subs	r4, #1
 8008e72:	e7eb      	b.n	8008e4c <quorem+0xec>
 8008e74:	2000      	movs	r0, #0
 8008e76:	e7ee      	b.n	8008e56 <quorem+0xf6>

08008e78 <_dtoa_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	4616      	mov	r6, r2
 8008e7e:	461f      	mov	r7, r3
 8008e80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e82:	b099      	sub	sp, #100	; 0x64
 8008e84:	4605      	mov	r5, r0
 8008e86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008e8e:	b974      	cbnz	r4, 8008eae <_dtoa_r+0x36>
 8008e90:	2010      	movs	r0, #16
 8008e92:	f001 f949 	bl	800a128 <malloc>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6268      	str	r0, [r5, #36]	; 0x24
 8008e9a:	b920      	cbnz	r0, 8008ea6 <_dtoa_r+0x2e>
 8008e9c:	21ea      	movs	r1, #234	; 0xea
 8008e9e:	4ba8      	ldr	r3, [pc, #672]	; (8009140 <_dtoa_r+0x2c8>)
 8008ea0:	48a8      	ldr	r0, [pc, #672]	; (8009144 <_dtoa_r+0x2cc>)
 8008ea2:	f002 f8a5 	bl	800aff0 <__assert_func>
 8008ea6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008eaa:	6004      	str	r4, [r0, #0]
 8008eac:	60c4      	str	r4, [r0, #12]
 8008eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008eb0:	6819      	ldr	r1, [r3, #0]
 8008eb2:	b151      	cbz	r1, 8008eca <_dtoa_r+0x52>
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4093      	lsls	r3, r2
 8008eba:	604a      	str	r2, [r1, #4]
 8008ebc:	608b      	str	r3, [r1, #8]
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f001 f99a 	bl	800a1f8 <_Bfree>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	1e3b      	subs	r3, r7, #0
 8008ecc:	bfaf      	iteee	ge
 8008ece:	2300      	movge	r3, #0
 8008ed0:	2201      	movlt	r2, #1
 8008ed2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ed6:	9305      	strlt	r3, [sp, #20]
 8008ed8:	bfa8      	it	ge
 8008eda:	f8c8 3000 	strge.w	r3, [r8]
 8008ede:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008ee2:	4b99      	ldr	r3, [pc, #612]	; (8009148 <_dtoa_r+0x2d0>)
 8008ee4:	bfb8      	it	lt
 8008ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8008eea:	ea33 0309 	bics.w	r3, r3, r9
 8008eee:	d119      	bne.n	8008f24 <_dtoa_r+0xac>
 8008ef0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ef4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008efc:	4333      	orrs	r3, r6
 8008efe:	f000 857f 	beq.w	8009a00 <_dtoa_r+0xb88>
 8008f02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f04:	b953      	cbnz	r3, 8008f1c <_dtoa_r+0xa4>
 8008f06:	4b91      	ldr	r3, [pc, #580]	; (800914c <_dtoa_r+0x2d4>)
 8008f08:	e022      	b.n	8008f50 <_dtoa_r+0xd8>
 8008f0a:	4b91      	ldr	r3, [pc, #580]	; (8009150 <_dtoa_r+0x2d8>)
 8008f0c:	9303      	str	r3, [sp, #12]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	9803      	ldr	r0, [sp, #12]
 8008f16:	b019      	add	sp, #100	; 0x64
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	4b8b      	ldr	r3, [pc, #556]	; (800914c <_dtoa_r+0x2d4>)
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	3303      	adds	r3, #3
 8008f22:	e7f5      	b.n	8008f10 <_dtoa_r+0x98>
 8008f24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f30:	2200      	movs	r2, #0
 8008f32:	2300      	movs	r3, #0
 8008f34:	f7f7 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8008f38:	4680      	mov	r8, r0
 8008f3a:	b158      	cbz	r0, 8008f54 <_dtoa_r+0xdc>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8558 	beq.w	80099fa <_dtoa_r+0xb82>
 8008f4a:	4882      	ldr	r0, [pc, #520]	; (8009154 <_dtoa_r+0x2dc>)
 8008f4c:	6018      	str	r0, [r3, #0]
 8008f4e:	1e43      	subs	r3, r0, #1
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	e7df      	b.n	8008f14 <_dtoa_r+0x9c>
 8008f54:	ab16      	add	r3, sp, #88	; 0x58
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	ab17      	add	r3, sp, #92	; 0x5c
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f62:	f001 fcf3 	bl	800a94c <__d2b>
 8008f66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008f6a:	4683      	mov	fp, r0
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d07f      	beq.n	8009070 <_dtoa_r+0x1f8>
 8008f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008f82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008f86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4b72      	ldr	r3, [pc, #456]	; (8009158 <_dtoa_r+0x2e0>)
 8008f8e:	f7f7 f8eb 	bl	8000168 <__aeabi_dsub>
 8008f92:	a365      	add	r3, pc, #404	; (adr r3, 8009128 <_dtoa_r+0x2b0>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	a364      	add	r3, pc, #400	; (adr r3, 8009130 <_dtoa_r+0x2b8>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f8e3 	bl	800016c <__adddf3>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	4620      	mov	r0, r4
 8008faa:	460f      	mov	r7, r1
 8008fac:	f7f7 fa2a 	bl	8000404 <__aeabi_i2d>
 8008fb0:	a361      	add	r3, pc, #388	; (adr r3, 8009138 <_dtoa_r+0x2c0>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 fa8f 	bl	80004d8 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 f8d3 	bl	800016c <__adddf3>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460f      	mov	r7, r1
 8008fca:	f7f7 fd35 	bl	8000a38 <__aeabi_d2iz>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fcf0 	bl	80009bc <__aeabi_dcmplt>
 8008fdc:	b148      	cbz	r0, 8008ff2 <_dtoa_r+0x17a>
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f7f7 fa10 	bl	8000404 <__aeabi_i2d>
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	f7f7 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8008fec:	b908      	cbnz	r0, 8008ff2 <_dtoa_r+0x17a>
 8008fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ff2:	f1ba 0f16 	cmp.w	sl, #22
 8008ff6:	d858      	bhi.n	80090aa <_dtoa_r+0x232>
 8008ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ffc:	4b57      	ldr	r3, [pc, #348]	; (800915c <_dtoa_r+0x2e4>)
 8008ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	f7f7 fcd9 	bl	80009bc <__aeabi_dcmplt>
 800900a:	2800      	cmp	r0, #0
 800900c:	d04f      	beq.n	80090ae <_dtoa_r+0x236>
 800900e:	2300      	movs	r3, #0
 8009010:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009014:	930f      	str	r3, [sp, #60]	; 0x3c
 8009016:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009018:	1b1c      	subs	r4, r3, r4
 800901a:	1e63      	subs	r3, r4, #1
 800901c:	9309      	str	r3, [sp, #36]	; 0x24
 800901e:	bf49      	itett	mi
 8009020:	f1c4 0301 	rsbmi	r3, r4, #1
 8009024:	2300      	movpl	r3, #0
 8009026:	9306      	strmi	r3, [sp, #24]
 8009028:	2300      	movmi	r3, #0
 800902a:	bf54      	ite	pl
 800902c:	9306      	strpl	r3, [sp, #24]
 800902e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009030:	f1ba 0f00 	cmp.w	sl, #0
 8009034:	db3d      	blt.n	80090b2 <_dtoa_r+0x23a>
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800903c:	4453      	add	r3, sl
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	2300      	movs	r3, #0
 8009042:	930a      	str	r3, [sp, #40]	; 0x28
 8009044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009046:	2b09      	cmp	r3, #9
 8009048:	f200 808c 	bhi.w	8009164 <_dtoa_r+0x2ec>
 800904c:	2b05      	cmp	r3, #5
 800904e:	bfc4      	itt	gt
 8009050:	3b04      	subgt	r3, #4
 8009052:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009056:	bfc8      	it	gt
 8009058:	2400      	movgt	r4, #0
 800905a:	f1a3 0302 	sub.w	r3, r3, #2
 800905e:	bfd8      	it	le
 8009060:	2401      	movle	r4, #1
 8009062:	2b03      	cmp	r3, #3
 8009064:	f200 808a 	bhi.w	800917c <_dtoa_r+0x304>
 8009068:	e8df f003 	tbb	[pc, r3]
 800906c:	5b4d4f2d 	.word	0x5b4d4f2d
 8009070:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009074:	441c      	add	r4, r3
 8009076:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800907a:	2b20      	cmp	r3, #32
 800907c:	bfc3      	ittte	gt
 800907e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009082:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009086:	fa09 f303 	lslgt.w	r3, r9, r3
 800908a:	f1c3 0320 	rsble	r3, r3, #32
 800908e:	bfc6      	itte	gt
 8009090:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009094:	4318      	orrgt	r0, r3
 8009096:	fa06 f003 	lslle.w	r0, r6, r3
 800909a:	f7f7 f9a3 	bl	80003e4 <__aeabi_ui2d>
 800909e:	2301      	movs	r3, #1
 80090a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80090a4:	3c01      	subs	r4, #1
 80090a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80090a8:	e76f      	b.n	8008f8a <_dtoa_r+0x112>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e7b2      	b.n	8009014 <_dtoa_r+0x19c>
 80090ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80090b0:	e7b1      	b.n	8009016 <_dtoa_r+0x19e>
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	eba3 030a 	sub.w	r3, r3, sl
 80090b8:	9306      	str	r3, [sp, #24]
 80090ba:	f1ca 0300 	rsb	r3, sl, #0
 80090be:	930a      	str	r3, [sp, #40]	; 0x28
 80090c0:	2300      	movs	r3, #0
 80090c2:	930e      	str	r3, [sp, #56]	; 0x38
 80090c4:	e7be      	b.n	8009044 <_dtoa_r+0x1cc>
 80090c6:	2300      	movs	r3, #0
 80090c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dc58      	bgt.n	8009182 <_dtoa_r+0x30a>
 80090d0:	f04f 0901 	mov.w	r9, #1
 80090d4:	464b      	mov	r3, r9
 80090d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80090da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80090de:	2200      	movs	r2, #0
 80090e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090e2:	6042      	str	r2, [r0, #4]
 80090e4:	2204      	movs	r2, #4
 80090e6:	f102 0614 	add.w	r6, r2, #20
 80090ea:	429e      	cmp	r6, r3
 80090ec:	6841      	ldr	r1, [r0, #4]
 80090ee:	d94e      	bls.n	800918e <_dtoa_r+0x316>
 80090f0:	4628      	mov	r0, r5
 80090f2:	f001 f841 	bl	800a178 <_Balloc>
 80090f6:	9003      	str	r0, [sp, #12]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d14c      	bne.n	8009196 <_dtoa_r+0x31e>
 80090fc:	4602      	mov	r2, r0
 80090fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009102:	4b17      	ldr	r3, [pc, #92]	; (8009160 <_dtoa_r+0x2e8>)
 8009104:	e6cc      	b.n	8008ea0 <_dtoa_r+0x28>
 8009106:	2301      	movs	r3, #1
 8009108:	e7de      	b.n	80090c8 <_dtoa_r+0x250>
 800910a:	2300      	movs	r3, #0
 800910c:	930b      	str	r3, [sp, #44]	; 0x2c
 800910e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009110:	eb0a 0903 	add.w	r9, sl, r3
 8009114:	f109 0301 	add.w	r3, r9, #1
 8009118:	2b01      	cmp	r3, #1
 800911a:	9308      	str	r3, [sp, #32]
 800911c:	bfb8      	it	lt
 800911e:	2301      	movlt	r3, #1
 8009120:	e7dd      	b.n	80090de <_dtoa_r+0x266>
 8009122:	2301      	movs	r3, #1
 8009124:	e7f2      	b.n	800910c <_dtoa_r+0x294>
 8009126:	bf00      	nop
 8009128:	636f4361 	.word	0x636f4361
 800912c:	3fd287a7 	.word	0x3fd287a7
 8009130:	8b60c8b3 	.word	0x8b60c8b3
 8009134:	3fc68a28 	.word	0x3fc68a28
 8009138:	509f79fb 	.word	0x509f79fb
 800913c:	3fd34413 	.word	0x3fd34413
 8009140:	0800be46 	.word	0x0800be46
 8009144:	0800be5d 	.word	0x0800be5d
 8009148:	7ff00000 	.word	0x7ff00000
 800914c:	0800be42 	.word	0x0800be42
 8009150:	0800be39 	.word	0x0800be39
 8009154:	0800bcb9 	.word	0x0800bcb9
 8009158:	3ff80000 	.word	0x3ff80000
 800915c:	0800bfc8 	.word	0x0800bfc8
 8009160:	0800beb8 	.word	0x0800beb8
 8009164:	2401      	movs	r4, #1
 8009166:	2300      	movs	r3, #0
 8009168:	940b      	str	r4, [sp, #44]	; 0x2c
 800916a:	9322      	str	r3, [sp, #136]	; 0x88
 800916c:	f04f 39ff 	mov.w	r9, #4294967295
 8009170:	2200      	movs	r2, #0
 8009172:	2312      	movs	r3, #18
 8009174:	f8cd 9020 	str.w	r9, [sp, #32]
 8009178:	9223      	str	r2, [sp, #140]	; 0x8c
 800917a:	e7b0      	b.n	80090de <_dtoa_r+0x266>
 800917c:	2301      	movs	r3, #1
 800917e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009180:	e7f4      	b.n	800916c <_dtoa_r+0x2f4>
 8009182:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009186:	464b      	mov	r3, r9
 8009188:	f8cd 9020 	str.w	r9, [sp, #32]
 800918c:	e7a7      	b.n	80090de <_dtoa_r+0x266>
 800918e:	3101      	adds	r1, #1
 8009190:	6041      	str	r1, [r0, #4]
 8009192:	0052      	lsls	r2, r2, #1
 8009194:	e7a7      	b.n	80090e6 <_dtoa_r+0x26e>
 8009196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009198:	9a03      	ldr	r2, [sp, #12]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	9b08      	ldr	r3, [sp, #32]
 800919e:	2b0e      	cmp	r3, #14
 80091a0:	f200 80a8 	bhi.w	80092f4 <_dtoa_r+0x47c>
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	f000 80a5 	beq.w	80092f4 <_dtoa_r+0x47c>
 80091aa:	f1ba 0f00 	cmp.w	sl, #0
 80091ae:	dd34      	ble.n	800921a <_dtoa_r+0x3a2>
 80091b0:	4a9a      	ldr	r2, [pc, #616]	; (800941c <_dtoa_r+0x5a4>)
 80091b2:	f00a 030f 	and.w	r3, sl, #15
 80091b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80091be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80091c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80091ca:	d016      	beq.n	80091fa <_dtoa_r+0x382>
 80091cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091d0:	4b93      	ldr	r3, [pc, #588]	; (8009420 <_dtoa_r+0x5a8>)
 80091d2:	2703      	movs	r7, #3
 80091d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091d8:	f7f7 faa8 	bl	800072c <__aeabi_ddiv>
 80091dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091e0:	f004 040f 	and.w	r4, r4, #15
 80091e4:	4e8e      	ldr	r6, [pc, #568]	; (8009420 <_dtoa_r+0x5a8>)
 80091e6:	b954      	cbnz	r4, 80091fe <_dtoa_r+0x386>
 80091e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f0:	f7f7 fa9c 	bl	800072c <__aeabi_ddiv>
 80091f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091f8:	e029      	b.n	800924e <_dtoa_r+0x3d6>
 80091fa:	2702      	movs	r7, #2
 80091fc:	e7f2      	b.n	80091e4 <_dtoa_r+0x36c>
 80091fe:	07e1      	lsls	r1, r4, #31
 8009200:	d508      	bpl.n	8009214 <_dtoa_r+0x39c>
 8009202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009206:	e9d6 2300 	ldrd	r2, r3, [r6]
 800920a:	f7f7 f965 	bl	80004d8 <__aeabi_dmul>
 800920e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009212:	3701      	adds	r7, #1
 8009214:	1064      	asrs	r4, r4, #1
 8009216:	3608      	adds	r6, #8
 8009218:	e7e5      	b.n	80091e6 <_dtoa_r+0x36e>
 800921a:	f000 80a5 	beq.w	8009368 <_dtoa_r+0x4f0>
 800921e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009222:	f1ca 0400 	rsb	r4, sl, #0
 8009226:	4b7d      	ldr	r3, [pc, #500]	; (800941c <_dtoa_r+0x5a4>)
 8009228:	f004 020f 	and.w	r2, r4, #15
 800922c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f7f7 f950 	bl	80004d8 <__aeabi_dmul>
 8009238:	2702      	movs	r7, #2
 800923a:	2300      	movs	r3, #0
 800923c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009240:	4e77      	ldr	r6, [pc, #476]	; (8009420 <_dtoa_r+0x5a8>)
 8009242:	1124      	asrs	r4, r4, #4
 8009244:	2c00      	cmp	r4, #0
 8009246:	f040 8084 	bne.w	8009352 <_dtoa_r+0x4da>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1d2      	bne.n	80091f4 <_dtoa_r+0x37c>
 800924e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 808b 	beq.w	800936c <_dtoa_r+0x4f4>
 8009256:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800925a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800925e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009262:	2200      	movs	r2, #0
 8009264:	4b6f      	ldr	r3, [pc, #444]	; (8009424 <_dtoa_r+0x5ac>)
 8009266:	f7f7 fba9 	bl	80009bc <__aeabi_dcmplt>
 800926a:	2800      	cmp	r0, #0
 800926c:	d07e      	beq.n	800936c <_dtoa_r+0x4f4>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d07b      	beq.n	800936c <_dtoa_r+0x4f4>
 8009274:	f1b9 0f00 	cmp.w	r9, #0
 8009278:	dd38      	ble.n	80092ec <_dtoa_r+0x474>
 800927a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800927e:	2200      	movs	r2, #0
 8009280:	4b69      	ldr	r3, [pc, #420]	; (8009428 <_dtoa_r+0x5b0>)
 8009282:	f7f7 f929 	bl	80004d8 <__aeabi_dmul>
 8009286:	464c      	mov	r4, r9
 8009288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800928c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009290:	3701      	adds	r7, #1
 8009292:	4638      	mov	r0, r7
 8009294:	f7f7 f8b6 	bl	8000404 <__aeabi_i2d>
 8009298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929c:	f7f7 f91c 	bl	80004d8 <__aeabi_dmul>
 80092a0:	2200      	movs	r2, #0
 80092a2:	4b62      	ldr	r3, [pc, #392]	; (800942c <_dtoa_r+0x5b4>)
 80092a4:	f7f6 ff62 	bl	800016c <__adddf3>
 80092a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092b0:	9611      	str	r6, [sp, #68]	; 0x44
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d15d      	bne.n	8009372 <_dtoa_r+0x4fa>
 80092b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b5c      	ldr	r3, [pc, #368]	; (8009430 <_dtoa_r+0x5b8>)
 80092be:	f7f6 ff53 	bl	8000168 <__aeabi_dsub>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092ca:	4633      	mov	r3, r6
 80092cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092ce:	f7f7 fb93 	bl	80009f8 <__aeabi_dcmpgt>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f040 829c 	bne.w	8009810 <_dtoa_r+0x998>
 80092d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092e2:	f7f7 fb6b 	bl	80009bc <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f040 8290 	bne.w	800980c <_dtoa_r+0x994>
 80092ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80092f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80092f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f2c0 8152 	blt.w	80095a0 <_dtoa_r+0x728>
 80092fc:	f1ba 0f0e 	cmp.w	sl, #14
 8009300:	f300 814e 	bgt.w	80095a0 <_dtoa_r+0x728>
 8009304:	4b45      	ldr	r3, [pc, #276]	; (800941c <_dtoa_r+0x5a4>)
 8009306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800930a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800930e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f280 80db 	bge.w	80094d0 <_dtoa_r+0x658>
 800931a:	9b08      	ldr	r3, [sp, #32]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f300 80d7 	bgt.w	80094d0 <_dtoa_r+0x658>
 8009322:	f040 8272 	bne.w	800980a <_dtoa_r+0x992>
 8009326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800932a:	2200      	movs	r2, #0
 800932c:	4b40      	ldr	r3, [pc, #256]	; (8009430 <_dtoa_r+0x5b8>)
 800932e:	f7f7 f8d3 	bl	80004d8 <__aeabi_dmul>
 8009332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009336:	f7f7 fb55 	bl	80009e4 <__aeabi_dcmpge>
 800933a:	9c08      	ldr	r4, [sp, #32]
 800933c:	4626      	mov	r6, r4
 800933e:	2800      	cmp	r0, #0
 8009340:	f040 8248 	bne.w	80097d4 <_dtoa_r+0x95c>
 8009344:	2331      	movs	r3, #49	; 0x31
 8009346:	9f03      	ldr	r7, [sp, #12]
 8009348:	f10a 0a01 	add.w	sl, sl, #1
 800934c:	f807 3b01 	strb.w	r3, [r7], #1
 8009350:	e244      	b.n	80097dc <_dtoa_r+0x964>
 8009352:	07e2      	lsls	r2, r4, #31
 8009354:	d505      	bpl.n	8009362 <_dtoa_r+0x4ea>
 8009356:	e9d6 2300 	ldrd	r2, r3, [r6]
 800935a:	f7f7 f8bd 	bl	80004d8 <__aeabi_dmul>
 800935e:	2301      	movs	r3, #1
 8009360:	3701      	adds	r7, #1
 8009362:	1064      	asrs	r4, r4, #1
 8009364:	3608      	adds	r6, #8
 8009366:	e76d      	b.n	8009244 <_dtoa_r+0x3cc>
 8009368:	2702      	movs	r7, #2
 800936a:	e770      	b.n	800924e <_dtoa_r+0x3d6>
 800936c:	46d0      	mov	r8, sl
 800936e:	9c08      	ldr	r4, [sp, #32]
 8009370:	e78f      	b.n	8009292 <_dtoa_r+0x41a>
 8009372:	9903      	ldr	r1, [sp, #12]
 8009374:	4b29      	ldr	r3, [pc, #164]	; (800941c <_dtoa_r+0x5a4>)
 8009376:	4421      	add	r1, r4
 8009378:	9112      	str	r1, [sp, #72]	; 0x48
 800937a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800937c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009380:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009384:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009388:	2900      	cmp	r1, #0
 800938a:	d055      	beq.n	8009438 <_dtoa_r+0x5c0>
 800938c:	2000      	movs	r0, #0
 800938e:	4929      	ldr	r1, [pc, #164]	; (8009434 <_dtoa_r+0x5bc>)
 8009390:	f7f7 f9cc 	bl	800072c <__aeabi_ddiv>
 8009394:	463b      	mov	r3, r7
 8009396:	4632      	mov	r2, r6
 8009398:	f7f6 fee6 	bl	8000168 <__aeabi_dsub>
 800939c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093a0:	9f03      	ldr	r7, [sp, #12]
 80093a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a6:	f7f7 fb47 	bl	8000a38 <__aeabi_d2iz>
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7f7 f82a 	bl	8000404 <__aeabi_i2d>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093b8:	f7f6 fed6 	bl	8000168 <__aeabi_dsub>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	3430      	adds	r4, #48	; 0x30
 80093c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093ca:	f807 4b01 	strb.w	r4, [r7], #1
 80093ce:	f7f7 faf5 	bl	80009bc <__aeabi_dcmplt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d174      	bne.n	80094c0 <_dtoa_r+0x648>
 80093d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093da:	2000      	movs	r0, #0
 80093dc:	4911      	ldr	r1, [pc, #68]	; (8009424 <_dtoa_r+0x5ac>)
 80093de:	f7f6 fec3 	bl	8000168 <__aeabi_dsub>
 80093e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093e6:	f7f7 fae9 	bl	80009bc <__aeabi_dcmplt>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	f040 80b7 	bne.w	800955e <_dtoa_r+0x6e6>
 80093f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093f2:	429f      	cmp	r7, r3
 80093f4:	f43f af7a 	beq.w	80092ec <_dtoa_r+0x474>
 80093f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093fc:	2200      	movs	r2, #0
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <_dtoa_r+0x5b0>)
 8009400:	f7f7 f86a 	bl	80004d8 <__aeabi_dmul>
 8009404:	2200      	movs	r2, #0
 8009406:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800940a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <_dtoa_r+0x5b0>)
 8009410:	f7f7 f862 	bl	80004d8 <__aeabi_dmul>
 8009414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009418:	e7c3      	b.n	80093a2 <_dtoa_r+0x52a>
 800941a:	bf00      	nop
 800941c:	0800bfc8 	.word	0x0800bfc8
 8009420:	0800bfa0 	.word	0x0800bfa0
 8009424:	3ff00000 	.word	0x3ff00000
 8009428:	40240000 	.word	0x40240000
 800942c:	401c0000 	.word	0x401c0000
 8009430:	40140000 	.word	0x40140000
 8009434:	3fe00000 	.word	0x3fe00000
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f7 f84c 	bl	80004d8 <__aeabi_dmul>
 8009440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009442:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009446:	9c03      	ldr	r4, [sp, #12]
 8009448:	9314      	str	r3, [sp, #80]	; 0x50
 800944a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800944e:	f7f7 faf3 	bl	8000a38 <__aeabi_d2iz>
 8009452:	9015      	str	r0, [sp, #84]	; 0x54
 8009454:	f7f6 ffd6 	bl	8000404 <__aeabi_i2d>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009460:	f7f6 fe82 	bl	8000168 <__aeabi_dsub>
 8009464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009466:	4606      	mov	r6, r0
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	f804 3b01 	strb.w	r3, [r4], #1
 800946e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009470:	460f      	mov	r7, r1
 8009472:	429c      	cmp	r4, r3
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	d124      	bne.n	80094c4 <_dtoa_r+0x64c>
 800947a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800947e:	4bb0      	ldr	r3, [pc, #704]	; (8009740 <_dtoa_r+0x8c8>)
 8009480:	f7f6 fe74 	bl	800016c <__adddf3>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f7 fab4 	bl	80009f8 <__aeabi_dcmpgt>
 8009490:	2800      	cmp	r0, #0
 8009492:	d163      	bne.n	800955c <_dtoa_r+0x6e4>
 8009494:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009498:	2000      	movs	r0, #0
 800949a:	49a9      	ldr	r1, [pc, #676]	; (8009740 <_dtoa_r+0x8c8>)
 800949c:	f7f6 fe64 	bl	8000168 <__aeabi_dsub>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f7 fa88 	bl	80009bc <__aeabi_dcmplt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f43f af1d 	beq.w	80092ec <_dtoa_r+0x474>
 80094b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80094b4:	1e7b      	subs	r3, r7, #1
 80094b6:	9314      	str	r3, [sp, #80]	; 0x50
 80094b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80094bc:	2b30      	cmp	r3, #48	; 0x30
 80094be:	d0f8      	beq.n	80094b2 <_dtoa_r+0x63a>
 80094c0:	46c2      	mov	sl, r8
 80094c2:	e03b      	b.n	800953c <_dtoa_r+0x6c4>
 80094c4:	4b9f      	ldr	r3, [pc, #636]	; (8009744 <_dtoa_r+0x8cc>)
 80094c6:	f7f7 f807 	bl	80004d8 <__aeabi_dmul>
 80094ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ce:	e7bc      	b.n	800944a <_dtoa_r+0x5d2>
 80094d0:	9f03      	ldr	r7, [sp, #12]
 80094d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80094d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f925 	bl	800072c <__aeabi_ddiv>
 80094e2:	f7f7 faa9 	bl	8000a38 <__aeabi_d2iz>
 80094e6:	4604      	mov	r4, r0
 80094e8:	f7f6 ff8c 	bl	8000404 <__aeabi_i2d>
 80094ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094f0:	f7f6 fff2 	bl	80004d8 <__aeabi_dmul>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f6 fe34 	bl	8000168 <__aeabi_dsub>
 8009500:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009504:	f807 6b01 	strb.w	r6, [r7], #1
 8009508:	9e03      	ldr	r6, [sp, #12]
 800950a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800950e:	1bbe      	subs	r6, r7, r6
 8009510:	45b4      	cmp	ip, r6
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	d136      	bne.n	8009586 <_dtoa_r+0x70e>
 8009518:	f7f6 fe28 	bl	800016c <__adddf3>
 800951c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009520:	4680      	mov	r8, r0
 8009522:	4689      	mov	r9, r1
 8009524:	f7f7 fa68 	bl	80009f8 <__aeabi_dcmpgt>
 8009528:	bb58      	cbnz	r0, 8009582 <_dtoa_r+0x70a>
 800952a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800952e:	4640      	mov	r0, r8
 8009530:	4649      	mov	r1, r9
 8009532:	f7f7 fa39 	bl	80009a8 <__aeabi_dcmpeq>
 8009536:	b108      	cbz	r0, 800953c <_dtoa_r+0x6c4>
 8009538:	07e1      	lsls	r1, r4, #31
 800953a:	d422      	bmi.n	8009582 <_dtoa_r+0x70a>
 800953c:	4628      	mov	r0, r5
 800953e:	4659      	mov	r1, fp
 8009540:	f000 fe5a 	bl	800a1f8 <_Bfree>
 8009544:	2300      	movs	r3, #0
 8009546:	703b      	strb	r3, [r7, #0]
 8009548:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800954a:	f10a 0001 	add.w	r0, sl, #1
 800954e:	6018      	str	r0, [r3, #0]
 8009550:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009552:	2b00      	cmp	r3, #0
 8009554:	f43f acde 	beq.w	8008f14 <_dtoa_r+0x9c>
 8009558:	601f      	str	r7, [r3, #0]
 800955a:	e4db      	b.n	8008f14 <_dtoa_r+0x9c>
 800955c:	4627      	mov	r7, r4
 800955e:	463b      	mov	r3, r7
 8009560:	461f      	mov	r7, r3
 8009562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009566:	2a39      	cmp	r2, #57	; 0x39
 8009568:	d107      	bne.n	800957a <_dtoa_r+0x702>
 800956a:	9a03      	ldr	r2, [sp, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d1f7      	bne.n	8009560 <_dtoa_r+0x6e8>
 8009570:	2230      	movs	r2, #48	; 0x30
 8009572:	9903      	ldr	r1, [sp, #12]
 8009574:	f108 0801 	add.w	r8, r8, #1
 8009578:	700a      	strb	r2, [r1, #0]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	3201      	adds	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	e79e      	b.n	80094c0 <_dtoa_r+0x648>
 8009582:	46d0      	mov	r8, sl
 8009584:	e7eb      	b.n	800955e <_dtoa_r+0x6e6>
 8009586:	2200      	movs	r2, #0
 8009588:	4b6e      	ldr	r3, [pc, #440]	; (8009744 <_dtoa_r+0x8cc>)
 800958a:	f7f6 ffa5 	bl	80004d8 <__aeabi_dmul>
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4680      	mov	r8, r0
 8009594:	4689      	mov	r9, r1
 8009596:	f7f7 fa07 	bl	80009a8 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	d09b      	beq.n	80094d6 <_dtoa_r+0x65e>
 800959e:	e7cd      	b.n	800953c <_dtoa_r+0x6c4>
 80095a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	f000 80d0 	beq.w	8009748 <_dtoa_r+0x8d0>
 80095a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095aa:	2a01      	cmp	r2, #1
 80095ac:	f300 80ae 	bgt.w	800970c <_dtoa_r+0x894>
 80095b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	f000 80a6 	beq.w	8009704 <_dtoa_r+0x88c>
 80095b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095be:	9f06      	ldr	r7, [sp, #24]
 80095c0:	9a06      	ldr	r2, [sp, #24]
 80095c2:	2101      	movs	r1, #1
 80095c4:	441a      	add	r2, r3
 80095c6:	9206      	str	r2, [sp, #24]
 80095c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ca:	4628      	mov	r0, r5
 80095cc:	441a      	add	r2, r3
 80095ce:	9209      	str	r2, [sp, #36]	; 0x24
 80095d0:	f000 ff12 	bl	800a3f8 <__i2b>
 80095d4:	4606      	mov	r6, r0
 80095d6:	2f00      	cmp	r7, #0
 80095d8:	dd0c      	ble.n	80095f4 <_dtoa_r+0x77c>
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd09      	ble.n	80095f4 <_dtoa_r+0x77c>
 80095e0:	42bb      	cmp	r3, r7
 80095e2:	bfa8      	it	ge
 80095e4:	463b      	movge	r3, r7
 80095e6:	9a06      	ldr	r2, [sp, #24]
 80095e8:	1aff      	subs	r7, r7, r3
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	9206      	str	r2, [sp, #24]
 80095ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	9309      	str	r3, [sp, #36]	; 0x24
 80095f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f6:	b1f3      	cbz	r3, 8009636 <_dtoa_r+0x7be>
 80095f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80a8 	beq.w	8009750 <_dtoa_r+0x8d8>
 8009600:	2c00      	cmp	r4, #0
 8009602:	dd10      	ble.n	8009626 <_dtoa_r+0x7ae>
 8009604:	4631      	mov	r1, r6
 8009606:	4622      	mov	r2, r4
 8009608:	4628      	mov	r0, r5
 800960a:	f000 ffb3 	bl	800a574 <__pow5mult>
 800960e:	465a      	mov	r2, fp
 8009610:	4601      	mov	r1, r0
 8009612:	4606      	mov	r6, r0
 8009614:	4628      	mov	r0, r5
 8009616:	f000 ff05 	bl	800a424 <__multiply>
 800961a:	4680      	mov	r8, r0
 800961c:	4659      	mov	r1, fp
 800961e:	4628      	mov	r0, r5
 8009620:	f000 fdea 	bl	800a1f8 <_Bfree>
 8009624:	46c3      	mov	fp, r8
 8009626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009628:	1b1a      	subs	r2, r3, r4
 800962a:	d004      	beq.n	8009636 <_dtoa_r+0x7be>
 800962c:	4659      	mov	r1, fp
 800962e:	4628      	mov	r0, r5
 8009630:	f000 ffa0 	bl	800a574 <__pow5mult>
 8009634:	4683      	mov	fp, r0
 8009636:	2101      	movs	r1, #1
 8009638:	4628      	mov	r0, r5
 800963a:	f000 fedd 	bl	800a3f8 <__i2b>
 800963e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009640:	4604      	mov	r4, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	f340 8086 	ble.w	8009754 <_dtoa_r+0x8dc>
 8009648:	461a      	mov	r2, r3
 800964a:	4601      	mov	r1, r0
 800964c:	4628      	mov	r0, r5
 800964e:	f000 ff91 	bl	800a574 <__pow5mult>
 8009652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009654:	4604      	mov	r4, r0
 8009656:	2b01      	cmp	r3, #1
 8009658:	dd7f      	ble.n	800975a <_dtoa_r+0x8e2>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	f000 fe79 	bl	800a35c <__hi0bits>
 800966a:	f1c0 0020 	rsb	r0, r0, #32
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	4418      	add	r0, r3
 8009672:	f010 001f 	ands.w	r0, r0, #31
 8009676:	f000 8092 	beq.w	800979e <_dtoa_r+0x926>
 800967a:	f1c0 0320 	rsb	r3, r0, #32
 800967e:	2b04      	cmp	r3, #4
 8009680:	f340 808a 	ble.w	8009798 <_dtoa_r+0x920>
 8009684:	f1c0 001c 	rsb	r0, r0, #28
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	4407      	add	r7, r0
 800968c:	4403      	add	r3, r0
 800968e:	9306      	str	r3, [sp, #24]
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	4403      	add	r3, r0
 8009694:	9309      	str	r3, [sp, #36]	; 0x24
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	dd05      	ble.n	80096a8 <_dtoa_r+0x830>
 800969c:	4659      	mov	r1, fp
 800969e:	461a      	mov	r2, r3
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 ffc1 	bl	800a628 <__lshift>
 80096a6:	4683      	mov	fp, r0
 80096a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	dd05      	ble.n	80096ba <_dtoa_r+0x842>
 80096ae:	4621      	mov	r1, r4
 80096b0:	461a      	mov	r2, r3
 80096b2:	4628      	mov	r0, r5
 80096b4:	f000 ffb8 	bl	800a628 <__lshift>
 80096b8:	4604      	mov	r4, r0
 80096ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d070      	beq.n	80097a2 <_dtoa_r+0x92a>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4658      	mov	r0, fp
 80096c4:	f001 f820 	bl	800a708 <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	da6a      	bge.n	80097a2 <_dtoa_r+0x92a>
 80096cc:	2300      	movs	r3, #0
 80096ce:	4659      	mov	r1, fp
 80096d0:	220a      	movs	r2, #10
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 fdb2 	bl	800a23c <__multadd>
 80096d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096da:	4683      	mov	fp, r0
 80096dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8194 	beq.w	8009a0e <_dtoa_r+0xb96>
 80096e6:	4631      	mov	r1, r6
 80096e8:	2300      	movs	r3, #0
 80096ea:	220a      	movs	r2, #10
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 fda5 	bl	800a23c <__multadd>
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	4606      	mov	r6, r0
 80096f8:	f300 8093 	bgt.w	8009822 <_dtoa_r+0x9aa>
 80096fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096fe:	2b02      	cmp	r3, #2
 8009700:	dc57      	bgt.n	80097b2 <_dtoa_r+0x93a>
 8009702:	e08e      	b.n	8009822 <_dtoa_r+0x9aa>
 8009704:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800970a:	e757      	b.n	80095bc <_dtoa_r+0x744>
 800970c:	9b08      	ldr	r3, [sp, #32]
 800970e:	1e5c      	subs	r4, r3, #1
 8009710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009712:	42a3      	cmp	r3, r4
 8009714:	bfb7      	itett	lt
 8009716:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009718:	1b1c      	subge	r4, r3, r4
 800971a:	1ae2      	sublt	r2, r4, r3
 800971c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800971e:	bfbe      	ittt	lt
 8009720:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009722:	189b      	addlt	r3, r3, r2
 8009724:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	bfb8      	it	lt
 800972a:	2400      	movlt	r4, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfbb      	ittet	lt
 8009730:	9b06      	ldrlt	r3, [sp, #24]
 8009732:	9a08      	ldrlt	r2, [sp, #32]
 8009734:	9f06      	ldrge	r7, [sp, #24]
 8009736:	1a9f      	sublt	r7, r3, r2
 8009738:	bfac      	ite	ge
 800973a:	9b08      	ldrge	r3, [sp, #32]
 800973c:	2300      	movlt	r3, #0
 800973e:	e73f      	b.n	80095c0 <_dtoa_r+0x748>
 8009740:	3fe00000 	.word	0x3fe00000
 8009744:	40240000 	.word	0x40240000
 8009748:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800974a:	9f06      	ldr	r7, [sp, #24]
 800974c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800974e:	e742      	b.n	80095d6 <_dtoa_r+0x75e>
 8009750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009752:	e76b      	b.n	800962c <_dtoa_r+0x7b4>
 8009754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009756:	2b01      	cmp	r3, #1
 8009758:	dc19      	bgt.n	800978e <_dtoa_r+0x916>
 800975a:	9b04      	ldr	r3, [sp, #16]
 800975c:	b9bb      	cbnz	r3, 800978e <_dtoa_r+0x916>
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009764:	b99b      	cbnz	r3, 800978e <_dtoa_r+0x916>
 8009766:	9b05      	ldr	r3, [sp, #20]
 8009768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800976c:	0d1b      	lsrs	r3, r3, #20
 800976e:	051b      	lsls	r3, r3, #20
 8009770:	b183      	cbz	r3, 8009794 <_dtoa_r+0x91c>
 8009772:	f04f 0801 	mov.w	r8, #1
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	3301      	adds	r3, #1
 800977a:	9306      	str	r3, [sp, #24]
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	3301      	adds	r3, #1
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	f47f af6a 	bne.w	800965e <_dtoa_r+0x7e6>
 800978a:	2001      	movs	r0, #1
 800978c:	e76f      	b.n	800966e <_dtoa_r+0x7f6>
 800978e:	f04f 0800 	mov.w	r8, #0
 8009792:	e7f6      	b.n	8009782 <_dtoa_r+0x90a>
 8009794:	4698      	mov	r8, r3
 8009796:	e7f4      	b.n	8009782 <_dtoa_r+0x90a>
 8009798:	f43f af7d 	beq.w	8009696 <_dtoa_r+0x81e>
 800979c:	4618      	mov	r0, r3
 800979e:	301c      	adds	r0, #28
 80097a0:	e772      	b.n	8009688 <_dtoa_r+0x810>
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dc36      	bgt.n	8009816 <_dtoa_r+0x99e>
 80097a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	dd33      	ble.n	8009816 <_dtoa_r+0x99e>
 80097ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097b2:	f1b9 0f00 	cmp.w	r9, #0
 80097b6:	d10d      	bne.n	80097d4 <_dtoa_r+0x95c>
 80097b8:	4621      	mov	r1, r4
 80097ba:	464b      	mov	r3, r9
 80097bc:	2205      	movs	r2, #5
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 fd3c 	bl	800a23c <__multadd>
 80097c4:	4601      	mov	r1, r0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4658      	mov	r0, fp
 80097ca:	f000 ff9d 	bl	800a708 <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f73f adb8 	bgt.w	8009344 <_dtoa_r+0x4cc>
 80097d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097d6:	9f03      	ldr	r7, [sp, #12]
 80097d8:	ea6f 0a03 	mvn.w	sl, r3
 80097dc:	f04f 0800 	mov.w	r8, #0
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 fd08 	bl	800a1f8 <_Bfree>
 80097e8:	2e00      	cmp	r6, #0
 80097ea:	f43f aea7 	beq.w	800953c <_dtoa_r+0x6c4>
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	d005      	beq.n	8009800 <_dtoa_r+0x988>
 80097f4:	45b0      	cmp	r8, r6
 80097f6:	d003      	beq.n	8009800 <_dtoa_r+0x988>
 80097f8:	4641      	mov	r1, r8
 80097fa:	4628      	mov	r0, r5
 80097fc:	f000 fcfc 	bl	800a1f8 <_Bfree>
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	f000 fcf8 	bl	800a1f8 <_Bfree>
 8009808:	e698      	b.n	800953c <_dtoa_r+0x6c4>
 800980a:	2400      	movs	r4, #0
 800980c:	4626      	mov	r6, r4
 800980e:	e7e1      	b.n	80097d4 <_dtoa_r+0x95c>
 8009810:	46c2      	mov	sl, r8
 8009812:	4626      	mov	r6, r4
 8009814:	e596      	b.n	8009344 <_dtoa_r+0x4cc>
 8009816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 80fd 	beq.w	8009a1c <_dtoa_r+0xba4>
 8009822:	2f00      	cmp	r7, #0
 8009824:	dd05      	ble.n	8009832 <_dtoa_r+0x9ba>
 8009826:	4631      	mov	r1, r6
 8009828:	463a      	mov	r2, r7
 800982a:	4628      	mov	r0, r5
 800982c:	f000 fefc 	bl	800a628 <__lshift>
 8009830:	4606      	mov	r6, r0
 8009832:	f1b8 0f00 	cmp.w	r8, #0
 8009836:	d05c      	beq.n	80098f2 <_dtoa_r+0xa7a>
 8009838:	4628      	mov	r0, r5
 800983a:	6871      	ldr	r1, [r6, #4]
 800983c:	f000 fc9c 	bl	800a178 <_Balloc>
 8009840:	4607      	mov	r7, r0
 8009842:	b928      	cbnz	r0, 8009850 <_dtoa_r+0x9d8>
 8009844:	4602      	mov	r2, r0
 8009846:	f240 21ea 	movw	r1, #746	; 0x2ea
 800984a:	4b7f      	ldr	r3, [pc, #508]	; (8009a48 <_dtoa_r+0xbd0>)
 800984c:	f7ff bb28 	b.w	8008ea0 <_dtoa_r+0x28>
 8009850:	6932      	ldr	r2, [r6, #16]
 8009852:	f106 010c 	add.w	r1, r6, #12
 8009856:	3202      	adds	r2, #2
 8009858:	0092      	lsls	r2, r2, #2
 800985a:	300c      	adds	r0, #12
 800985c:	f7fd fd48 	bl	80072f0 <memcpy>
 8009860:	2201      	movs	r2, #1
 8009862:	4639      	mov	r1, r7
 8009864:	4628      	mov	r0, r5
 8009866:	f000 fedf 	bl	800a628 <__lshift>
 800986a:	46b0      	mov	r8, r6
 800986c:	4606      	mov	r6, r0
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	3301      	adds	r3, #1
 8009872:	9308      	str	r3, [sp, #32]
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	444b      	add	r3, r9
 8009878:	930a      	str	r3, [sp, #40]	; 0x28
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	9309      	str	r3, [sp, #36]	; 0x24
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	4621      	mov	r1, r4
 8009886:	3b01      	subs	r3, #1
 8009888:	4658      	mov	r0, fp
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	f7ff fa68 	bl	8008d60 <quorem>
 8009890:	4603      	mov	r3, r0
 8009892:	4641      	mov	r1, r8
 8009894:	3330      	adds	r3, #48	; 0x30
 8009896:	9006      	str	r0, [sp, #24]
 8009898:	4658      	mov	r0, fp
 800989a:	930b      	str	r3, [sp, #44]	; 0x2c
 800989c:	f000 ff34 	bl	800a708 <__mcmp>
 80098a0:	4632      	mov	r2, r6
 80098a2:	4681      	mov	r9, r0
 80098a4:	4621      	mov	r1, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 ff4a 	bl	800a740 <__mdiff>
 80098ac:	68c2      	ldr	r2, [r0, #12]
 80098ae:	4607      	mov	r7, r0
 80098b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b2:	bb02      	cbnz	r2, 80098f6 <_dtoa_r+0xa7e>
 80098b4:	4601      	mov	r1, r0
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 ff26 	bl	800a708 <__mcmp>
 80098bc:	4602      	mov	r2, r0
 80098be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c0:	4639      	mov	r1, r7
 80098c2:	4628      	mov	r0, r5
 80098c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80098c8:	f000 fc96 	bl	800a1f8 <_Bfree>
 80098cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098d0:	9f08      	ldr	r7, [sp, #32]
 80098d2:	ea43 0102 	orr.w	r1, r3, r2
 80098d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d8:	430b      	orrs	r3, r1
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	d10d      	bne.n	80098fa <_dtoa_r+0xa82>
 80098de:	2b39      	cmp	r3, #57	; 0x39
 80098e0:	d029      	beq.n	8009936 <_dtoa_r+0xabe>
 80098e2:	f1b9 0f00 	cmp.w	r9, #0
 80098e6:	dd01      	ble.n	80098ec <_dtoa_r+0xa74>
 80098e8:	9b06      	ldr	r3, [sp, #24]
 80098ea:	3331      	adds	r3, #49	; 0x31
 80098ec:	9a04      	ldr	r2, [sp, #16]
 80098ee:	7013      	strb	r3, [r2, #0]
 80098f0:	e776      	b.n	80097e0 <_dtoa_r+0x968>
 80098f2:	4630      	mov	r0, r6
 80098f4:	e7b9      	b.n	800986a <_dtoa_r+0x9f2>
 80098f6:	2201      	movs	r2, #1
 80098f8:	e7e2      	b.n	80098c0 <_dtoa_r+0xa48>
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	db06      	blt.n	800990e <_dtoa_r+0xa96>
 8009900:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009902:	ea41 0909 	orr.w	r9, r1, r9
 8009906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009908:	ea59 0101 	orrs.w	r1, r9, r1
 800990c:	d120      	bne.n	8009950 <_dtoa_r+0xad8>
 800990e:	2a00      	cmp	r2, #0
 8009910:	ddec      	ble.n	80098ec <_dtoa_r+0xa74>
 8009912:	4659      	mov	r1, fp
 8009914:	2201      	movs	r2, #1
 8009916:	4628      	mov	r0, r5
 8009918:	9308      	str	r3, [sp, #32]
 800991a:	f000 fe85 	bl	800a628 <__lshift>
 800991e:	4621      	mov	r1, r4
 8009920:	4683      	mov	fp, r0
 8009922:	f000 fef1 	bl	800a708 <__mcmp>
 8009926:	2800      	cmp	r0, #0
 8009928:	9b08      	ldr	r3, [sp, #32]
 800992a:	dc02      	bgt.n	8009932 <_dtoa_r+0xaba>
 800992c:	d1de      	bne.n	80098ec <_dtoa_r+0xa74>
 800992e:	07da      	lsls	r2, r3, #31
 8009930:	d5dc      	bpl.n	80098ec <_dtoa_r+0xa74>
 8009932:	2b39      	cmp	r3, #57	; 0x39
 8009934:	d1d8      	bne.n	80098e8 <_dtoa_r+0xa70>
 8009936:	2339      	movs	r3, #57	; 0x39
 8009938:	9a04      	ldr	r2, [sp, #16]
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	463b      	mov	r3, r7
 800993e:	461f      	mov	r7, r3
 8009940:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009944:	3b01      	subs	r3, #1
 8009946:	2a39      	cmp	r2, #57	; 0x39
 8009948:	d050      	beq.n	80099ec <_dtoa_r+0xb74>
 800994a:	3201      	adds	r2, #1
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e747      	b.n	80097e0 <_dtoa_r+0x968>
 8009950:	2a00      	cmp	r2, #0
 8009952:	dd03      	ble.n	800995c <_dtoa_r+0xae4>
 8009954:	2b39      	cmp	r3, #57	; 0x39
 8009956:	d0ee      	beq.n	8009936 <_dtoa_r+0xabe>
 8009958:	3301      	adds	r3, #1
 800995a:	e7c7      	b.n	80098ec <_dtoa_r+0xa74>
 800995c:	9a08      	ldr	r2, [sp, #32]
 800995e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009960:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009964:	428a      	cmp	r2, r1
 8009966:	d02a      	beq.n	80099be <_dtoa_r+0xb46>
 8009968:	4659      	mov	r1, fp
 800996a:	2300      	movs	r3, #0
 800996c:	220a      	movs	r2, #10
 800996e:	4628      	mov	r0, r5
 8009970:	f000 fc64 	bl	800a23c <__multadd>
 8009974:	45b0      	cmp	r8, r6
 8009976:	4683      	mov	fp, r0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	f04f 020a 	mov.w	r2, #10
 8009980:	4641      	mov	r1, r8
 8009982:	4628      	mov	r0, r5
 8009984:	d107      	bne.n	8009996 <_dtoa_r+0xb1e>
 8009986:	f000 fc59 	bl	800a23c <__multadd>
 800998a:	4680      	mov	r8, r0
 800998c:	4606      	mov	r6, r0
 800998e:	9b08      	ldr	r3, [sp, #32]
 8009990:	3301      	adds	r3, #1
 8009992:	9308      	str	r3, [sp, #32]
 8009994:	e775      	b.n	8009882 <_dtoa_r+0xa0a>
 8009996:	f000 fc51 	bl	800a23c <__multadd>
 800999a:	4631      	mov	r1, r6
 800999c:	4680      	mov	r8, r0
 800999e:	2300      	movs	r3, #0
 80099a0:	220a      	movs	r2, #10
 80099a2:	4628      	mov	r0, r5
 80099a4:	f000 fc4a 	bl	800a23c <__multadd>
 80099a8:	4606      	mov	r6, r0
 80099aa:	e7f0      	b.n	800998e <_dtoa_r+0xb16>
 80099ac:	f1b9 0f00 	cmp.w	r9, #0
 80099b0:	bfcc      	ite	gt
 80099b2:	464f      	movgt	r7, r9
 80099b4:	2701      	movle	r7, #1
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	9a03      	ldr	r2, [sp, #12]
 80099bc:	4417      	add	r7, r2
 80099be:	4659      	mov	r1, fp
 80099c0:	2201      	movs	r2, #1
 80099c2:	4628      	mov	r0, r5
 80099c4:	9308      	str	r3, [sp, #32]
 80099c6:	f000 fe2f 	bl	800a628 <__lshift>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4683      	mov	fp, r0
 80099ce:	f000 fe9b 	bl	800a708 <__mcmp>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	dcb2      	bgt.n	800993c <_dtoa_r+0xac4>
 80099d6:	d102      	bne.n	80099de <_dtoa_r+0xb66>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	07db      	lsls	r3, r3, #31
 80099dc:	d4ae      	bmi.n	800993c <_dtoa_r+0xac4>
 80099de:	463b      	mov	r3, r7
 80099e0:	461f      	mov	r7, r3
 80099e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e6:	2a30      	cmp	r2, #48	; 0x30
 80099e8:	d0fa      	beq.n	80099e0 <_dtoa_r+0xb68>
 80099ea:	e6f9      	b.n	80097e0 <_dtoa_r+0x968>
 80099ec:	9a03      	ldr	r2, [sp, #12]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d1a5      	bne.n	800993e <_dtoa_r+0xac6>
 80099f2:	2331      	movs	r3, #49	; 0x31
 80099f4:	f10a 0a01 	add.w	sl, sl, #1
 80099f8:	e779      	b.n	80098ee <_dtoa_r+0xa76>
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <_dtoa_r+0xbd4>)
 80099fc:	f7ff baa8 	b.w	8008f50 <_dtoa_r+0xd8>
 8009a00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f47f aa81 	bne.w	8008f0a <_dtoa_r+0x92>
 8009a08:	4b11      	ldr	r3, [pc, #68]	; (8009a50 <_dtoa_r+0xbd8>)
 8009a0a:	f7ff baa1 	b.w	8008f50 <_dtoa_r+0xd8>
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	dc03      	bgt.n	8009a1c <_dtoa_r+0xba4>
 8009a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	f73f aecb 	bgt.w	80097b2 <_dtoa_r+0x93a>
 8009a1c:	9f03      	ldr	r7, [sp, #12]
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4658      	mov	r0, fp
 8009a22:	f7ff f99d 	bl	8008d60 <quorem>
 8009a26:	9a03      	ldr	r2, [sp, #12]
 8009a28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a2c:	f807 3b01 	strb.w	r3, [r7], #1
 8009a30:	1aba      	subs	r2, r7, r2
 8009a32:	4591      	cmp	r9, r2
 8009a34:	ddba      	ble.n	80099ac <_dtoa_r+0xb34>
 8009a36:	4659      	mov	r1, fp
 8009a38:	2300      	movs	r3, #0
 8009a3a:	220a      	movs	r2, #10
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 fbfd 	bl	800a23c <__multadd>
 8009a42:	4683      	mov	fp, r0
 8009a44:	e7eb      	b.n	8009a1e <_dtoa_r+0xba6>
 8009a46:	bf00      	nop
 8009a48:	0800beb8 	.word	0x0800beb8
 8009a4c:	0800bcb8 	.word	0x0800bcb8
 8009a50:	0800be39 	.word	0x0800be39

08009a54 <rshift>:
 8009a54:	6903      	ldr	r3, [r0, #16]
 8009a56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a5e:	f100 0414 	add.w	r4, r0, #20
 8009a62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a66:	dd46      	ble.n	8009af6 <rshift+0xa2>
 8009a68:	f011 011f 	ands.w	r1, r1, #31
 8009a6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a74:	d10c      	bne.n	8009a90 <rshift+0x3c>
 8009a76:	4629      	mov	r1, r5
 8009a78:	f100 0710 	add.w	r7, r0, #16
 8009a7c:	42b1      	cmp	r1, r6
 8009a7e:	d335      	bcc.n	8009aec <rshift+0x98>
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	1eea      	subs	r2, r5, #3
 8009a86:	4296      	cmp	r6, r2
 8009a88:	bf38      	it	cc
 8009a8a:	2300      	movcc	r3, #0
 8009a8c:	4423      	add	r3, r4
 8009a8e:	e015      	b.n	8009abc <rshift+0x68>
 8009a90:	46a1      	mov	r9, r4
 8009a92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a96:	f1c1 0820 	rsb	r8, r1, #32
 8009a9a:	40cf      	lsrs	r7, r1
 8009a9c:	f105 0e04 	add.w	lr, r5, #4
 8009aa0:	4576      	cmp	r6, lr
 8009aa2:	46f4      	mov	ip, lr
 8009aa4:	d816      	bhi.n	8009ad4 <rshift+0x80>
 8009aa6:	1a9a      	subs	r2, r3, r2
 8009aa8:	0092      	lsls	r2, r2, #2
 8009aaa:	3a04      	subs	r2, #4
 8009aac:	3501      	adds	r5, #1
 8009aae:	42ae      	cmp	r6, r5
 8009ab0:	bf38      	it	cc
 8009ab2:	2200      	movcc	r2, #0
 8009ab4:	18a3      	adds	r3, r4, r2
 8009ab6:	50a7      	str	r7, [r4, r2]
 8009ab8:	b107      	cbz	r7, 8009abc <rshift+0x68>
 8009aba:	3304      	adds	r3, #4
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	eba3 0204 	sub.w	r2, r3, r4
 8009ac2:	bf08      	it	eq
 8009ac4:	2300      	moveq	r3, #0
 8009ac6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009aca:	6102      	str	r2, [r0, #16]
 8009acc:	bf08      	it	eq
 8009ace:	6143      	streq	r3, [r0, #20]
 8009ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad4:	f8dc c000 	ldr.w	ip, [ip]
 8009ad8:	fa0c fc08 	lsl.w	ip, ip, r8
 8009adc:	ea4c 0707 	orr.w	r7, ip, r7
 8009ae0:	f849 7b04 	str.w	r7, [r9], #4
 8009ae4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ae8:	40cf      	lsrs	r7, r1
 8009aea:	e7d9      	b.n	8009aa0 <rshift+0x4c>
 8009aec:	f851 cb04 	ldr.w	ip, [r1], #4
 8009af0:	f847 cf04 	str.w	ip, [r7, #4]!
 8009af4:	e7c2      	b.n	8009a7c <rshift+0x28>
 8009af6:	4623      	mov	r3, r4
 8009af8:	e7e0      	b.n	8009abc <rshift+0x68>

08009afa <__hexdig_fun>:
 8009afa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	d802      	bhi.n	8009b08 <__hexdig_fun+0xe>
 8009b02:	3820      	subs	r0, #32
 8009b04:	b2c0      	uxtb	r0, r0
 8009b06:	4770      	bx	lr
 8009b08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b0c:	2b05      	cmp	r3, #5
 8009b0e:	d801      	bhi.n	8009b14 <__hexdig_fun+0x1a>
 8009b10:	3847      	subs	r0, #71	; 0x47
 8009b12:	e7f7      	b.n	8009b04 <__hexdig_fun+0xa>
 8009b14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b18:	2b05      	cmp	r3, #5
 8009b1a:	d801      	bhi.n	8009b20 <__hexdig_fun+0x26>
 8009b1c:	3827      	subs	r0, #39	; 0x27
 8009b1e:	e7f1      	b.n	8009b04 <__hexdig_fun+0xa>
 8009b20:	2000      	movs	r0, #0
 8009b22:	4770      	bx	lr

08009b24 <__gethex>:
 8009b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	b08b      	sub	sp, #44	; 0x2c
 8009b2a:	9305      	str	r3, [sp, #20]
 8009b2c:	4bb2      	ldr	r3, [pc, #712]	; (8009df8 <__gethex+0x2d4>)
 8009b2e:	9002      	str	r0, [sp, #8]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	468b      	mov	fp, r1
 8009b34:	4618      	mov	r0, r3
 8009b36:	4690      	mov	r8, r2
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	f7f6 fb09 	bl	8000150 <strlen>
 8009b3e:	4682      	mov	sl, r0
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	f8db 2000 	ldr.w	r2, [fp]
 8009b46:	4403      	add	r3, r0
 8009b48:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b4c:	9306      	str	r3, [sp, #24]
 8009b4e:	1c93      	adds	r3, r2, #2
 8009b50:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b54:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b58:	32fe      	adds	r2, #254	; 0xfe
 8009b5a:	18d1      	adds	r1, r2, r3
 8009b5c:	461f      	mov	r7, r3
 8009b5e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b62:	9101      	str	r1, [sp, #4]
 8009b64:	2830      	cmp	r0, #48	; 0x30
 8009b66:	d0f8      	beq.n	8009b5a <__gethex+0x36>
 8009b68:	f7ff ffc7 	bl	8009afa <__hexdig_fun>
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d13a      	bne.n	8009be8 <__gethex+0xc4>
 8009b72:	4652      	mov	r2, sl
 8009b74:	4638      	mov	r0, r7
 8009b76:	9903      	ldr	r1, [sp, #12]
 8009b78:	f001 fa18 	bl	800afac <strncmp>
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d166      	bne.n	8009c50 <__gethex+0x12c>
 8009b82:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b86:	eb07 060a 	add.w	r6, r7, sl
 8009b8a:	f7ff ffb6 	bl	8009afa <__hexdig_fun>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d060      	beq.n	8009c54 <__gethex+0x130>
 8009b92:	4633      	mov	r3, r6
 8009b94:	7818      	ldrb	r0, [r3, #0]
 8009b96:	461f      	mov	r7, r3
 8009b98:	2830      	cmp	r0, #48	; 0x30
 8009b9a:	f103 0301 	add.w	r3, r3, #1
 8009b9e:	d0f9      	beq.n	8009b94 <__gethex+0x70>
 8009ba0:	f7ff ffab 	bl	8009afa <__hexdig_fun>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	fab0 f480 	clz	r4, r0
 8009baa:	4635      	mov	r5, r6
 8009bac:	0964      	lsrs	r4, r4, #5
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	463a      	mov	r2, r7
 8009bb2:	4616      	mov	r6, r2
 8009bb4:	7830      	ldrb	r0, [r6, #0]
 8009bb6:	3201      	adds	r2, #1
 8009bb8:	f7ff ff9f 	bl	8009afa <__hexdig_fun>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1f8      	bne.n	8009bb2 <__gethex+0x8e>
 8009bc0:	4652      	mov	r2, sl
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	9903      	ldr	r1, [sp, #12]
 8009bc6:	f001 f9f1 	bl	800afac <strncmp>
 8009bca:	b980      	cbnz	r0, 8009bee <__gethex+0xca>
 8009bcc:	b94d      	cbnz	r5, 8009be2 <__gethex+0xbe>
 8009bce:	eb06 050a 	add.w	r5, r6, sl
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	4616      	mov	r6, r2
 8009bd6:	7830      	ldrb	r0, [r6, #0]
 8009bd8:	3201      	adds	r2, #1
 8009bda:	f7ff ff8e 	bl	8009afa <__hexdig_fun>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1f8      	bne.n	8009bd4 <__gethex+0xb0>
 8009be2:	1bad      	subs	r5, r5, r6
 8009be4:	00ad      	lsls	r5, r5, #2
 8009be6:	e004      	b.n	8009bf2 <__gethex+0xce>
 8009be8:	2400      	movs	r4, #0
 8009bea:	4625      	mov	r5, r4
 8009bec:	e7e0      	b.n	8009bb0 <__gethex+0x8c>
 8009bee:	2d00      	cmp	r5, #0
 8009bf0:	d1f7      	bne.n	8009be2 <__gethex+0xbe>
 8009bf2:	7833      	ldrb	r3, [r6, #0]
 8009bf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bf8:	2b50      	cmp	r3, #80	; 0x50
 8009bfa:	d139      	bne.n	8009c70 <__gethex+0x14c>
 8009bfc:	7873      	ldrb	r3, [r6, #1]
 8009bfe:	2b2b      	cmp	r3, #43	; 0x2b
 8009c00:	d02a      	beq.n	8009c58 <__gethex+0x134>
 8009c02:	2b2d      	cmp	r3, #45	; 0x2d
 8009c04:	d02c      	beq.n	8009c60 <__gethex+0x13c>
 8009c06:	f04f 0900 	mov.w	r9, #0
 8009c0a:	1c71      	adds	r1, r6, #1
 8009c0c:	7808      	ldrb	r0, [r1, #0]
 8009c0e:	f7ff ff74 	bl	8009afa <__hexdig_fun>
 8009c12:	1e43      	subs	r3, r0, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b18      	cmp	r3, #24
 8009c18:	d82a      	bhi.n	8009c70 <__gethex+0x14c>
 8009c1a:	f1a0 0210 	sub.w	r2, r0, #16
 8009c1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c22:	f7ff ff6a 	bl	8009afa <__hexdig_fun>
 8009c26:	1e43      	subs	r3, r0, #1
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b18      	cmp	r3, #24
 8009c2c:	d91b      	bls.n	8009c66 <__gethex+0x142>
 8009c2e:	f1b9 0f00 	cmp.w	r9, #0
 8009c32:	d000      	beq.n	8009c36 <__gethex+0x112>
 8009c34:	4252      	negs	r2, r2
 8009c36:	4415      	add	r5, r2
 8009c38:	f8cb 1000 	str.w	r1, [fp]
 8009c3c:	b1d4      	cbz	r4, 8009c74 <__gethex+0x150>
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bf14      	ite	ne
 8009c44:	2700      	movne	r7, #0
 8009c46:	2706      	moveq	r7, #6
 8009c48:	4638      	mov	r0, r7
 8009c4a:	b00b      	add	sp, #44	; 0x2c
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	463e      	mov	r6, r7
 8009c52:	4625      	mov	r5, r4
 8009c54:	2401      	movs	r4, #1
 8009c56:	e7cc      	b.n	8009bf2 <__gethex+0xce>
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	1cb1      	adds	r1, r6, #2
 8009c5e:	e7d5      	b.n	8009c0c <__gethex+0xe8>
 8009c60:	f04f 0901 	mov.w	r9, #1
 8009c64:	e7fa      	b.n	8009c5c <__gethex+0x138>
 8009c66:	230a      	movs	r3, #10
 8009c68:	fb03 0202 	mla	r2, r3, r2, r0
 8009c6c:	3a10      	subs	r2, #16
 8009c6e:	e7d6      	b.n	8009c1e <__gethex+0xfa>
 8009c70:	4631      	mov	r1, r6
 8009c72:	e7e1      	b.n	8009c38 <__gethex+0x114>
 8009c74:	4621      	mov	r1, r4
 8009c76:	1bf3      	subs	r3, r6, r7
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	2b07      	cmp	r3, #7
 8009c7c:	dc0a      	bgt.n	8009c94 <__gethex+0x170>
 8009c7e:	9802      	ldr	r0, [sp, #8]
 8009c80:	f000 fa7a 	bl	800a178 <_Balloc>
 8009c84:	4604      	mov	r4, r0
 8009c86:	b940      	cbnz	r0, 8009c9a <__gethex+0x176>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	21de      	movs	r1, #222	; 0xde
 8009c8c:	4b5b      	ldr	r3, [pc, #364]	; (8009dfc <__gethex+0x2d8>)
 8009c8e:	485c      	ldr	r0, [pc, #368]	; (8009e00 <__gethex+0x2dc>)
 8009c90:	f001 f9ae 	bl	800aff0 <__assert_func>
 8009c94:	3101      	adds	r1, #1
 8009c96:	105b      	asrs	r3, r3, #1
 8009c98:	e7ef      	b.n	8009c7a <__gethex+0x156>
 8009c9a:	f04f 0b00 	mov.w	fp, #0
 8009c9e:	f100 0914 	add.w	r9, r0, #20
 8009ca2:	f1ca 0301 	rsb	r3, sl, #1
 8009ca6:	f8cd 9010 	str.w	r9, [sp, #16]
 8009caa:	f8cd b004 	str.w	fp, [sp, #4]
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	42b7      	cmp	r7, r6
 8009cb2:	d33f      	bcc.n	8009d34 <__gethex+0x210>
 8009cb4:	9f04      	ldr	r7, [sp, #16]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	f847 3b04 	str.w	r3, [r7], #4
 8009cbc:	eba7 0709 	sub.w	r7, r7, r9
 8009cc0:	10bf      	asrs	r7, r7, #2
 8009cc2:	6127      	str	r7, [r4, #16]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fb49 	bl	800a35c <__hi0bits>
 8009cca:	017f      	lsls	r7, r7, #5
 8009ccc:	f8d8 6000 	ldr.w	r6, [r8]
 8009cd0:	1a3f      	subs	r7, r7, r0
 8009cd2:	42b7      	cmp	r7, r6
 8009cd4:	dd62      	ble.n	8009d9c <__gethex+0x278>
 8009cd6:	1bbf      	subs	r7, r7, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fee3 	bl	800aaa6 <__any_on>
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	b1a8      	cbz	r0, 8009d10 <__gethex+0x1ec>
 8009ce4:	f04f 0a01 	mov.w	sl, #1
 8009ce8:	1e7b      	subs	r3, r7, #1
 8009cea:	1159      	asrs	r1, r3, #5
 8009cec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cf0:	f003 021f 	and.w	r2, r3, #31
 8009cf4:	fa0a f202 	lsl.w	r2, sl, r2
 8009cf8:	420a      	tst	r2, r1
 8009cfa:	d009      	beq.n	8009d10 <__gethex+0x1ec>
 8009cfc:	4553      	cmp	r3, sl
 8009cfe:	dd05      	ble.n	8009d0c <__gethex+0x1e8>
 8009d00:	4620      	mov	r0, r4
 8009d02:	1eb9      	subs	r1, r7, #2
 8009d04:	f000 fecf 	bl	800aaa6 <__any_on>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d144      	bne.n	8009d96 <__gethex+0x272>
 8009d0c:	f04f 0a02 	mov.w	sl, #2
 8009d10:	4639      	mov	r1, r7
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff fe9e 	bl	8009a54 <rshift>
 8009d18:	443d      	add	r5, r7
 8009d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d1e:	42ab      	cmp	r3, r5
 8009d20:	da4a      	bge.n	8009db8 <__gethex+0x294>
 8009d22:	4621      	mov	r1, r4
 8009d24:	9802      	ldr	r0, [sp, #8]
 8009d26:	f000 fa67 	bl	800a1f8 <_Bfree>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d2e:	27a3      	movs	r7, #163	; 0xa3
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e789      	b.n	8009c48 <__gethex+0x124>
 8009d34:	1e73      	subs	r3, r6, #1
 8009d36:	9a06      	ldr	r2, [sp, #24]
 8009d38:	9307      	str	r3, [sp, #28]
 8009d3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d019      	beq.n	8009d76 <__gethex+0x252>
 8009d42:	f1bb 0f20 	cmp.w	fp, #32
 8009d46:	d107      	bne.n	8009d58 <__gethex+0x234>
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	9a01      	ldr	r2, [sp, #4]
 8009d4c:	f843 2b04 	str.w	r2, [r3], #4
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	2300      	movs	r3, #0
 8009d54:	469b      	mov	fp, r3
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d5c:	f7ff fecd 	bl	8009afa <__hexdig_fun>
 8009d60:	9b01      	ldr	r3, [sp, #4]
 8009d62:	f000 000f 	and.w	r0, r0, #15
 8009d66:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d6a:	4303      	orrs	r3, r0
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f10b 0b04 	add.w	fp, fp, #4
 8009d72:	9b07      	ldr	r3, [sp, #28]
 8009d74:	e00d      	b.n	8009d92 <__gethex+0x26e>
 8009d76:	9a08      	ldr	r2, [sp, #32]
 8009d78:	1e73      	subs	r3, r6, #1
 8009d7a:	4413      	add	r3, r2
 8009d7c:	42bb      	cmp	r3, r7
 8009d7e:	d3e0      	bcc.n	8009d42 <__gethex+0x21e>
 8009d80:	4618      	mov	r0, r3
 8009d82:	4652      	mov	r2, sl
 8009d84:	9903      	ldr	r1, [sp, #12]
 8009d86:	9309      	str	r3, [sp, #36]	; 0x24
 8009d88:	f001 f910 	bl	800afac <strncmp>
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1d7      	bne.n	8009d42 <__gethex+0x21e>
 8009d92:	461e      	mov	r6, r3
 8009d94:	e78c      	b.n	8009cb0 <__gethex+0x18c>
 8009d96:	f04f 0a03 	mov.w	sl, #3
 8009d9a:	e7b9      	b.n	8009d10 <__gethex+0x1ec>
 8009d9c:	da09      	bge.n	8009db2 <__gethex+0x28e>
 8009d9e:	1bf7      	subs	r7, r6, r7
 8009da0:	4621      	mov	r1, r4
 8009da2:	463a      	mov	r2, r7
 8009da4:	9802      	ldr	r0, [sp, #8]
 8009da6:	f000 fc3f 	bl	800a628 <__lshift>
 8009daa:	4604      	mov	r4, r0
 8009dac:	1bed      	subs	r5, r5, r7
 8009dae:	f100 0914 	add.w	r9, r0, #20
 8009db2:	f04f 0a00 	mov.w	sl, #0
 8009db6:	e7b0      	b.n	8009d1a <__gethex+0x1f6>
 8009db8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009dbc:	42a8      	cmp	r0, r5
 8009dbe:	dd72      	ble.n	8009ea6 <__gethex+0x382>
 8009dc0:	1b45      	subs	r5, r0, r5
 8009dc2:	42ae      	cmp	r6, r5
 8009dc4:	dc35      	bgt.n	8009e32 <__gethex+0x30e>
 8009dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d029      	beq.n	8009e22 <__gethex+0x2fe>
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d02b      	beq.n	8009e2a <__gethex+0x306>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d11c      	bne.n	8009e10 <__gethex+0x2ec>
 8009dd6:	42ae      	cmp	r6, r5
 8009dd8:	d11a      	bne.n	8009e10 <__gethex+0x2ec>
 8009dda:	2e01      	cmp	r6, #1
 8009ddc:	d112      	bne.n	8009e04 <__gethex+0x2e0>
 8009dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009de2:	9a05      	ldr	r2, [sp, #20]
 8009de4:	2762      	movs	r7, #98	; 0x62
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	2301      	movs	r3, #1
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	f8c9 3000 	str.w	r3, [r9]
 8009df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df2:	601c      	str	r4, [r3, #0]
 8009df4:	e728      	b.n	8009c48 <__gethex+0x124>
 8009df6:	bf00      	nop
 8009df8:	0800bf30 	.word	0x0800bf30
 8009dfc:	0800beb8 	.word	0x0800beb8
 8009e00:	0800bec9 	.word	0x0800bec9
 8009e04:	4620      	mov	r0, r4
 8009e06:	1e71      	subs	r1, r6, #1
 8009e08:	f000 fe4d 	bl	800aaa6 <__any_on>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d1e6      	bne.n	8009dde <__gethex+0x2ba>
 8009e10:	4621      	mov	r1, r4
 8009e12:	9802      	ldr	r0, [sp, #8]
 8009e14:	f000 f9f0 	bl	800a1f8 <_Bfree>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e1c:	2750      	movs	r7, #80	; 0x50
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	e712      	b.n	8009c48 <__gethex+0x124>
 8009e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f3      	bne.n	8009e10 <__gethex+0x2ec>
 8009e28:	e7d9      	b.n	8009dde <__gethex+0x2ba>
 8009e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1d6      	bne.n	8009dde <__gethex+0x2ba>
 8009e30:	e7ee      	b.n	8009e10 <__gethex+0x2ec>
 8009e32:	1e6f      	subs	r7, r5, #1
 8009e34:	f1ba 0f00 	cmp.w	sl, #0
 8009e38:	d132      	bne.n	8009ea0 <__gethex+0x37c>
 8009e3a:	b127      	cbz	r7, 8009e46 <__gethex+0x322>
 8009e3c:	4639      	mov	r1, r7
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 fe31 	bl	800aaa6 <__any_on>
 8009e44:	4682      	mov	sl, r0
 8009e46:	2101      	movs	r1, #1
 8009e48:	117b      	asrs	r3, r7, #5
 8009e4a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e4e:	f007 071f 	and.w	r7, r7, #31
 8009e52:	fa01 f707 	lsl.w	r7, r1, r7
 8009e56:	421f      	tst	r7, r3
 8009e58:	f04f 0702 	mov.w	r7, #2
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	bf18      	it	ne
 8009e62:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e66:	1b76      	subs	r6, r6, r5
 8009e68:	f7ff fdf4 	bl	8009a54 <rshift>
 8009e6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e70:	f1ba 0f00 	cmp.w	sl, #0
 8009e74:	d048      	beq.n	8009f08 <__gethex+0x3e4>
 8009e76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d015      	beq.n	8009eaa <__gethex+0x386>
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d017      	beq.n	8009eb2 <__gethex+0x38e>
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d109      	bne.n	8009e9a <__gethex+0x376>
 8009e86:	f01a 0f02 	tst.w	sl, #2
 8009e8a:	d006      	beq.n	8009e9a <__gethex+0x376>
 8009e8c:	f8d9 0000 	ldr.w	r0, [r9]
 8009e90:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e94:	f01a 0f01 	tst.w	sl, #1
 8009e98:	d10e      	bne.n	8009eb8 <__gethex+0x394>
 8009e9a:	f047 0710 	orr.w	r7, r7, #16
 8009e9e:	e033      	b.n	8009f08 <__gethex+0x3e4>
 8009ea0:	f04f 0a01 	mov.w	sl, #1
 8009ea4:	e7cf      	b.n	8009e46 <__gethex+0x322>
 8009ea6:	2701      	movs	r7, #1
 8009ea8:	e7e2      	b.n	8009e70 <__gethex+0x34c>
 8009eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eac:	f1c3 0301 	rsb	r3, r3, #1
 8009eb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009eb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <__gethex+0x376>
 8009eb8:	f04f 0c00 	mov.w	ip, #0
 8009ebc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ec0:	f104 0314 	add.w	r3, r4, #20
 8009ec4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ec8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ed6:	d01c      	beq.n	8009f12 <__gethex+0x3ee>
 8009ed8:	3201      	adds	r2, #1
 8009eda:	6002      	str	r2, [r0, #0]
 8009edc:	2f02      	cmp	r7, #2
 8009ede:	f104 0314 	add.w	r3, r4, #20
 8009ee2:	d13d      	bne.n	8009f60 <__gethex+0x43c>
 8009ee4:	f8d8 2000 	ldr.w	r2, [r8]
 8009ee8:	3a01      	subs	r2, #1
 8009eea:	42b2      	cmp	r2, r6
 8009eec:	d10a      	bne.n	8009f04 <__gethex+0x3e0>
 8009eee:	2201      	movs	r2, #1
 8009ef0:	1171      	asrs	r1, r6, #5
 8009ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ef6:	f006 061f 	and.w	r6, r6, #31
 8009efa:	fa02 f606 	lsl.w	r6, r2, r6
 8009efe:	421e      	tst	r6, r3
 8009f00:	bf18      	it	ne
 8009f02:	4617      	movne	r7, r2
 8009f04:	f047 0720 	orr.w	r7, r7, #32
 8009f08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f0a:	601c      	str	r4, [r3, #0]
 8009f0c:	9b05      	ldr	r3, [sp, #20]
 8009f0e:	601d      	str	r5, [r3, #0]
 8009f10:	e69a      	b.n	8009c48 <__gethex+0x124>
 8009f12:	4299      	cmp	r1, r3
 8009f14:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f18:	d8d8      	bhi.n	8009ecc <__gethex+0x3a8>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	459b      	cmp	fp, r3
 8009f1e:	db17      	blt.n	8009f50 <__gethex+0x42c>
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	9802      	ldr	r0, [sp, #8]
 8009f24:	3101      	adds	r1, #1
 8009f26:	f000 f927 	bl	800a178 <_Balloc>
 8009f2a:	4681      	mov	r9, r0
 8009f2c:	b918      	cbnz	r0, 8009f36 <__gethex+0x412>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	2184      	movs	r1, #132	; 0x84
 8009f32:	4b19      	ldr	r3, [pc, #100]	; (8009f98 <__gethex+0x474>)
 8009f34:	e6ab      	b.n	8009c8e <__gethex+0x16a>
 8009f36:	6922      	ldr	r2, [r4, #16]
 8009f38:	f104 010c 	add.w	r1, r4, #12
 8009f3c:	3202      	adds	r2, #2
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	300c      	adds	r0, #12
 8009f42:	f7fd f9d5 	bl	80072f0 <memcpy>
 8009f46:	4621      	mov	r1, r4
 8009f48:	9802      	ldr	r0, [sp, #8]
 8009f4a:	f000 f955 	bl	800a1f8 <_Bfree>
 8009f4e:	464c      	mov	r4, r9
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	6122      	str	r2, [r4, #16]
 8009f56:	2201      	movs	r2, #1
 8009f58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f5c:	615a      	str	r2, [r3, #20]
 8009f5e:	e7bd      	b.n	8009edc <__gethex+0x3b8>
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	455a      	cmp	r2, fp
 8009f64:	dd0b      	ble.n	8009f7e <__gethex+0x45a>
 8009f66:	2101      	movs	r1, #1
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff fd73 	bl	8009a54 <rshift>
 8009f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f72:	3501      	adds	r5, #1
 8009f74:	42ab      	cmp	r3, r5
 8009f76:	f6ff aed4 	blt.w	8009d22 <__gethex+0x1fe>
 8009f7a:	2701      	movs	r7, #1
 8009f7c:	e7c2      	b.n	8009f04 <__gethex+0x3e0>
 8009f7e:	f016 061f 	ands.w	r6, r6, #31
 8009f82:	d0fa      	beq.n	8009f7a <__gethex+0x456>
 8009f84:	4453      	add	r3, sl
 8009f86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f8a:	f000 f9e7 	bl	800a35c <__hi0bits>
 8009f8e:	f1c6 0620 	rsb	r6, r6, #32
 8009f92:	42b0      	cmp	r0, r6
 8009f94:	dbe7      	blt.n	8009f66 <__gethex+0x442>
 8009f96:	e7f0      	b.n	8009f7a <__gethex+0x456>
 8009f98:	0800beb8 	.word	0x0800beb8

08009f9c <L_shift>:
 8009f9c:	f1c2 0208 	rsb	r2, r2, #8
 8009fa0:	0092      	lsls	r2, r2, #2
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	f1c2 0620 	rsb	r6, r2, #32
 8009fa8:	6843      	ldr	r3, [r0, #4]
 8009faa:	6804      	ldr	r4, [r0, #0]
 8009fac:	fa03 f506 	lsl.w	r5, r3, r6
 8009fb0:	432c      	orrs	r4, r5
 8009fb2:	40d3      	lsrs	r3, r2
 8009fb4:	6004      	str	r4, [r0, #0]
 8009fb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fba:	4288      	cmp	r0, r1
 8009fbc:	d3f4      	bcc.n	8009fa8 <L_shift+0xc>
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}

08009fc0 <__match>:
 8009fc0:	b530      	push	{r4, r5, lr}
 8009fc2:	6803      	ldr	r3, [r0, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fca:	b914      	cbnz	r4, 8009fd2 <__match+0x12>
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	2001      	movs	r0, #1
 8009fd0:	bd30      	pop	{r4, r5, pc}
 8009fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fda:	2d19      	cmp	r5, #25
 8009fdc:	bf98      	it	ls
 8009fde:	3220      	addls	r2, #32
 8009fe0:	42a2      	cmp	r2, r4
 8009fe2:	d0f0      	beq.n	8009fc6 <__match+0x6>
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7f3      	b.n	8009fd0 <__match+0x10>

08009fe8 <__hexnan>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	2500      	movs	r5, #0
 8009fee:	680b      	ldr	r3, [r1, #0]
 8009ff0:	4682      	mov	sl, r0
 8009ff2:	115e      	asrs	r6, r3, #5
 8009ff4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ff8:	f013 031f 	ands.w	r3, r3, #31
 8009ffc:	bf18      	it	ne
 8009ffe:	3604      	addne	r6, #4
 800a000:	1f37      	subs	r7, r6, #4
 800a002:	46b9      	mov	r9, r7
 800a004:	463c      	mov	r4, r7
 800a006:	46ab      	mov	fp, r5
 800a008:	b087      	sub	sp, #28
 800a00a:	4690      	mov	r8, r2
 800a00c:	6802      	ldr	r2, [r0, #0]
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	f846 5c04 	str.w	r5, [r6, #-4]
 800a014:	9502      	str	r5, [sp, #8]
 800a016:	7851      	ldrb	r1, [r2, #1]
 800a018:	1c53      	adds	r3, r2, #1
 800a01a:	9303      	str	r3, [sp, #12]
 800a01c:	b341      	cbz	r1, 800a070 <__hexnan+0x88>
 800a01e:	4608      	mov	r0, r1
 800a020:	9205      	str	r2, [sp, #20]
 800a022:	9104      	str	r1, [sp, #16]
 800a024:	f7ff fd69 	bl	8009afa <__hexdig_fun>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d14f      	bne.n	800a0cc <__hexnan+0xe4>
 800a02c:	9904      	ldr	r1, [sp, #16]
 800a02e:	9a05      	ldr	r2, [sp, #20]
 800a030:	2920      	cmp	r1, #32
 800a032:	d818      	bhi.n	800a066 <__hexnan+0x7e>
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	459b      	cmp	fp, r3
 800a038:	dd13      	ble.n	800a062 <__hexnan+0x7a>
 800a03a:	454c      	cmp	r4, r9
 800a03c:	d206      	bcs.n	800a04c <__hexnan+0x64>
 800a03e:	2d07      	cmp	r5, #7
 800a040:	dc04      	bgt.n	800a04c <__hexnan+0x64>
 800a042:	462a      	mov	r2, r5
 800a044:	4649      	mov	r1, r9
 800a046:	4620      	mov	r0, r4
 800a048:	f7ff ffa8 	bl	8009f9c <L_shift>
 800a04c:	4544      	cmp	r4, r8
 800a04e:	d950      	bls.n	800a0f2 <__hexnan+0x10a>
 800a050:	2300      	movs	r3, #0
 800a052:	f1a4 0904 	sub.w	r9, r4, #4
 800a056:	f844 3c04 	str.w	r3, [r4, #-4]
 800a05a:	461d      	mov	r5, r3
 800a05c:	464c      	mov	r4, r9
 800a05e:	f8cd b008 	str.w	fp, [sp, #8]
 800a062:	9a03      	ldr	r2, [sp, #12]
 800a064:	e7d7      	b.n	800a016 <__hexnan+0x2e>
 800a066:	2929      	cmp	r1, #41	; 0x29
 800a068:	d156      	bne.n	800a118 <__hexnan+0x130>
 800a06a:	3202      	adds	r2, #2
 800a06c:	f8ca 2000 	str.w	r2, [sl]
 800a070:	f1bb 0f00 	cmp.w	fp, #0
 800a074:	d050      	beq.n	800a118 <__hexnan+0x130>
 800a076:	454c      	cmp	r4, r9
 800a078:	d206      	bcs.n	800a088 <__hexnan+0xa0>
 800a07a:	2d07      	cmp	r5, #7
 800a07c:	dc04      	bgt.n	800a088 <__hexnan+0xa0>
 800a07e:	462a      	mov	r2, r5
 800a080:	4649      	mov	r1, r9
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff ff8a 	bl	8009f9c <L_shift>
 800a088:	4544      	cmp	r4, r8
 800a08a:	d934      	bls.n	800a0f6 <__hexnan+0x10e>
 800a08c:	4623      	mov	r3, r4
 800a08e:	f1a8 0204 	sub.w	r2, r8, #4
 800a092:	f853 1b04 	ldr.w	r1, [r3], #4
 800a096:	429f      	cmp	r7, r3
 800a098:	f842 1f04 	str.w	r1, [r2, #4]!
 800a09c:	d2f9      	bcs.n	800a092 <__hexnan+0xaa>
 800a09e:	1b3b      	subs	r3, r7, r4
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	3e03      	subs	r6, #3
 800a0aa:	42b4      	cmp	r4, r6
 800a0ac:	bf88      	it	hi
 800a0ae:	2304      	movhi	r3, #4
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4443      	add	r3, r8
 800a0b4:	f843 2b04 	str.w	r2, [r3], #4
 800a0b8:	429f      	cmp	r7, r3
 800a0ba:	d2fb      	bcs.n	800a0b4 <__hexnan+0xcc>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	b91b      	cbnz	r3, 800a0c8 <__hexnan+0xe0>
 800a0c0:	4547      	cmp	r7, r8
 800a0c2:	d127      	bne.n	800a114 <__hexnan+0x12c>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	2005      	movs	r0, #5
 800a0ca:	e026      	b.n	800a11a <__hexnan+0x132>
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	2d08      	cmp	r5, #8
 800a0d0:	f10b 0b01 	add.w	fp, fp, #1
 800a0d4:	dd06      	ble.n	800a0e4 <__hexnan+0xfc>
 800a0d6:	4544      	cmp	r4, r8
 800a0d8:	d9c3      	bls.n	800a062 <__hexnan+0x7a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2501      	movs	r5, #1
 800a0de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0e2:	3c04      	subs	r4, #4
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	f000 000f 	and.w	r0, r0, #15
 800a0ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a0ee:	6022      	str	r2, [r4, #0]
 800a0f0:	e7b7      	b.n	800a062 <__hexnan+0x7a>
 800a0f2:	2508      	movs	r5, #8
 800a0f4:	e7b5      	b.n	800a062 <__hexnan+0x7a>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0df      	beq.n	800a0bc <__hexnan+0xd4>
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a100:	f1c3 0320 	rsb	r3, r3, #32
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
 800a108:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a10c:	401a      	ands	r2, r3
 800a10e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a112:	e7d3      	b.n	800a0bc <__hexnan+0xd4>
 800a114:	3f04      	subs	r7, #4
 800a116:	e7d1      	b.n	800a0bc <__hexnan+0xd4>
 800a118:	2004      	movs	r0, #4
 800a11a:	b007      	add	sp, #28
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a120 <_localeconv_r>:
 800a120:	4800      	ldr	r0, [pc, #0]	; (800a124 <_localeconv_r+0x4>)
 800a122:	4770      	bx	lr
 800a124:	2000016c 	.word	0x2000016c

0800a128 <malloc>:
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <malloc+0xc>)
 800a12a:	4601      	mov	r1, r0
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f000 bd57 	b.w	800abe0 <_malloc_r>
 800a132:	bf00      	nop
 800a134:	20000014 	.word	0x20000014

0800a138 <__ascii_mbtowc>:
 800a138:	b082      	sub	sp, #8
 800a13a:	b901      	cbnz	r1, 800a13e <__ascii_mbtowc+0x6>
 800a13c:	a901      	add	r1, sp, #4
 800a13e:	b142      	cbz	r2, 800a152 <__ascii_mbtowc+0x1a>
 800a140:	b14b      	cbz	r3, 800a156 <__ascii_mbtowc+0x1e>
 800a142:	7813      	ldrb	r3, [r2, #0]
 800a144:	600b      	str	r3, [r1, #0]
 800a146:	7812      	ldrb	r2, [r2, #0]
 800a148:	1e10      	subs	r0, r2, #0
 800a14a:	bf18      	it	ne
 800a14c:	2001      	movne	r0, #1
 800a14e:	b002      	add	sp, #8
 800a150:	4770      	bx	lr
 800a152:	4610      	mov	r0, r2
 800a154:	e7fb      	b.n	800a14e <__ascii_mbtowc+0x16>
 800a156:	f06f 0001 	mvn.w	r0, #1
 800a15a:	e7f8      	b.n	800a14e <__ascii_mbtowc+0x16>

0800a15c <memchr>:
 800a15c:	4603      	mov	r3, r0
 800a15e:	b510      	push	{r4, lr}
 800a160:	b2c9      	uxtb	r1, r1
 800a162:	4402      	add	r2, r0
 800a164:	4293      	cmp	r3, r2
 800a166:	4618      	mov	r0, r3
 800a168:	d101      	bne.n	800a16e <memchr+0x12>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e003      	b.n	800a176 <memchr+0x1a>
 800a16e:	7804      	ldrb	r4, [r0, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	428c      	cmp	r4, r1
 800a174:	d1f6      	bne.n	800a164 <memchr+0x8>
 800a176:	bd10      	pop	{r4, pc}

0800a178 <_Balloc>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Balloc+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ffd0 	bl	800a128 <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	6260      	str	r0, [r4, #36]	; 0x24
 800a18c:	b920      	cbnz	r0, 800a198 <_Balloc+0x20>
 800a18e:	2166      	movs	r1, #102	; 0x66
 800a190:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <_Balloc+0x78>)
 800a192:	4818      	ldr	r0, [pc, #96]	; (800a1f4 <_Balloc+0x7c>)
 800a194:	f000 ff2c 	bl	800aff0 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1a2:	68f3      	ldr	r3, [r6, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x50>
 800a1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x68>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1b6:	1d72      	adds	r2, r6, #5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	f000 fc94 	bl	800aae8 <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x64>
 800a1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x6e>
 800a1c8:	2221      	movs	r2, #33	; 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fc8b 	bl	800aae8 <_calloc_r>
 800a1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1d4:	60f0      	str	r0, [r6, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x2e>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x66>
 800a1ee:	bf00      	nop
 800a1f0:	0800be46 	.word	0x0800be46
 800a1f4:	0800bf44 	.word	0x0800bf44

0800a1f8 <_Bfree>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Bfree+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7ff ff90 	bl	800a128 <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	6268      	str	r0, [r5, #36]	; 0x24
 800a20c:	b920      	cbnz	r0, 800a218 <_Bfree+0x20>
 800a20e:	218a      	movs	r1, #138	; 0x8a
 800a210:	4b08      	ldr	r3, [pc, #32]	; (800a234 <_Bfree+0x3c>)
 800a212:	4809      	ldr	r0, [pc, #36]	; (800a238 <_Bfree+0x40>)
 800a214:	f000 feec 	bl	800aff0 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	b13c      	cbz	r4, 800a232 <_Bfree+0x3a>
 800a222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a22c:	6021      	str	r1, [r4, #0]
 800a22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0800be46 	.word	0x0800be46
 800a238:	0800bf44 	.word	0x0800bf44

0800a23c <__multadd>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	4607      	mov	r7, r0
 800a242:	460c      	mov	r4, r1
 800a244:	461e      	mov	r6, r3
 800a246:	2000      	movs	r0, #0
 800a248:	690d      	ldr	r5, [r1, #16]
 800a24a:	f101 0c14 	add.w	ip, r1, #20
 800a24e:	f8dc 3000 	ldr.w	r3, [ip]
 800a252:	3001      	adds	r0, #1
 800a254:	b299      	uxth	r1, r3
 800a256:	fb02 6101 	mla	r1, r2, r1, r6
 800a25a:	0c1e      	lsrs	r6, r3, #16
 800a25c:	0c0b      	lsrs	r3, r1, #16
 800a25e:	fb02 3306 	mla	r3, r2, r6, r3
 800a262:	b289      	uxth	r1, r1
 800a264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a268:	4285      	cmp	r5, r0
 800a26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a26e:	f84c 1b04 	str.w	r1, [ip], #4
 800a272:	dcec      	bgt.n	800a24e <__multadd+0x12>
 800a274:	b30e      	cbz	r6, 800a2ba <__multadd+0x7e>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dc19      	bgt.n	800a2b0 <__multadd+0x74>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4638      	mov	r0, r7
 800a280:	3101      	adds	r1, #1
 800a282:	f7ff ff79 	bl	800a178 <_Balloc>
 800a286:	4680      	mov	r8, r0
 800a288:	b928      	cbnz	r0, 800a296 <__multadd+0x5a>
 800a28a:	4602      	mov	r2, r0
 800a28c:	21b5      	movs	r1, #181	; 0xb5
 800a28e:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <__multadd+0x84>)
 800a290:	480c      	ldr	r0, [pc, #48]	; (800a2c4 <__multadd+0x88>)
 800a292:	f000 fead 	bl	800aff0 <__assert_func>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	f104 010c 	add.w	r1, r4, #12
 800a29c:	3202      	adds	r2, #2
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7fd f825 	bl	80072f0 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ffa5 	bl	800a1f8 <_Bfree>
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	615e      	str	r6, [r3, #20]
 800a2b8:	6125      	str	r5, [r4, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	0800beb8 	.word	0x0800beb8
 800a2c4:	0800bf44 	.word	0x0800bf44

0800a2c8 <__s2b>:
 800a2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2cc:	4615      	mov	r5, r2
 800a2ce:	2209      	movs	r2, #9
 800a2d0:	461f      	mov	r7, r3
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2da:	4606      	mov	r6, r0
 800a2dc:	2201      	movs	r2, #1
 800a2de:	2100      	movs	r1, #0
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	db09      	blt.n	800a2f8 <__s2b+0x30>
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff ff47 	bl	800a178 <_Balloc>
 800a2ea:	b940      	cbnz	r0, 800a2fe <__s2b+0x36>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	21ce      	movs	r1, #206	; 0xce
 800a2f0:	4b18      	ldr	r3, [pc, #96]	; (800a354 <__s2b+0x8c>)
 800a2f2:	4819      	ldr	r0, [pc, #100]	; (800a358 <__s2b+0x90>)
 800a2f4:	f000 fe7c 	bl	800aff0 <__assert_func>
 800a2f8:	0052      	lsls	r2, r2, #1
 800a2fa:	3101      	adds	r1, #1
 800a2fc:	e7f0      	b.n	800a2e0 <__s2b+0x18>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	2d09      	cmp	r5, #9
 800a302:	6143      	str	r3, [r0, #20]
 800a304:	f04f 0301 	mov.w	r3, #1
 800a308:	6103      	str	r3, [r0, #16]
 800a30a:	dd16      	ble.n	800a33a <__s2b+0x72>
 800a30c:	f104 0909 	add.w	r9, r4, #9
 800a310:	46c8      	mov	r8, r9
 800a312:	442c      	add	r4, r5
 800a314:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a318:	4601      	mov	r1, r0
 800a31a:	220a      	movs	r2, #10
 800a31c:	4630      	mov	r0, r6
 800a31e:	3b30      	subs	r3, #48	; 0x30
 800a320:	f7ff ff8c 	bl	800a23c <__multadd>
 800a324:	45a0      	cmp	r8, r4
 800a326:	d1f5      	bne.n	800a314 <__s2b+0x4c>
 800a328:	f1a5 0408 	sub.w	r4, r5, #8
 800a32c:	444c      	add	r4, r9
 800a32e:	1b2d      	subs	r5, r5, r4
 800a330:	1963      	adds	r3, r4, r5
 800a332:	42bb      	cmp	r3, r7
 800a334:	db04      	blt.n	800a340 <__s2b+0x78>
 800a336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33a:	2509      	movs	r5, #9
 800a33c:	340a      	adds	r4, #10
 800a33e:	e7f6      	b.n	800a32e <__s2b+0x66>
 800a340:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a344:	4601      	mov	r1, r0
 800a346:	220a      	movs	r2, #10
 800a348:	4630      	mov	r0, r6
 800a34a:	3b30      	subs	r3, #48	; 0x30
 800a34c:	f7ff ff76 	bl	800a23c <__multadd>
 800a350:	e7ee      	b.n	800a330 <__s2b+0x68>
 800a352:	bf00      	nop
 800a354:	0800beb8 	.word	0x0800beb8
 800a358:	0800bf44 	.word	0x0800bf44

0800a35c <__hi0bits>:
 800a35c:	0c02      	lsrs	r2, r0, #16
 800a35e:	0412      	lsls	r2, r2, #16
 800a360:	4603      	mov	r3, r0
 800a362:	b9ca      	cbnz	r2, 800a398 <__hi0bits+0x3c>
 800a364:	0403      	lsls	r3, r0, #16
 800a366:	2010      	movs	r0, #16
 800a368:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a36c:	bf04      	itt	eq
 800a36e:	021b      	lsleq	r3, r3, #8
 800a370:	3008      	addeq	r0, #8
 800a372:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a376:	bf04      	itt	eq
 800a378:	011b      	lsleq	r3, r3, #4
 800a37a:	3004      	addeq	r0, #4
 800a37c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a380:	bf04      	itt	eq
 800a382:	009b      	lsleq	r3, r3, #2
 800a384:	3002      	addeq	r0, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	db05      	blt.n	800a396 <__hi0bits+0x3a>
 800a38a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a38e:	f100 0001 	add.w	r0, r0, #1
 800a392:	bf08      	it	eq
 800a394:	2020      	moveq	r0, #32
 800a396:	4770      	bx	lr
 800a398:	2000      	movs	r0, #0
 800a39a:	e7e5      	b.n	800a368 <__hi0bits+0xc>

0800a39c <__lo0bits>:
 800a39c:	6803      	ldr	r3, [r0, #0]
 800a39e:	4602      	mov	r2, r0
 800a3a0:	f013 0007 	ands.w	r0, r3, #7
 800a3a4:	d00b      	beq.n	800a3be <__lo0bits+0x22>
 800a3a6:	07d9      	lsls	r1, r3, #31
 800a3a8:	d421      	bmi.n	800a3ee <__lo0bits+0x52>
 800a3aa:	0798      	lsls	r0, r3, #30
 800a3ac:	bf49      	itett	mi
 800a3ae:	085b      	lsrmi	r3, r3, #1
 800a3b0:	089b      	lsrpl	r3, r3, #2
 800a3b2:	2001      	movmi	r0, #1
 800a3b4:	6013      	strmi	r3, [r2, #0]
 800a3b6:	bf5c      	itt	pl
 800a3b8:	2002      	movpl	r0, #2
 800a3ba:	6013      	strpl	r3, [r2, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	b909      	cbnz	r1, 800a3c6 <__lo0bits+0x2a>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	b2d9      	uxtb	r1, r3
 800a3c8:	b909      	cbnz	r1, 800a3ce <__lo0bits+0x32>
 800a3ca:	3008      	adds	r0, #8
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	0719      	lsls	r1, r3, #28
 800a3d0:	bf04      	itt	eq
 800a3d2:	091b      	lsreq	r3, r3, #4
 800a3d4:	3004      	addeq	r0, #4
 800a3d6:	0799      	lsls	r1, r3, #30
 800a3d8:	bf04      	itt	eq
 800a3da:	089b      	lsreq	r3, r3, #2
 800a3dc:	3002      	addeq	r0, #2
 800a3de:	07d9      	lsls	r1, r3, #31
 800a3e0:	d403      	bmi.n	800a3ea <__lo0bits+0x4e>
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	f100 0001 	add.w	r0, r0, #1
 800a3e8:	d003      	beq.n	800a3f2 <__lo0bits+0x56>
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4770      	bx	lr
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	4770      	bx	lr
 800a3f2:	2020      	movs	r0, #32
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <__i2b>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	f7ff febb 	bl	800a178 <_Balloc>
 800a402:	4602      	mov	r2, r0
 800a404:	b928      	cbnz	r0, 800a412 <__i2b+0x1a>
 800a406:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a40a:	4b04      	ldr	r3, [pc, #16]	; (800a41c <__i2b+0x24>)
 800a40c:	4804      	ldr	r0, [pc, #16]	; (800a420 <__i2b+0x28>)
 800a40e:	f000 fdef 	bl	800aff0 <__assert_func>
 800a412:	2301      	movs	r3, #1
 800a414:	6144      	str	r4, [r0, #20]
 800a416:	6103      	str	r3, [r0, #16]
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	0800beb8 	.word	0x0800beb8
 800a420:	0800bf44 	.word	0x0800bf44

0800a424 <__multiply>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4691      	mov	r9, r2
 800a42a:	690a      	ldr	r2, [r1, #16]
 800a42c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a430:	460c      	mov	r4, r1
 800a432:	429a      	cmp	r2, r3
 800a434:	bfbe      	ittt	lt
 800a436:	460b      	movlt	r3, r1
 800a438:	464c      	movlt	r4, r9
 800a43a:	4699      	movlt	r9, r3
 800a43c:	6927      	ldr	r7, [r4, #16]
 800a43e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	6861      	ldr	r1, [r4, #4]
 800a446:	eb07 060a 	add.w	r6, r7, sl
 800a44a:	42b3      	cmp	r3, r6
 800a44c:	b085      	sub	sp, #20
 800a44e:	bfb8      	it	lt
 800a450:	3101      	addlt	r1, #1
 800a452:	f7ff fe91 	bl	800a178 <_Balloc>
 800a456:	b930      	cbnz	r0, 800a466 <__multiply+0x42>
 800a458:	4602      	mov	r2, r0
 800a45a:	f240 115d 	movw	r1, #349	; 0x15d
 800a45e:	4b43      	ldr	r3, [pc, #268]	; (800a56c <__multiply+0x148>)
 800a460:	4843      	ldr	r0, [pc, #268]	; (800a570 <__multiply+0x14c>)
 800a462:	f000 fdc5 	bl	800aff0 <__assert_func>
 800a466:	f100 0514 	add.w	r5, r0, #20
 800a46a:	462b      	mov	r3, r5
 800a46c:	2200      	movs	r2, #0
 800a46e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a472:	4543      	cmp	r3, r8
 800a474:	d321      	bcc.n	800a4ba <__multiply+0x96>
 800a476:	f104 0314 	add.w	r3, r4, #20
 800a47a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a47e:	f109 0314 	add.w	r3, r9, #20
 800a482:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a486:	9202      	str	r2, [sp, #8]
 800a488:	1b3a      	subs	r2, r7, r4
 800a48a:	3a15      	subs	r2, #21
 800a48c:	f022 0203 	bic.w	r2, r2, #3
 800a490:	3204      	adds	r2, #4
 800a492:	f104 0115 	add.w	r1, r4, #21
 800a496:	428f      	cmp	r7, r1
 800a498:	bf38      	it	cc
 800a49a:	2204      	movcc	r2, #4
 800a49c:	9201      	str	r2, [sp, #4]
 800a49e:	9a02      	ldr	r2, [sp, #8]
 800a4a0:	9303      	str	r3, [sp, #12]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d80c      	bhi.n	800a4c0 <__multiply+0x9c>
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	dd03      	ble.n	800a4b2 <__multiply+0x8e>
 800a4aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d059      	beq.n	800a566 <__multiply+0x142>
 800a4b2:	6106      	str	r6, [r0, #16]
 800a4b4:	b005      	add	sp, #20
 800a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ba:	f843 2b04 	str.w	r2, [r3], #4
 800a4be:	e7d8      	b.n	800a472 <__multiply+0x4e>
 800a4c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4c4:	f1ba 0f00 	cmp.w	sl, #0
 800a4c8:	d023      	beq.n	800a512 <__multiply+0xee>
 800a4ca:	46a9      	mov	r9, r5
 800a4cc:	f04f 0c00 	mov.w	ip, #0
 800a4d0:	f104 0e14 	add.w	lr, r4, #20
 800a4d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4d8:	f8d9 1000 	ldr.w	r1, [r9]
 800a4dc:	fa1f fb82 	uxth.w	fp, r2
 800a4e0:	b289      	uxth	r1, r1
 800a4e2:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4e6:	4461      	add	r1, ip
 800a4e8:	f8d9 c000 	ldr.w	ip, [r9]
 800a4ec:	0c12      	lsrs	r2, r2, #16
 800a4ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a4f2:	fb0a c202 	mla	r2, sl, r2, ip
 800a4f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a500:	4577      	cmp	r7, lr
 800a502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a506:	f849 1b04 	str.w	r1, [r9], #4
 800a50a:	d8e3      	bhi.n	800a4d4 <__multiply+0xb0>
 800a50c:	9a01      	ldr	r2, [sp, #4]
 800a50e:	f845 c002 	str.w	ip, [r5, r2]
 800a512:	9a03      	ldr	r2, [sp, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	d020      	beq.n	800a562 <__multiply+0x13e>
 800a520:	46ae      	mov	lr, r5
 800a522:	f04f 0a00 	mov.w	sl, #0
 800a526:	6829      	ldr	r1, [r5, #0]
 800a528:	f104 0c14 	add.w	ip, r4, #20
 800a52c:	f8bc b000 	ldrh.w	fp, [ip]
 800a530:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a534:	b289      	uxth	r1, r1
 800a536:	fb09 220b 	mla	r2, r9, fp, r2
 800a53a:	4492      	add	sl, r2
 800a53c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a540:	f84e 1b04 	str.w	r1, [lr], #4
 800a544:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a548:	f8be 1000 	ldrh.w	r1, [lr]
 800a54c:	0c12      	lsrs	r2, r2, #16
 800a54e:	fb09 1102 	mla	r1, r9, r2, r1
 800a552:	4567      	cmp	r7, ip
 800a554:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a558:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a55c:	d8e6      	bhi.n	800a52c <__multiply+0x108>
 800a55e:	9a01      	ldr	r2, [sp, #4]
 800a560:	50a9      	str	r1, [r5, r2]
 800a562:	3504      	adds	r5, #4
 800a564:	e79b      	b.n	800a49e <__multiply+0x7a>
 800a566:	3e01      	subs	r6, #1
 800a568:	e79d      	b.n	800a4a6 <__multiply+0x82>
 800a56a:	bf00      	nop
 800a56c:	0800beb8 	.word	0x0800beb8
 800a570:	0800bf44 	.word	0x0800bf44

0800a574 <__pow5mult>:
 800a574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a578:	4615      	mov	r5, r2
 800a57a:	f012 0203 	ands.w	r2, r2, #3
 800a57e:	4606      	mov	r6, r0
 800a580:	460f      	mov	r7, r1
 800a582:	d007      	beq.n	800a594 <__pow5mult+0x20>
 800a584:	4c25      	ldr	r4, [pc, #148]	; (800a61c <__pow5mult+0xa8>)
 800a586:	3a01      	subs	r2, #1
 800a588:	2300      	movs	r3, #0
 800a58a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a58e:	f7ff fe55 	bl	800a23c <__multadd>
 800a592:	4607      	mov	r7, r0
 800a594:	10ad      	asrs	r5, r5, #2
 800a596:	d03d      	beq.n	800a614 <__pow5mult+0xa0>
 800a598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a59a:	b97c      	cbnz	r4, 800a5bc <__pow5mult+0x48>
 800a59c:	2010      	movs	r0, #16
 800a59e:	f7ff fdc3 	bl	800a128 <malloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6270      	str	r0, [r6, #36]	; 0x24
 800a5a6:	b928      	cbnz	r0, 800a5b4 <__pow5mult+0x40>
 800a5a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5ac:	4b1c      	ldr	r3, [pc, #112]	; (800a620 <__pow5mult+0xac>)
 800a5ae:	481d      	ldr	r0, [pc, #116]	; (800a624 <__pow5mult+0xb0>)
 800a5b0:	f000 fd1e 	bl	800aff0 <__assert_func>
 800a5b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5b8:	6004      	str	r4, [r0, #0]
 800a5ba:	60c4      	str	r4, [r0, #12]
 800a5bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5c4:	b94c      	cbnz	r4, 800a5da <__pow5mult+0x66>
 800a5c6:	f240 2171 	movw	r1, #625	; 0x271
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff ff14 	bl	800a3f8 <__i2b>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5d8:	6003      	str	r3, [r0, #0]
 800a5da:	f04f 0900 	mov.w	r9, #0
 800a5de:	07eb      	lsls	r3, r5, #31
 800a5e0:	d50a      	bpl.n	800a5f8 <__pow5mult+0x84>
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f7ff ff1c 	bl	800a424 <__multiply>
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff fe01 	bl	800a1f8 <_Bfree>
 800a5f6:	4647      	mov	r7, r8
 800a5f8:	106d      	asrs	r5, r5, #1
 800a5fa:	d00b      	beq.n	800a614 <__pow5mult+0xa0>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	b938      	cbnz	r0, 800a610 <__pow5mult+0x9c>
 800a600:	4622      	mov	r2, r4
 800a602:	4621      	mov	r1, r4
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff ff0d 	bl	800a424 <__multiply>
 800a60a:	6020      	str	r0, [r4, #0]
 800a60c:	f8c0 9000 	str.w	r9, [r0]
 800a610:	4604      	mov	r4, r0
 800a612:	e7e4      	b.n	800a5de <__pow5mult+0x6a>
 800a614:	4638      	mov	r0, r7
 800a616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a61a:	bf00      	nop
 800a61c:	0800c090 	.word	0x0800c090
 800a620:	0800be46 	.word	0x0800be46
 800a624:	0800bf44 	.word	0x0800bf44

0800a628 <__lshift>:
 800a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	460c      	mov	r4, r1
 800a62e:	4607      	mov	r7, r0
 800a630:	4691      	mov	r9, r2
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	6849      	ldr	r1, [r1, #4]
 800a636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a640:	f108 0601 	add.w	r6, r8, #1
 800a644:	42b3      	cmp	r3, r6
 800a646:	db0b      	blt.n	800a660 <__lshift+0x38>
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff fd95 	bl	800a178 <_Balloc>
 800a64e:	4605      	mov	r5, r0
 800a650:	b948      	cbnz	r0, 800a666 <__lshift+0x3e>
 800a652:	4602      	mov	r2, r0
 800a654:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a658:	4b29      	ldr	r3, [pc, #164]	; (800a700 <__lshift+0xd8>)
 800a65a:	482a      	ldr	r0, [pc, #168]	; (800a704 <__lshift+0xdc>)
 800a65c:	f000 fcc8 	bl	800aff0 <__assert_func>
 800a660:	3101      	adds	r1, #1
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	e7ee      	b.n	800a644 <__lshift+0x1c>
 800a666:	2300      	movs	r3, #0
 800a668:	f100 0114 	add.w	r1, r0, #20
 800a66c:	f100 0210 	add.w	r2, r0, #16
 800a670:	4618      	mov	r0, r3
 800a672:	4553      	cmp	r3, sl
 800a674:	db37      	blt.n	800a6e6 <__lshift+0xbe>
 800a676:	6920      	ldr	r0, [r4, #16]
 800a678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a67c:	f104 0314 	add.w	r3, r4, #20
 800a680:	f019 091f 	ands.w	r9, r9, #31
 800a684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a68c:	d02f      	beq.n	800a6ee <__lshift+0xc6>
 800a68e:	468a      	mov	sl, r1
 800a690:	f04f 0c00 	mov.w	ip, #0
 800a694:	f1c9 0e20 	rsb	lr, r9, #32
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	fa02 f209 	lsl.w	r2, r2, r9
 800a69e:	ea42 020c 	orr.w	r2, r2, ip
 800a6a2:	f84a 2b04 	str.w	r2, [sl], #4
 800a6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6aa:	4298      	cmp	r0, r3
 800a6ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6b0:	d8f2      	bhi.n	800a698 <__lshift+0x70>
 800a6b2:	1b03      	subs	r3, r0, r4
 800a6b4:	3b15      	subs	r3, #21
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	f104 0215 	add.w	r2, r4, #21
 800a6c0:	4290      	cmp	r0, r2
 800a6c2:	bf38      	it	cc
 800a6c4:	2304      	movcc	r3, #4
 800a6c6:	f841 c003 	str.w	ip, [r1, r3]
 800a6ca:	f1bc 0f00 	cmp.w	ip, #0
 800a6ce:	d001      	beq.n	800a6d4 <__lshift+0xac>
 800a6d0:	f108 0602 	add.w	r6, r8, #2
 800a6d4:	3e01      	subs	r6, #1
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	4621      	mov	r1, r4
 800a6da:	612e      	str	r6, [r5, #16]
 800a6dc:	f7ff fd8c 	bl	800a1f8 <_Bfree>
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	e7c1      	b.n	800a672 <__lshift+0x4a>
 800a6ee:	3904      	subs	r1, #4
 800a6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6fa:	d8f9      	bhi.n	800a6f0 <__lshift+0xc8>
 800a6fc:	e7ea      	b.n	800a6d4 <__lshift+0xac>
 800a6fe:	bf00      	nop
 800a700:	0800beb8 	.word	0x0800beb8
 800a704:	0800bf44 	.word	0x0800bf44

0800a708 <__mcmp>:
 800a708:	4603      	mov	r3, r0
 800a70a:	690a      	ldr	r2, [r1, #16]
 800a70c:	6900      	ldr	r0, [r0, #16]
 800a70e:	b530      	push	{r4, r5, lr}
 800a710:	1a80      	subs	r0, r0, r2
 800a712:	d10d      	bne.n	800a730 <__mcmp+0x28>
 800a714:	3314      	adds	r3, #20
 800a716:	3114      	adds	r1, #20
 800a718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a728:	4295      	cmp	r5, r2
 800a72a:	d002      	beq.n	800a732 <__mcmp+0x2a>
 800a72c:	d304      	bcc.n	800a738 <__mcmp+0x30>
 800a72e:	2001      	movs	r0, #1
 800a730:	bd30      	pop	{r4, r5, pc}
 800a732:	42a3      	cmp	r3, r4
 800a734:	d3f4      	bcc.n	800a720 <__mcmp+0x18>
 800a736:	e7fb      	b.n	800a730 <__mcmp+0x28>
 800a738:	f04f 30ff 	mov.w	r0, #4294967295
 800a73c:	e7f8      	b.n	800a730 <__mcmp+0x28>
	...

0800a740 <__mdiff>:
 800a740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	460d      	mov	r5, r1
 800a746:	4607      	mov	r7, r0
 800a748:	4611      	mov	r1, r2
 800a74a:	4628      	mov	r0, r5
 800a74c:	4614      	mov	r4, r2
 800a74e:	f7ff ffdb 	bl	800a708 <__mcmp>
 800a752:	1e06      	subs	r6, r0, #0
 800a754:	d111      	bne.n	800a77a <__mdiff+0x3a>
 800a756:	4631      	mov	r1, r6
 800a758:	4638      	mov	r0, r7
 800a75a:	f7ff fd0d 	bl	800a178 <_Balloc>
 800a75e:	4602      	mov	r2, r0
 800a760:	b928      	cbnz	r0, 800a76e <__mdiff+0x2e>
 800a762:	f240 2132 	movw	r1, #562	; 0x232
 800a766:	4b3a      	ldr	r3, [pc, #232]	; (800a850 <__mdiff+0x110>)
 800a768:	483a      	ldr	r0, [pc, #232]	; (800a854 <__mdiff+0x114>)
 800a76a:	f000 fc41 	bl	800aff0 <__assert_func>
 800a76e:	2301      	movs	r3, #1
 800a770:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a774:	4610      	mov	r0, r2
 800a776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77a:	bfa4      	itt	ge
 800a77c:	4623      	movge	r3, r4
 800a77e:	462c      	movge	r4, r5
 800a780:	4638      	mov	r0, r7
 800a782:	6861      	ldr	r1, [r4, #4]
 800a784:	bfa6      	itte	ge
 800a786:	461d      	movge	r5, r3
 800a788:	2600      	movge	r6, #0
 800a78a:	2601      	movlt	r6, #1
 800a78c:	f7ff fcf4 	bl	800a178 <_Balloc>
 800a790:	4602      	mov	r2, r0
 800a792:	b918      	cbnz	r0, 800a79c <__mdiff+0x5c>
 800a794:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a798:	4b2d      	ldr	r3, [pc, #180]	; (800a850 <__mdiff+0x110>)
 800a79a:	e7e5      	b.n	800a768 <__mdiff+0x28>
 800a79c:	f102 0814 	add.w	r8, r2, #20
 800a7a0:	46c2      	mov	sl, r8
 800a7a2:	f04f 0c00 	mov.w	ip, #0
 800a7a6:	6927      	ldr	r7, [r4, #16]
 800a7a8:	60c6      	str	r6, [r0, #12]
 800a7aa:	692e      	ldr	r6, [r5, #16]
 800a7ac:	f104 0014 	add.w	r0, r4, #20
 800a7b0:	f105 0914 	add.w	r9, r5, #20
 800a7b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a7b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7bc:	3410      	adds	r4, #16
 800a7be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a7c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7c6:	fa1f f18b 	uxth.w	r1, fp
 800a7ca:	448c      	add	ip, r1
 800a7cc:	b299      	uxth	r1, r3
 800a7ce:	0c1b      	lsrs	r3, r3, #16
 800a7d0:	ebac 0101 	sub.w	r1, ip, r1
 800a7d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a7dc:	b289      	uxth	r1, r1
 800a7de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a7e2:	454e      	cmp	r6, r9
 800a7e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a7e8:	f84a 3b04 	str.w	r3, [sl], #4
 800a7ec:	d8e7      	bhi.n	800a7be <__mdiff+0x7e>
 800a7ee:	1b73      	subs	r3, r6, r5
 800a7f0:	3b15      	subs	r3, #21
 800a7f2:	f023 0303 	bic.w	r3, r3, #3
 800a7f6:	3515      	adds	r5, #21
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	42ae      	cmp	r6, r5
 800a7fc:	bf38      	it	cc
 800a7fe:	2304      	movcc	r3, #4
 800a800:	4418      	add	r0, r3
 800a802:	4443      	add	r3, r8
 800a804:	461e      	mov	r6, r3
 800a806:	4605      	mov	r5, r0
 800a808:	4575      	cmp	r5, lr
 800a80a:	d30e      	bcc.n	800a82a <__mdiff+0xea>
 800a80c:	f10e 0103 	add.w	r1, lr, #3
 800a810:	1a09      	subs	r1, r1, r0
 800a812:	f021 0103 	bic.w	r1, r1, #3
 800a816:	3803      	subs	r0, #3
 800a818:	4586      	cmp	lr, r0
 800a81a:	bf38      	it	cc
 800a81c:	2100      	movcc	r1, #0
 800a81e:	4419      	add	r1, r3
 800a820:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a824:	b18b      	cbz	r3, 800a84a <__mdiff+0x10a>
 800a826:	6117      	str	r7, [r2, #16]
 800a828:	e7a4      	b.n	800a774 <__mdiff+0x34>
 800a82a:	f855 8b04 	ldr.w	r8, [r5], #4
 800a82e:	fa1f f188 	uxth.w	r1, r8
 800a832:	4461      	add	r1, ip
 800a834:	140c      	asrs	r4, r1, #16
 800a836:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a83a:	b289      	uxth	r1, r1
 800a83c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a840:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a844:	f846 1b04 	str.w	r1, [r6], #4
 800a848:	e7de      	b.n	800a808 <__mdiff+0xc8>
 800a84a:	3f01      	subs	r7, #1
 800a84c:	e7e8      	b.n	800a820 <__mdiff+0xe0>
 800a84e:	bf00      	nop
 800a850:	0800beb8 	.word	0x0800beb8
 800a854:	0800bf44 	.word	0x0800bf44

0800a858 <__ulp>:
 800a858:	4b11      	ldr	r3, [pc, #68]	; (800a8a0 <__ulp+0x48>)
 800a85a:	400b      	ands	r3, r1
 800a85c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a860:	2b00      	cmp	r3, #0
 800a862:	dd02      	ble.n	800a86a <__ulp+0x12>
 800a864:	2000      	movs	r0, #0
 800a866:	4619      	mov	r1, r3
 800a868:	4770      	bx	lr
 800a86a:	425b      	negs	r3, r3
 800a86c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a870:	f04f 0000 	mov.w	r0, #0
 800a874:	f04f 0100 	mov.w	r1, #0
 800a878:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a87c:	da04      	bge.n	800a888 <__ulp+0x30>
 800a87e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a882:	fa43 f102 	asr.w	r1, r3, r2
 800a886:	4770      	bx	lr
 800a888:	f1a2 0314 	sub.w	r3, r2, #20
 800a88c:	2b1e      	cmp	r3, #30
 800a88e:	bfd6      	itet	le
 800a890:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a894:	2301      	movgt	r3, #1
 800a896:	fa22 f303 	lsrle.w	r3, r2, r3
 800a89a:	4618      	mov	r0, r3
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	7ff00000 	.word	0x7ff00000

0800a8a4 <__b2d>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	6907      	ldr	r7, [r0, #16]
 800a8aa:	f100 0914 	add.w	r9, r0, #20
 800a8ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a8b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a8b6:	f1a7 0804 	sub.w	r8, r7, #4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff fd4e 	bl	800a35c <__hi0bits>
 800a8c0:	f1c0 0320 	rsb	r3, r0, #32
 800a8c4:	280a      	cmp	r0, #10
 800a8c6:	600b      	str	r3, [r1, #0]
 800a8c8:	491f      	ldr	r1, [pc, #124]	; (800a948 <__b2d+0xa4>)
 800a8ca:	dc17      	bgt.n	800a8fc <__b2d+0x58>
 800a8cc:	45c1      	cmp	r9, r8
 800a8ce:	bf28      	it	cs
 800a8d0:	2200      	movcs	r2, #0
 800a8d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a8d6:	fa26 f30c 	lsr.w	r3, r6, ip
 800a8da:	bf38      	it	cc
 800a8dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a8e0:	ea43 0501 	orr.w	r5, r3, r1
 800a8e4:	f100 0315 	add.w	r3, r0, #21
 800a8e8:	fa06 f303 	lsl.w	r3, r6, r3
 800a8ec:	fa22 f20c 	lsr.w	r2, r2, ip
 800a8f0:	ea43 0402 	orr.w	r4, r3, r2
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8fc:	45c1      	cmp	r9, r8
 800a8fe:	bf2e      	itee	cs
 800a900:	2200      	movcs	r2, #0
 800a902:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a906:	f1a7 0808 	subcc.w	r8, r7, #8
 800a90a:	f1b0 030b 	subs.w	r3, r0, #11
 800a90e:	d016      	beq.n	800a93e <__b2d+0x9a>
 800a910:	f1c3 0720 	rsb	r7, r3, #32
 800a914:	fa22 f107 	lsr.w	r1, r2, r7
 800a918:	45c8      	cmp	r8, r9
 800a91a:	fa06 f603 	lsl.w	r6, r6, r3
 800a91e:	ea46 0601 	orr.w	r6, r6, r1
 800a922:	bf94      	ite	ls
 800a924:	2100      	movls	r1, #0
 800a926:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a92a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a92e:	fa02 f003 	lsl.w	r0, r2, r3
 800a932:	40f9      	lsrs	r1, r7
 800a934:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a938:	ea40 0401 	orr.w	r4, r0, r1
 800a93c:	e7da      	b.n	800a8f4 <__b2d+0x50>
 800a93e:	4614      	mov	r4, r2
 800a940:	ea46 0501 	orr.w	r5, r6, r1
 800a944:	e7d6      	b.n	800a8f4 <__b2d+0x50>
 800a946:	bf00      	nop
 800a948:	3ff00000 	.word	0x3ff00000

0800a94c <__d2b>:
 800a94c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a950:	2101      	movs	r1, #1
 800a952:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a956:	4690      	mov	r8, r2
 800a958:	461d      	mov	r5, r3
 800a95a:	f7ff fc0d 	bl	800a178 <_Balloc>
 800a95e:	4604      	mov	r4, r0
 800a960:	b930      	cbnz	r0, 800a970 <__d2b+0x24>
 800a962:	4602      	mov	r2, r0
 800a964:	f240 310a 	movw	r1, #778	; 0x30a
 800a968:	4b24      	ldr	r3, [pc, #144]	; (800a9fc <__d2b+0xb0>)
 800a96a:	4825      	ldr	r0, [pc, #148]	; (800aa00 <__d2b+0xb4>)
 800a96c:	f000 fb40 	bl	800aff0 <__assert_func>
 800a970:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a974:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a978:	bb2d      	cbnz	r5, 800a9c6 <__d2b+0x7a>
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	f1b8 0300 	subs.w	r3, r8, #0
 800a980:	d026      	beq.n	800a9d0 <__d2b+0x84>
 800a982:	4668      	mov	r0, sp
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	f7ff fd09 	bl	800a39c <__lo0bits>
 800a98a:	9900      	ldr	r1, [sp, #0]
 800a98c:	b1f0      	cbz	r0, 800a9cc <__d2b+0x80>
 800a98e:	9a01      	ldr	r2, [sp, #4]
 800a990:	f1c0 0320 	rsb	r3, r0, #32
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	430b      	orrs	r3, r1
 800a99a:	40c2      	lsrs	r2, r0
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	9201      	str	r2, [sp, #4]
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bf14      	ite	ne
 800a9a6:	2102      	movne	r1, #2
 800a9a8:	2101      	moveq	r1, #1
 800a9aa:	61a3      	str	r3, [r4, #24]
 800a9ac:	6121      	str	r1, [r4, #16]
 800a9ae:	b1c5      	cbz	r5, 800a9e2 <__d2b+0x96>
 800a9b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a9b4:	4405      	add	r5, r0
 800a9b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a9ba:	603d      	str	r5, [r7, #0]
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	b002      	add	sp, #8
 800a9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9ca:	e7d6      	b.n	800a97a <__d2b+0x2e>
 800a9cc:	6161      	str	r1, [r4, #20]
 800a9ce:	e7e7      	b.n	800a9a0 <__d2b+0x54>
 800a9d0:	a801      	add	r0, sp, #4
 800a9d2:	f7ff fce3 	bl	800a39c <__lo0bits>
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	6121      	str	r1, [r4, #16]
 800a9dc:	6163      	str	r3, [r4, #20]
 800a9de:	3020      	adds	r0, #32
 800a9e0:	e7e5      	b.n	800a9ae <__d2b+0x62>
 800a9e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a9e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ea:	6038      	str	r0, [r7, #0]
 800a9ec:	6918      	ldr	r0, [r3, #16]
 800a9ee:	f7ff fcb5 	bl	800a35c <__hi0bits>
 800a9f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a9f6:	6031      	str	r1, [r6, #0]
 800a9f8:	e7e1      	b.n	800a9be <__d2b+0x72>
 800a9fa:	bf00      	nop
 800a9fc:	0800beb8 	.word	0x0800beb8
 800aa00:	0800bf44 	.word	0x0800bf44

0800aa04 <__ratio>:
 800aa04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	4688      	mov	r8, r1
 800aa0a:	4669      	mov	r1, sp
 800aa0c:	4681      	mov	r9, r0
 800aa0e:	f7ff ff49 	bl	800a8a4 <__b2d>
 800aa12:	460f      	mov	r7, r1
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	4640      	mov	r0, r8
 800aa1a:	a901      	add	r1, sp, #4
 800aa1c:	f7ff ff42 	bl	800a8a4 <__b2d>
 800aa20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa28:	468b      	mov	fp, r1
 800aa2a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfd5      	itete	le
 800aa3c:	460a      	movle	r2, r1
 800aa3e:	462a      	movgt	r2, r5
 800aa40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa48:	bfd8      	it	le
 800aa4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa4e:	465b      	mov	r3, fp
 800aa50:	4602      	mov	r2, r0
 800aa52:	4639      	mov	r1, r7
 800aa54:	4620      	mov	r0, r4
 800aa56:	f7f5 fe69 	bl	800072c <__aeabi_ddiv>
 800aa5a:	b003      	add	sp, #12
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa60 <__copybits>:
 800aa60:	3901      	subs	r1, #1
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	1149      	asrs	r1, r1, #5
 800aa66:	6914      	ldr	r4, [r2, #16]
 800aa68:	3101      	adds	r1, #1
 800aa6a:	f102 0314 	add.w	r3, r2, #20
 800aa6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa76:	1f05      	subs	r5, r0, #4
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d30c      	bcc.n	800aa96 <__copybits+0x36>
 800aa7c:	1aa3      	subs	r3, r4, r2
 800aa7e:	3b11      	subs	r3, #17
 800aa80:	f023 0303 	bic.w	r3, r3, #3
 800aa84:	3211      	adds	r2, #17
 800aa86:	42a2      	cmp	r2, r4
 800aa88:	bf88      	it	hi
 800aa8a:	2300      	movhi	r3, #0
 800aa8c:	4418      	add	r0, r3
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4288      	cmp	r0, r1
 800aa92:	d305      	bcc.n	800aaa0 <__copybits+0x40>
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa9e:	e7eb      	b.n	800aa78 <__copybits+0x18>
 800aaa0:	f840 3b04 	str.w	r3, [r0], #4
 800aaa4:	e7f4      	b.n	800aa90 <__copybits+0x30>

0800aaa6 <__any_on>:
 800aaa6:	f100 0214 	add.w	r2, r0, #20
 800aaaa:	6900      	ldr	r0, [r0, #16]
 800aaac:	114b      	asrs	r3, r1, #5
 800aaae:	4298      	cmp	r0, r3
 800aab0:	b510      	push	{r4, lr}
 800aab2:	db11      	blt.n	800aad8 <__any_on+0x32>
 800aab4:	dd0a      	ble.n	800aacc <__any_on+0x26>
 800aab6:	f011 011f 	ands.w	r1, r1, #31
 800aaba:	d007      	beq.n	800aacc <__any_on+0x26>
 800aabc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aac0:	fa24 f001 	lsr.w	r0, r4, r1
 800aac4:	fa00 f101 	lsl.w	r1, r0, r1
 800aac8:	428c      	cmp	r4, r1
 800aaca:	d10b      	bne.n	800aae4 <__any_on+0x3e>
 800aacc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d803      	bhi.n	800aadc <__any_on+0x36>
 800aad4:	2000      	movs	r0, #0
 800aad6:	bd10      	pop	{r4, pc}
 800aad8:	4603      	mov	r3, r0
 800aada:	e7f7      	b.n	800aacc <__any_on+0x26>
 800aadc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aae0:	2900      	cmp	r1, #0
 800aae2:	d0f5      	beq.n	800aad0 <__any_on+0x2a>
 800aae4:	2001      	movs	r0, #1
 800aae6:	e7f6      	b.n	800aad6 <__any_on+0x30>

0800aae8 <_calloc_r>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	fba1 5402 	umull	r5, r4, r1, r2
 800aaee:	b934      	cbnz	r4, 800aafe <_calloc_r+0x16>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f000 f875 	bl	800abe0 <_malloc_r>
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	b928      	cbnz	r0, 800ab06 <_calloc_r+0x1e>
 800aafa:	4630      	mov	r0, r6
 800aafc:	bd70      	pop	{r4, r5, r6, pc}
 800aafe:	220c      	movs	r2, #12
 800ab00:	2600      	movs	r6, #0
 800ab02:	6002      	str	r2, [r0, #0]
 800ab04:	e7f9      	b.n	800aafa <_calloc_r+0x12>
 800ab06:	462a      	mov	r2, r5
 800ab08:	4621      	mov	r1, r4
 800ab0a:	f7fc fbff 	bl	800730c <memset>
 800ab0e:	e7f4      	b.n	800aafa <_calloc_r+0x12>

0800ab10 <_free_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4605      	mov	r5, r0
 800ab14:	2900      	cmp	r1, #0
 800ab16:	d040      	beq.n	800ab9a <_free_r+0x8a>
 800ab18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab1c:	1f0c      	subs	r4, r1, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfb8      	it	lt
 800ab22:	18e4      	addlt	r4, r4, r3
 800ab24:	f000 faae 	bl	800b084 <__malloc_lock>
 800ab28:	4a1c      	ldr	r2, [pc, #112]	; (800ab9c <_free_r+0x8c>)
 800ab2a:	6813      	ldr	r3, [r2, #0]
 800ab2c:	b933      	cbnz	r3, 800ab3c <_free_r+0x2c>
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	6014      	str	r4, [r2, #0]
 800ab32:	4628      	mov	r0, r5
 800ab34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab38:	f000 baaa 	b.w	800b090 <__malloc_unlock>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d908      	bls.n	800ab52 <_free_r+0x42>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	1821      	adds	r1, r4, r0
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bf01      	itttt	eq
 800ab48:	6819      	ldreq	r1, [r3, #0]
 800ab4a:	685b      	ldreq	r3, [r3, #4]
 800ab4c:	1809      	addeq	r1, r1, r0
 800ab4e:	6021      	streq	r1, [r4, #0]
 800ab50:	e7ed      	b.n	800ab2e <_free_r+0x1e>
 800ab52:	461a      	mov	r2, r3
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	b10b      	cbz	r3, 800ab5c <_free_r+0x4c>
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d9fa      	bls.n	800ab52 <_free_r+0x42>
 800ab5c:	6811      	ldr	r1, [r2, #0]
 800ab5e:	1850      	adds	r0, r2, r1
 800ab60:	42a0      	cmp	r0, r4
 800ab62:	d10b      	bne.n	800ab7c <_free_r+0x6c>
 800ab64:	6820      	ldr	r0, [r4, #0]
 800ab66:	4401      	add	r1, r0
 800ab68:	1850      	adds	r0, r2, r1
 800ab6a:	4283      	cmp	r3, r0
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	d1e0      	bne.n	800ab32 <_free_r+0x22>
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4401      	add	r1, r0
 800ab76:	6011      	str	r1, [r2, #0]
 800ab78:	6053      	str	r3, [r2, #4]
 800ab7a:	e7da      	b.n	800ab32 <_free_r+0x22>
 800ab7c:	d902      	bls.n	800ab84 <_free_r+0x74>
 800ab7e:	230c      	movs	r3, #12
 800ab80:	602b      	str	r3, [r5, #0]
 800ab82:	e7d6      	b.n	800ab32 <_free_r+0x22>
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	1821      	adds	r1, r4, r0
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf01      	itttt	eq
 800ab8c:	6819      	ldreq	r1, [r3, #0]
 800ab8e:	685b      	ldreq	r3, [r3, #4]
 800ab90:	1809      	addeq	r1, r1, r0
 800ab92:	6021      	streq	r1, [r4, #0]
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	6054      	str	r4, [r2, #4]
 800ab98:	e7cb      	b.n	800ab32 <_free_r+0x22>
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	20001c8c 	.word	0x20001c8c

0800aba0 <sbrk_aligned>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4e0e      	ldr	r6, [pc, #56]	; (800abdc <sbrk_aligned+0x3c>)
 800aba4:	460c      	mov	r4, r1
 800aba6:	6831      	ldr	r1, [r6, #0]
 800aba8:	4605      	mov	r5, r0
 800abaa:	b911      	cbnz	r1, 800abb2 <sbrk_aligned+0x12>
 800abac:	f000 f9ee 	bl	800af8c <_sbrk_r>
 800abb0:	6030      	str	r0, [r6, #0]
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 f9e9 	bl	800af8c <_sbrk_r>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d00a      	beq.n	800abd4 <sbrk_aligned+0x34>
 800abbe:	1cc4      	adds	r4, r0, #3
 800abc0:	f024 0403 	bic.w	r4, r4, #3
 800abc4:	42a0      	cmp	r0, r4
 800abc6:	d007      	beq.n	800abd8 <sbrk_aligned+0x38>
 800abc8:	1a21      	subs	r1, r4, r0
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f9de 	bl	800af8c <_sbrk_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d101      	bne.n	800abd8 <sbrk_aligned+0x38>
 800abd4:	f04f 34ff 	mov.w	r4, #4294967295
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	20001c90 	.word	0x20001c90

0800abe0 <_malloc_r>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	1ccd      	adds	r5, r1, #3
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	4607      	mov	r7, r0
 800abf6:	db01      	blt.n	800abfc <_malloc_r+0x1c>
 800abf8:	42a9      	cmp	r1, r5
 800abfa:	d905      	bls.n	800ac08 <_malloc_r+0x28>
 800abfc:	230c      	movs	r3, #12
 800abfe:	2600      	movs	r6, #0
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4630      	mov	r0, r6
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4e2e      	ldr	r6, [pc, #184]	; (800acc4 <_malloc_r+0xe4>)
 800ac0a:	f000 fa3b 	bl	800b084 <__malloc_lock>
 800ac0e:	6833      	ldr	r3, [r6, #0]
 800ac10:	461c      	mov	r4, r3
 800ac12:	bb34      	cbnz	r4, 800ac62 <_malloc_r+0x82>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ffc2 	bl	800aba0 <sbrk_aligned>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	4604      	mov	r4, r0
 800ac20:	d14d      	bne.n	800acbe <_malloc_r+0xde>
 800ac22:	6834      	ldr	r4, [r6, #0]
 800ac24:	4626      	mov	r6, r4
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d140      	bne.n	800acac <_malloc_r+0xcc>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4638      	mov	r0, r7
 800ac30:	eb04 0803 	add.w	r8, r4, r3
 800ac34:	f000 f9aa 	bl	800af8c <_sbrk_r>
 800ac38:	4580      	cmp	r8, r0
 800ac3a:	d13a      	bne.n	800acb2 <_malloc_r+0xd2>
 800ac3c:	6821      	ldr	r1, [r4, #0]
 800ac3e:	3503      	adds	r5, #3
 800ac40:	1a6d      	subs	r5, r5, r1
 800ac42:	f025 0503 	bic.w	r5, r5, #3
 800ac46:	3508      	adds	r5, #8
 800ac48:	2d0c      	cmp	r5, #12
 800ac4a:	bf38      	it	cc
 800ac4c:	250c      	movcc	r5, #12
 800ac4e:	4638      	mov	r0, r7
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7ff ffa5 	bl	800aba0 <sbrk_aligned>
 800ac56:	3001      	adds	r0, #1
 800ac58:	d02b      	beq.n	800acb2 <_malloc_r+0xd2>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	442b      	add	r3, r5
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	e00e      	b.n	800ac80 <_malloc_r+0xa0>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	1b52      	subs	r2, r2, r5
 800ac66:	d41e      	bmi.n	800aca6 <_malloc_r+0xc6>
 800ac68:	2a0b      	cmp	r2, #11
 800ac6a:	d916      	bls.n	800ac9a <_malloc_r+0xba>
 800ac6c:	1961      	adds	r1, r4, r5
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6025      	str	r5, [r4, #0]
 800ac72:	bf18      	it	ne
 800ac74:	6059      	strne	r1, [r3, #4]
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	bf08      	it	eq
 800ac7a:	6031      	streq	r1, [r6, #0]
 800ac7c:	5162      	str	r2, [r4, r5]
 800ac7e:	604b      	str	r3, [r1, #4]
 800ac80:	4638      	mov	r0, r7
 800ac82:	f104 060b 	add.w	r6, r4, #11
 800ac86:	f000 fa03 	bl	800b090 <__malloc_unlock>
 800ac8a:	f026 0607 	bic.w	r6, r6, #7
 800ac8e:	1d23      	adds	r3, r4, #4
 800ac90:	1af2      	subs	r2, r6, r3
 800ac92:	d0b6      	beq.n	800ac02 <_malloc_r+0x22>
 800ac94:	1b9b      	subs	r3, r3, r6
 800ac96:	50a3      	str	r3, [r4, r2]
 800ac98:	e7b3      	b.n	800ac02 <_malloc_r+0x22>
 800ac9a:	6862      	ldr	r2, [r4, #4]
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	bf0c      	ite	eq
 800aca0:	6032      	streq	r2, [r6, #0]
 800aca2:	605a      	strne	r2, [r3, #4]
 800aca4:	e7ec      	b.n	800ac80 <_malloc_r+0xa0>
 800aca6:	4623      	mov	r3, r4
 800aca8:	6864      	ldr	r4, [r4, #4]
 800acaa:	e7b2      	b.n	800ac12 <_malloc_r+0x32>
 800acac:	4634      	mov	r4, r6
 800acae:	6876      	ldr	r6, [r6, #4]
 800acb0:	e7b9      	b.n	800ac26 <_malloc_r+0x46>
 800acb2:	230c      	movs	r3, #12
 800acb4:	4638      	mov	r0, r7
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	f000 f9ea 	bl	800b090 <__malloc_unlock>
 800acbc:	e7a1      	b.n	800ac02 <_malloc_r+0x22>
 800acbe:	6025      	str	r5, [r4, #0]
 800acc0:	e7de      	b.n	800ac80 <_malloc_r+0xa0>
 800acc2:	bf00      	nop
 800acc4:	20001c8c 	.word	0x20001c8c

0800acc8 <__ssputs_r>:
 800acc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800accc:	688e      	ldr	r6, [r1, #8]
 800acce:	4682      	mov	sl, r0
 800acd0:	429e      	cmp	r6, r3
 800acd2:	460c      	mov	r4, r1
 800acd4:	4690      	mov	r8, r2
 800acd6:	461f      	mov	r7, r3
 800acd8:	d838      	bhi.n	800ad4c <__ssputs_r+0x84>
 800acda:	898a      	ldrh	r2, [r1, #12]
 800acdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace0:	d032      	beq.n	800ad48 <__ssputs_r+0x80>
 800ace2:	6825      	ldr	r5, [r4, #0]
 800ace4:	6909      	ldr	r1, [r1, #16]
 800ace6:	3301      	adds	r3, #1
 800ace8:	eba5 0901 	sub.w	r9, r5, r1
 800acec:	6965      	ldr	r5, [r4, #20]
 800acee:	444b      	add	r3, r9
 800acf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acf8:	106d      	asrs	r5, r5, #1
 800acfa:	429d      	cmp	r5, r3
 800acfc:	bf38      	it	cc
 800acfe:	461d      	movcc	r5, r3
 800ad00:	0553      	lsls	r3, r2, #21
 800ad02:	d531      	bpl.n	800ad68 <__ssputs_r+0xa0>
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7ff ff6b 	bl	800abe0 <_malloc_r>
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	b950      	cbnz	r0, 800ad24 <__ssputs_r+0x5c>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	f8ca 3000 	str.w	r3, [sl]
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad24:	464a      	mov	r2, r9
 800ad26:	6921      	ldr	r1, [r4, #16]
 800ad28:	f7fc fae2 	bl	80072f0 <memcpy>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	6126      	str	r6, [r4, #16]
 800ad3a:	444e      	add	r6, r9
 800ad3c:	6026      	str	r6, [r4, #0]
 800ad3e:	463e      	mov	r6, r7
 800ad40:	6165      	str	r5, [r4, #20]
 800ad42:	eba5 0509 	sub.w	r5, r5, r9
 800ad46:	60a5      	str	r5, [r4, #8]
 800ad48:	42be      	cmp	r6, r7
 800ad4a:	d900      	bls.n	800ad4e <__ssputs_r+0x86>
 800ad4c:	463e      	mov	r6, r7
 800ad4e:	4632      	mov	r2, r6
 800ad50:	4641      	mov	r1, r8
 800ad52:	6820      	ldr	r0, [r4, #0]
 800ad54:	f000 f97c 	bl	800b050 <memmove>
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	1b9b      	subs	r3, r3, r6
 800ad5e:	60a3      	str	r3, [r4, #8]
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	4433      	add	r3, r6
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	e7db      	b.n	800ad20 <__ssputs_r+0x58>
 800ad68:	462a      	mov	r2, r5
 800ad6a:	f000 f997 	bl	800b09c <_realloc_r>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1e1      	bne.n	800ad38 <__ssputs_r+0x70>
 800ad74:	4650      	mov	r0, sl
 800ad76:	6921      	ldr	r1, [r4, #16]
 800ad78:	f7ff feca 	bl	800ab10 <_free_r>
 800ad7c:	e7c7      	b.n	800ad0e <__ssputs_r+0x46>
	...

0800ad80 <_svfiprintf_r>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	4698      	mov	r8, r3
 800ad86:	898b      	ldrh	r3, [r1, #12]
 800ad88:	4607      	mov	r7, r0
 800ad8a:	061b      	lsls	r3, r3, #24
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	4614      	mov	r4, r2
 800ad90:	b09d      	sub	sp, #116	; 0x74
 800ad92:	d50e      	bpl.n	800adb2 <_svfiprintf_r+0x32>
 800ad94:	690b      	ldr	r3, [r1, #16]
 800ad96:	b963      	cbnz	r3, 800adb2 <_svfiprintf_r+0x32>
 800ad98:	2140      	movs	r1, #64	; 0x40
 800ad9a:	f7ff ff21 	bl	800abe0 <_malloc_r>
 800ad9e:	6028      	str	r0, [r5, #0]
 800ada0:	6128      	str	r0, [r5, #16]
 800ada2:	b920      	cbnz	r0, 800adae <_svfiprintf_r+0x2e>
 800ada4:	230c      	movs	r3, #12
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e0d1      	b.n	800af52 <_svfiprintf_r+0x1d2>
 800adae:	2340      	movs	r3, #64	; 0x40
 800adb0:	616b      	str	r3, [r5, #20]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9309      	str	r3, [sp, #36]	; 0x24
 800adb6:	2320      	movs	r3, #32
 800adb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adbc:	2330      	movs	r3, #48	; 0x30
 800adbe:	f04f 0901 	mov.w	r9, #1
 800adc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af6c <_svfiprintf_r+0x1ec>
 800adca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adce:	4623      	mov	r3, r4
 800add0:	469a      	mov	sl, r3
 800add2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add6:	b10a      	cbz	r2, 800addc <_svfiprintf_r+0x5c>
 800add8:	2a25      	cmp	r2, #37	; 0x25
 800adda:	d1f9      	bne.n	800add0 <_svfiprintf_r+0x50>
 800addc:	ebba 0b04 	subs.w	fp, sl, r4
 800ade0:	d00b      	beq.n	800adfa <_svfiprintf_r+0x7a>
 800ade2:	465b      	mov	r3, fp
 800ade4:	4622      	mov	r2, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff ff6d 	bl	800acc8 <__ssputs_r>
 800adee:	3001      	adds	r0, #1
 800adf0:	f000 80aa 	beq.w	800af48 <_svfiprintf_r+0x1c8>
 800adf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf6:	445a      	add	r2, fp
 800adf8:	9209      	str	r2, [sp, #36]	; 0x24
 800adfa:	f89a 3000 	ldrb.w	r3, [sl]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 80a2 	beq.w	800af48 <_svfiprintf_r+0x1c8>
 800ae04:	2300      	movs	r3, #0
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae0e:	f10a 0a01 	add.w	sl, sl, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae1c:	4654      	mov	r4, sl
 800ae1e:	2205      	movs	r2, #5
 800ae20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae24:	4851      	ldr	r0, [pc, #324]	; (800af6c <_svfiprintf_r+0x1ec>)
 800ae26:	f7ff f999 	bl	800a15c <memchr>
 800ae2a:	9a04      	ldr	r2, [sp, #16]
 800ae2c:	b9d8      	cbnz	r0, 800ae66 <_svfiprintf_r+0xe6>
 800ae2e:	06d0      	lsls	r0, r2, #27
 800ae30:	bf44      	itt	mi
 800ae32:	2320      	movmi	r3, #32
 800ae34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae38:	0711      	lsls	r1, r2, #28
 800ae3a:	bf44      	itt	mi
 800ae3c:	232b      	movmi	r3, #43	; 0x2b
 800ae3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae42:	f89a 3000 	ldrb.w	r3, [sl]
 800ae46:	2b2a      	cmp	r3, #42	; 0x2a
 800ae48:	d015      	beq.n	800ae76 <_svfiprintf_r+0xf6>
 800ae4a:	4654      	mov	r4, sl
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	f04f 0c0a 	mov.w	ip, #10
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4621      	mov	r1, r4
 800ae56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5a:	3b30      	subs	r3, #48	; 0x30
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d94e      	bls.n	800aefe <_svfiprintf_r+0x17e>
 800ae60:	b1b0      	cbz	r0, 800ae90 <_svfiprintf_r+0x110>
 800ae62:	9207      	str	r2, [sp, #28]
 800ae64:	e014      	b.n	800ae90 <_svfiprintf_r+0x110>
 800ae66:	eba0 0308 	sub.w	r3, r0, r8
 800ae6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	46a2      	mov	sl, r4
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	e7d2      	b.n	800ae1c <_svfiprintf_r+0x9c>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9103      	str	r1, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfbb      	ittet	lt
 800ae82:	425b      	neglt	r3, r3
 800ae84:	f042 0202 	orrlt.w	r2, r2, #2
 800ae88:	9307      	strge	r3, [sp, #28]
 800ae8a:	9307      	strlt	r3, [sp, #28]
 800ae8c:	bfb8      	it	lt
 800ae8e:	9204      	strlt	r2, [sp, #16]
 800ae90:	7823      	ldrb	r3, [r4, #0]
 800ae92:	2b2e      	cmp	r3, #46	; 0x2e
 800ae94:	d10c      	bne.n	800aeb0 <_svfiprintf_r+0x130>
 800ae96:	7863      	ldrb	r3, [r4, #1]
 800ae98:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9a:	d135      	bne.n	800af08 <_svfiprintf_r+0x188>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	3402      	adds	r4, #2
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	9203      	str	r2, [sp, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfb8      	it	lt
 800aeaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af70 <_svfiprintf_r+0x1f0>
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	7821      	ldrb	r1, [r4, #0]
 800aeba:	f7ff f94f 	bl	800a15c <memchr>
 800aebe:	b140      	cbz	r0, 800aed2 <_svfiprintf_r+0x152>
 800aec0:	2340      	movs	r3, #64	; 0x40
 800aec2:	eba0 000a 	sub.w	r0, r0, sl
 800aec6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	3401      	adds	r4, #1
 800aece:	4303      	orrs	r3, r0
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	2206      	movs	r2, #6
 800aed8:	4826      	ldr	r0, [pc, #152]	; (800af74 <_svfiprintf_r+0x1f4>)
 800aeda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aede:	f7ff f93d 	bl	800a15c <memchr>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d038      	beq.n	800af58 <_svfiprintf_r+0x1d8>
 800aee6:	4b24      	ldr	r3, [pc, #144]	; (800af78 <_svfiprintf_r+0x1f8>)
 800aee8:	bb1b      	cbnz	r3, 800af32 <_svfiprintf_r+0x1b2>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	3307      	adds	r3, #7
 800aeee:	f023 0307 	bic.w	r3, r3, #7
 800aef2:	3308      	adds	r3, #8
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	4433      	add	r3, r6
 800aefa:	9309      	str	r3, [sp, #36]	; 0x24
 800aefc:	e767      	b.n	800adce <_svfiprintf_r+0x4e>
 800aefe:	460c      	mov	r4, r1
 800af00:	2001      	movs	r0, #1
 800af02:	fb0c 3202 	mla	r2, ip, r2, r3
 800af06:	e7a5      	b.n	800ae54 <_svfiprintf_r+0xd4>
 800af08:	2300      	movs	r3, #0
 800af0a:	f04f 0c0a 	mov.w	ip, #10
 800af0e:	4619      	mov	r1, r3
 800af10:	3401      	adds	r4, #1
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	4620      	mov	r0, r4
 800af16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1a:	3a30      	subs	r2, #48	; 0x30
 800af1c:	2a09      	cmp	r2, #9
 800af1e:	d903      	bls.n	800af28 <_svfiprintf_r+0x1a8>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0c5      	beq.n	800aeb0 <_svfiprintf_r+0x130>
 800af24:	9105      	str	r1, [sp, #20]
 800af26:	e7c3      	b.n	800aeb0 <_svfiprintf_r+0x130>
 800af28:	4604      	mov	r4, r0
 800af2a:	2301      	movs	r3, #1
 800af2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af30:	e7f0      	b.n	800af14 <_svfiprintf_r+0x194>
 800af32:	ab03      	add	r3, sp, #12
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	462a      	mov	r2, r5
 800af38:	4638      	mov	r0, r7
 800af3a:	4b10      	ldr	r3, [pc, #64]	; (800af7c <_svfiprintf_r+0x1fc>)
 800af3c:	a904      	add	r1, sp, #16
 800af3e:	f7fc fa8b 	bl	8007458 <_printf_float>
 800af42:	1c42      	adds	r2, r0, #1
 800af44:	4606      	mov	r6, r0
 800af46:	d1d6      	bne.n	800aef6 <_svfiprintf_r+0x176>
 800af48:	89ab      	ldrh	r3, [r5, #12]
 800af4a:	065b      	lsls	r3, r3, #25
 800af4c:	f53f af2c 	bmi.w	800ada8 <_svfiprintf_r+0x28>
 800af50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af52:	b01d      	add	sp, #116	; 0x74
 800af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af58:	ab03      	add	r3, sp, #12
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	462a      	mov	r2, r5
 800af5e:	4638      	mov	r0, r7
 800af60:	4b06      	ldr	r3, [pc, #24]	; (800af7c <_svfiprintf_r+0x1fc>)
 800af62:	a904      	add	r1, sp, #16
 800af64:	f7fc fd14 	bl	8007990 <_printf_i>
 800af68:	e7eb      	b.n	800af42 <_svfiprintf_r+0x1c2>
 800af6a:	bf00      	nop
 800af6c:	0800c09c 	.word	0x0800c09c
 800af70:	0800c0a2 	.word	0x0800c0a2
 800af74:	0800c0a6 	.word	0x0800c0a6
 800af78:	08007459 	.word	0x08007459
 800af7c:	0800acc9 	.word	0x0800acc9

0800af80 <nan>:
 800af80:	2000      	movs	r0, #0
 800af82:	4901      	ldr	r1, [pc, #4]	; (800af88 <nan+0x8>)
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	7ff80000 	.word	0x7ff80000

0800af8c <_sbrk_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	2300      	movs	r3, #0
 800af90:	4d05      	ldr	r5, [pc, #20]	; (800afa8 <_sbrk_r+0x1c>)
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f6 fe40 	bl	8001c1c <_sbrk>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_sbrk_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_sbrk_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20001c94 	.word	0x20001c94

0800afac <strncmp>:
 800afac:	4603      	mov	r3, r0
 800afae:	b510      	push	{r4, lr}
 800afb0:	b172      	cbz	r2, 800afd0 <strncmp+0x24>
 800afb2:	3901      	subs	r1, #1
 800afb4:	1884      	adds	r4, r0, r2
 800afb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800afbe:	4290      	cmp	r0, r2
 800afc0:	d101      	bne.n	800afc6 <strncmp+0x1a>
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	d101      	bne.n	800afca <strncmp+0x1e>
 800afc6:	1a80      	subs	r0, r0, r2
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	2800      	cmp	r0, #0
 800afcc:	d1f3      	bne.n	800afb6 <strncmp+0xa>
 800afce:	e7fa      	b.n	800afc6 <strncmp+0x1a>
 800afd0:	4610      	mov	r0, r2
 800afd2:	e7f9      	b.n	800afc8 <strncmp+0x1c>

0800afd4 <__ascii_wctomb>:
 800afd4:	4603      	mov	r3, r0
 800afd6:	4608      	mov	r0, r1
 800afd8:	b141      	cbz	r1, 800afec <__ascii_wctomb+0x18>
 800afda:	2aff      	cmp	r2, #255	; 0xff
 800afdc:	d904      	bls.n	800afe8 <__ascii_wctomb+0x14>
 800afde:	228a      	movs	r2, #138	; 0x8a
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	4770      	bx	lr
 800afe8:	2001      	movs	r0, #1
 800afea:	700a      	strb	r2, [r1, #0]
 800afec:	4770      	bx	lr
	...

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <__assert_func+0x2c>)
 800aff8:	4605      	mov	r5, r0
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b14c      	cbz	r4, 800b014 <__assert_func+0x24>
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <__assert_func+0x30>)
 800b002:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b006:	9100      	str	r1, [sp, #0]
 800b008:	462b      	mov	r3, r5
 800b00a:	4906      	ldr	r1, [pc, #24]	; (800b024 <__assert_func+0x34>)
 800b00c:	f000 f80e 	bl	800b02c <fiprintf>
 800b010:	f000 fa8a 	bl	800b528 <abort>
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <__assert_func+0x38>)
 800b016:	461c      	mov	r4, r3
 800b018:	e7f3      	b.n	800b002 <__assert_func+0x12>
 800b01a:	bf00      	nop
 800b01c:	20000014 	.word	0x20000014
 800b020:	0800c0ad 	.word	0x0800c0ad
 800b024:	0800c0ba 	.word	0x0800c0ba
 800b028:	0800c0e8 	.word	0x0800c0e8

0800b02c <fiprintf>:
 800b02c:	b40e      	push	{r1, r2, r3}
 800b02e:	b503      	push	{r0, r1, lr}
 800b030:	4601      	mov	r1, r0
 800b032:	ab03      	add	r3, sp, #12
 800b034:	4805      	ldr	r0, [pc, #20]	; (800b04c <fiprintf+0x20>)
 800b036:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	f000 f883 	bl	800b148 <_vfiprintf_r>
 800b042:	b002      	add	sp, #8
 800b044:	f85d eb04 	ldr.w	lr, [sp], #4
 800b048:	b003      	add	sp, #12
 800b04a:	4770      	bx	lr
 800b04c:	20000014 	.word	0x20000014

0800b050 <memmove>:
 800b050:	4288      	cmp	r0, r1
 800b052:	b510      	push	{r4, lr}
 800b054:	eb01 0402 	add.w	r4, r1, r2
 800b058:	d902      	bls.n	800b060 <memmove+0x10>
 800b05a:	4284      	cmp	r4, r0
 800b05c:	4623      	mov	r3, r4
 800b05e:	d807      	bhi.n	800b070 <memmove+0x20>
 800b060:	1e43      	subs	r3, r0, #1
 800b062:	42a1      	cmp	r1, r4
 800b064:	d008      	beq.n	800b078 <memmove+0x28>
 800b066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b06e:	e7f8      	b.n	800b062 <memmove+0x12>
 800b070:	4601      	mov	r1, r0
 800b072:	4402      	add	r2, r0
 800b074:	428a      	cmp	r2, r1
 800b076:	d100      	bne.n	800b07a <memmove+0x2a>
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b082:	e7f7      	b.n	800b074 <memmove+0x24>

0800b084 <__malloc_lock>:
 800b084:	4801      	ldr	r0, [pc, #4]	; (800b08c <__malloc_lock+0x8>)
 800b086:	f000 bc0b 	b.w	800b8a0 <__retarget_lock_acquire_recursive>
 800b08a:	bf00      	nop
 800b08c:	20001c98 	.word	0x20001c98

0800b090 <__malloc_unlock>:
 800b090:	4801      	ldr	r0, [pc, #4]	; (800b098 <__malloc_unlock+0x8>)
 800b092:	f000 bc06 	b.w	800b8a2 <__retarget_lock_release_recursive>
 800b096:	bf00      	nop
 800b098:	20001c98 	.word	0x20001c98

0800b09c <_realloc_r>:
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	4614      	mov	r4, r2
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	b921      	cbnz	r1, 800b0b2 <_realloc_r+0x16>
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	f7ff bd97 	b.w	800abe0 <_malloc_r>
 800b0b2:	b92a      	cbnz	r2, 800b0c0 <_realloc_r+0x24>
 800b0b4:	f7ff fd2c 	bl	800ab10 <_free_r>
 800b0b8:	4625      	mov	r5, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c0:	f000 fc56 	bl	800b970 <_malloc_usable_size_r>
 800b0c4:	4284      	cmp	r4, r0
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	d802      	bhi.n	800b0d0 <_realloc_r+0x34>
 800b0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ce:	d812      	bhi.n	800b0f6 <_realloc_r+0x5a>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	f7ff fd84 	bl	800abe0 <_malloc_r>
 800b0d8:	4605      	mov	r5, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0ed      	beq.n	800b0ba <_realloc_r+0x1e>
 800b0de:	42bc      	cmp	r4, r7
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	bf28      	it	cs
 800b0e6:	463a      	movcs	r2, r7
 800b0e8:	f7fc f902 	bl	80072f0 <memcpy>
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	f7ff fd0e 	bl	800ab10 <_free_r>
 800b0f4:	e7e1      	b.n	800b0ba <_realloc_r+0x1e>
 800b0f6:	4635      	mov	r5, r6
 800b0f8:	e7df      	b.n	800b0ba <_realloc_r+0x1e>

0800b0fa <__sfputc_r>:
 800b0fa:	6893      	ldr	r3, [r2, #8]
 800b0fc:	b410      	push	{r4}
 800b0fe:	3b01      	subs	r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	6093      	str	r3, [r2, #8]
 800b104:	da07      	bge.n	800b116 <__sfputc_r+0x1c>
 800b106:	6994      	ldr	r4, [r2, #24]
 800b108:	42a3      	cmp	r3, r4
 800b10a:	db01      	blt.n	800b110 <__sfputc_r+0x16>
 800b10c:	290a      	cmp	r1, #10
 800b10e:	d102      	bne.n	800b116 <__sfputc_r+0x1c>
 800b110:	bc10      	pop	{r4}
 800b112:	f000 b949 	b.w	800b3a8 <__swbuf_r>
 800b116:	6813      	ldr	r3, [r2, #0]
 800b118:	1c58      	adds	r0, r3, #1
 800b11a:	6010      	str	r0, [r2, #0]
 800b11c:	7019      	strb	r1, [r3, #0]
 800b11e:	4608      	mov	r0, r1
 800b120:	bc10      	pop	{r4}
 800b122:	4770      	bx	lr

0800b124 <__sfputs_r>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	4606      	mov	r6, r0
 800b128:	460f      	mov	r7, r1
 800b12a:	4614      	mov	r4, r2
 800b12c:	18d5      	adds	r5, r2, r3
 800b12e:	42ac      	cmp	r4, r5
 800b130:	d101      	bne.n	800b136 <__sfputs_r+0x12>
 800b132:	2000      	movs	r0, #0
 800b134:	e007      	b.n	800b146 <__sfputs_r+0x22>
 800b136:	463a      	mov	r2, r7
 800b138:	4630      	mov	r0, r6
 800b13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13e:	f7ff ffdc 	bl	800b0fa <__sfputc_r>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d1f3      	bne.n	800b12e <__sfputs_r+0xa>
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b148 <_vfiprintf_r>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	460d      	mov	r5, r1
 800b14e:	4614      	mov	r4, r2
 800b150:	4698      	mov	r8, r3
 800b152:	4606      	mov	r6, r0
 800b154:	b09d      	sub	sp, #116	; 0x74
 800b156:	b118      	cbz	r0, 800b160 <_vfiprintf_r+0x18>
 800b158:	6983      	ldr	r3, [r0, #24]
 800b15a:	b90b      	cbnz	r3, 800b160 <_vfiprintf_r+0x18>
 800b15c:	f000 fb02 	bl	800b764 <__sinit>
 800b160:	4b89      	ldr	r3, [pc, #548]	; (800b388 <_vfiprintf_r+0x240>)
 800b162:	429d      	cmp	r5, r3
 800b164:	d11b      	bne.n	800b19e <_vfiprintf_r+0x56>
 800b166:	6875      	ldr	r5, [r6, #4]
 800b168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b16a:	07d9      	lsls	r1, r3, #31
 800b16c:	d405      	bmi.n	800b17a <_vfiprintf_r+0x32>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	059a      	lsls	r2, r3, #22
 800b172:	d402      	bmi.n	800b17a <_vfiprintf_r+0x32>
 800b174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b176:	f000 fb93 	bl	800b8a0 <__retarget_lock_acquire_recursive>
 800b17a:	89ab      	ldrh	r3, [r5, #12]
 800b17c:	071b      	lsls	r3, r3, #28
 800b17e:	d501      	bpl.n	800b184 <_vfiprintf_r+0x3c>
 800b180:	692b      	ldr	r3, [r5, #16]
 800b182:	b9eb      	cbnz	r3, 800b1c0 <_vfiprintf_r+0x78>
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f000 f960 	bl	800b44c <__swsetup_r>
 800b18c:	b1c0      	cbz	r0, 800b1c0 <_vfiprintf_r+0x78>
 800b18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b190:	07dc      	lsls	r4, r3, #31
 800b192:	d50e      	bpl.n	800b1b2 <_vfiprintf_r+0x6a>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b01d      	add	sp, #116	; 0x74
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	4b7b      	ldr	r3, [pc, #492]	; (800b38c <_vfiprintf_r+0x244>)
 800b1a0:	429d      	cmp	r5, r3
 800b1a2:	d101      	bne.n	800b1a8 <_vfiprintf_r+0x60>
 800b1a4:	68b5      	ldr	r5, [r6, #8]
 800b1a6:	e7df      	b.n	800b168 <_vfiprintf_r+0x20>
 800b1a8:	4b79      	ldr	r3, [pc, #484]	; (800b390 <_vfiprintf_r+0x248>)
 800b1aa:	429d      	cmp	r5, r3
 800b1ac:	bf08      	it	eq
 800b1ae:	68f5      	ldreq	r5, [r6, #12]
 800b1b0:	e7da      	b.n	800b168 <_vfiprintf_r+0x20>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	0598      	lsls	r0, r3, #22
 800b1b6:	d4ed      	bmi.n	800b194 <_vfiprintf_r+0x4c>
 800b1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ba:	f000 fb72 	bl	800b8a2 <__retarget_lock_release_recursive>
 800b1be:	e7e9      	b.n	800b194 <_vfiprintf_r+0x4c>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	2320      	movs	r3, #32
 800b1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ca:	2330      	movs	r3, #48	; 0x30
 800b1cc:	f04f 0901 	mov.w	r9, #1
 800b1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b394 <_vfiprintf_r+0x24c>
 800b1d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1dc:	4623      	mov	r3, r4
 800b1de:	469a      	mov	sl, r3
 800b1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e4:	b10a      	cbz	r2, 800b1ea <_vfiprintf_r+0xa2>
 800b1e6:	2a25      	cmp	r2, #37	; 0x25
 800b1e8:	d1f9      	bne.n	800b1de <_vfiprintf_r+0x96>
 800b1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ee:	d00b      	beq.n	800b208 <_vfiprintf_r+0xc0>
 800b1f0:	465b      	mov	r3, fp
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ff94 	bl	800b124 <__sfputs_r>
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f000 80aa 	beq.w	800b356 <_vfiprintf_r+0x20e>
 800b202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b204:	445a      	add	r2, fp
 800b206:	9209      	str	r2, [sp, #36]	; 0x24
 800b208:	f89a 3000 	ldrb.w	r3, [sl]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 80a2 	beq.w	800b356 <_vfiprintf_r+0x20e>
 800b212:	2300      	movs	r3, #0
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b21c:	f10a 0a01 	add.w	sl, sl, #1
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b228:	931a      	str	r3, [sp, #104]	; 0x68
 800b22a:	4654      	mov	r4, sl
 800b22c:	2205      	movs	r2, #5
 800b22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b232:	4858      	ldr	r0, [pc, #352]	; (800b394 <_vfiprintf_r+0x24c>)
 800b234:	f7fe ff92 	bl	800a15c <memchr>
 800b238:	9a04      	ldr	r2, [sp, #16]
 800b23a:	b9d8      	cbnz	r0, 800b274 <_vfiprintf_r+0x12c>
 800b23c:	06d1      	lsls	r1, r2, #27
 800b23e:	bf44      	itt	mi
 800b240:	2320      	movmi	r3, #32
 800b242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b246:	0713      	lsls	r3, r2, #28
 800b248:	bf44      	itt	mi
 800b24a:	232b      	movmi	r3, #43	; 0x2b
 800b24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b250:	f89a 3000 	ldrb.w	r3, [sl]
 800b254:	2b2a      	cmp	r3, #42	; 0x2a
 800b256:	d015      	beq.n	800b284 <_vfiprintf_r+0x13c>
 800b258:	4654      	mov	r4, sl
 800b25a:	2000      	movs	r0, #0
 800b25c:	f04f 0c0a 	mov.w	ip, #10
 800b260:	9a07      	ldr	r2, [sp, #28]
 800b262:	4621      	mov	r1, r4
 800b264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b268:	3b30      	subs	r3, #48	; 0x30
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d94e      	bls.n	800b30c <_vfiprintf_r+0x1c4>
 800b26e:	b1b0      	cbz	r0, 800b29e <_vfiprintf_r+0x156>
 800b270:	9207      	str	r2, [sp, #28]
 800b272:	e014      	b.n	800b29e <_vfiprintf_r+0x156>
 800b274:	eba0 0308 	sub.w	r3, r0, r8
 800b278:	fa09 f303 	lsl.w	r3, r9, r3
 800b27c:	4313      	orrs	r3, r2
 800b27e:	46a2      	mov	sl, r4
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	e7d2      	b.n	800b22a <_vfiprintf_r+0xe2>
 800b284:	9b03      	ldr	r3, [sp, #12]
 800b286:	1d19      	adds	r1, r3, #4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	9103      	str	r1, [sp, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bfbb      	ittet	lt
 800b290:	425b      	neglt	r3, r3
 800b292:	f042 0202 	orrlt.w	r2, r2, #2
 800b296:	9307      	strge	r3, [sp, #28]
 800b298:	9307      	strlt	r3, [sp, #28]
 800b29a:	bfb8      	it	lt
 800b29c:	9204      	strlt	r2, [sp, #16]
 800b29e:	7823      	ldrb	r3, [r4, #0]
 800b2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a2:	d10c      	bne.n	800b2be <_vfiprintf_r+0x176>
 800b2a4:	7863      	ldrb	r3, [r4, #1]
 800b2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a8:	d135      	bne.n	800b316 <_vfiprintf_r+0x1ce>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	3402      	adds	r4, #2
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9203      	str	r2, [sp, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfb8      	it	lt
 800b2b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b398 <_vfiprintf_r+0x250>
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	7821      	ldrb	r1, [r4, #0]
 800b2c8:	f7fe ff48 	bl	800a15c <memchr>
 800b2cc:	b140      	cbz	r0, 800b2e0 <_vfiprintf_r+0x198>
 800b2ce:	2340      	movs	r3, #64	; 0x40
 800b2d0:	eba0 000a 	sub.w	r0, r0, sl
 800b2d4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	3401      	adds	r4, #1
 800b2dc:	4303      	orrs	r3, r0
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e4:	2206      	movs	r2, #6
 800b2e6:	482d      	ldr	r0, [pc, #180]	; (800b39c <_vfiprintf_r+0x254>)
 800b2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ec:	f7fe ff36 	bl	800a15c <memchr>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d03f      	beq.n	800b374 <_vfiprintf_r+0x22c>
 800b2f4:	4b2a      	ldr	r3, [pc, #168]	; (800b3a0 <_vfiprintf_r+0x258>)
 800b2f6:	bb1b      	cbnz	r3, 800b340 <_vfiprintf_r+0x1f8>
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	3307      	adds	r3, #7
 800b2fc:	f023 0307 	bic.w	r3, r3, #7
 800b300:	3308      	adds	r3, #8
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b306:	443b      	add	r3, r7
 800b308:	9309      	str	r3, [sp, #36]	; 0x24
 800b30a:	e767      	b.n	800b1dc <_vfiprintf_r+0x94>
 800b30c:	460c      	mov	r4, r1
 800b30e:	2001      	movs	r0, #1
 800b310:	fb0c 3202 	mla	r2, ip, r2, r3
 800b314:	e7a5      	b.n	800b262 <_vfiprintf_r+0x11a>
 800b316:	2300      	movs	r3, #0
 800b318:	f04f 0c0a 	mov.w	ip, #10
 800b31c:	4619      	mov	r1, r3
 800b31e:	3401      	adds	r4, #1
 800b320:	9305      	str	r3, [sp, #20]
 800b322:	4620      	mov	r0, r4
 800b324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b328:	3a30      	subs	r2, #48	; 0x30
 800b32a:	2a09      	cmp	r2, #9
 800b32c:	d903      	bls.n	800b336 <_vfiprintf_r+0x1ee>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0c5      	beq.n	800b2be <_vfiprintf_r+0x176>
 800b332:	9105      	str	r1, [sp, #20]
 800b334:	e7c3      	b.n	800b2be <_vfiprintf_r+0x176>
 800b336:	4604      	mov	r4, r0
 800b338:	2301      	movs	r3, #1
 800b33a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b33e:	e7f0      	b.n	800b322 <_vfiprintf_r+0x1da>
 800b340:	ab03      	add	r3, sp, #12
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	462a      	mov	r2, r5
 800b346:	4630      	mov	r0, r6
 800b348:	4b16      	ldr	r3, [pc, #88]	; (800b3a4 <_vfiprintf_r+0x25c>)
 800b34a:	a904      	add	r1, sp, #16
 800b34c:	f7fc f884 	bl	8007458 <_printf_float>
 800b350:	4607      	mov	r7, r0
 800b352:	1c78      	adds	r0, r7, #1
 800b354:	d1d6      	bne.n	800b304 <_vfiprintf_r+0x1bc>
 800b356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b358:	07d9      	lsls	r1, r3, #31
 800b35a:	d405      	bmi.n	800b368 <_vfiprintf_r+0x220>
 800b35c:	89ab      	ldrh	r3, [r5, #12]
 800b35e:	059a      	lsls	r2, r3, #22
 800b360:	d402      	bmi.n	800b368 <_vfiprintf_r+0x220>
 800b362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b364:	f000 fa9d 	bl	800b8a2 <__retarget_lock_release_recursive>
 800b368:	89ab      	ldrh	r3, [r5, #12]
 800b36a:	065b      	lsls	r3, r3, #25
 800b36c:	f53f af12 	bmi.w	800b194 <_vfiprintf_r+0x4c>
 800b370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b372:	e711      	b.n	800b198 <_vfiprintf_r+0x50>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	462a      	mov	r2, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <_vfiprintf_r+0x25c>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	f7fc fb06 	bl	8007990 <_printf_i>
 800b384:	e7e4      	b.n	800b350 <_vfiprintf_r+0x208>
 800b386:	bf00      	nop
 800b388:	0800c10c 	.word	0x0800c10c
 800b38c:	0800c12c 	.word	0x0800c12c
 800b390:	0800c0ec 	.word	0x0800c0ec
 800b394:	0800c09c 	.word	0x0800c09c
 800b398:	0800c0a2 	.word	0x0800c0a2
 800b39c:	0800c0a6 	.word	0x0800c0a6
 800b3a0:	08007459 	.word	0x08007459
 800b3a4:	0800b125 	.word	0x0800b125

0800b3a8 <__swbuf_r>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	460e      	mov	r6, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	b118      	cbz	r0, 800b3ba <__swbuf_r+0x12>
 800b3b2:	6983      	ldr	r3, [r0, #24]
 800b3b4:	b90b      	cbnz	r3, 800b3ba <__swbuf_r+0x12>
 800b3b6:	f000 f9d5 	bl	800b764 <__sinit>
 800b3ba:	4b21      	ldr	r3, [pc, #132]	; (800b440 <__swbuf_r+0x98>)
 800b3bc:	429c      	cmp	r4, r3
 800b3be:	d12b      	bne.n	800b418 <__swbuf_r+0x70>
 800b3c0:	686c      	ldr	r4, [r5, #4]
 800b3c2:	69a3      	ldr	r3, [r4, #24]
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	071a      	lsls	r2, r3, #28
 800b3ca:	d52f      	bpl.n	800b42c <__swbuf_r+0x84>
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	b36b      	cbz	r3, 800b42c <__swbuf_r+0x84>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	6820      	ldr	r0, [r4, #0]
 800b3d4:	b2f6      	uxtb	r6, r6
 800b3d6:	1ac0      	subs	r0, r0, r3
 800b3d8:	6963      	ldr	r3, [r4, #20]
 800b3da:	4637      	mov	r7, r6
 800b3dc:	4283      	cmp	r3, r0
 800b3de:	dc04      	bgt.n	800b3ea <__swbuf_r+0x42>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f92a 	bl	800b63c <_fflush_r>
 800b3e8:	bb30      	cbnz	r0, 800b438 <__swbuf_r+0x90>
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	60a3      	str	r3, [r4, #8]
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	6022      	str	r2, [r4, #0]
 800b3f8:	701e      	strb	r6, [r3, #0]
 800b3fa:	6963      	ldr	r3, [r4, #20]
 800b3fc:	4283      	cmp	r3, r0
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x62>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	07db      	lsls	r3, r3, #31
 800b404:	d506      	bpl.n	800b414 <__swbuf_r+0x6c>
 800b406:	2e0a      	cmp	r6, #10
 800b408:	d104      	bne.n	800b414 <__swbuf_r+0x6c>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f915 	bl	800b63c <_fflush_r>
 800b412:	b988      	cbnz	r0, 800b438 <__swbuf_r+0x90>
 800b414:	4638      	mov	r0, r7
 800b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <__swbuf_r+0x9c>)
 800b41a:	429c      	cmp	r4, r3
 800b41c:	d101      	bne.n	800b422 <__swbuf_r+0x7a>
 800b41e:	68ac      	ldr	r4, [r5, #8]
 800b420:	e7cf      	b.n	800b3c2 <__swbuf_r+0x1a>
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <__swbuf_r+0xa0>)
 800b424:	429c      	cmp	r4, r3
 800b426:	bf08      	it	eq
 800b428:	68ec      	ldreq	r4, [r5, #12]
 800b42a:	e7ca      	b.n	800b3c2 <__swbuf_r+0x1a>
 800b42c:	4621      	mov	r1, r4
 800b42e:	4628      	mov	r0, r5
 800b430:	f000 f80c 	bl	800b44c <__swsetup_r>
 800b434:	2800      	cmp	r0, #0
 800b436:	d0cb      	beq.n	800b3d0 <__swbuf_r+0x28>
 800b438:	f04f 37ff 	mov.w	r7, #4294967295
 800b43c:	e7ea      	b.n	800b414 <__swbuf_r+0x6c>
 800b43e:	bf00      	nop
 800b440:	0800c10c 	.word	0x0800c10c
 800b444:	0800c12c 	.word	0x0800c12c
 800b448:	0800c0ec 	.word	0x0800c0ec

0800b44c <__swsetup_r>:
 800b44c:	4b32      	ldr	r3, [pc, #200]	; (800b518 <__swsetup_r+0xcc>)
 800b44e:	b570      	push	{r4, r5, r6, lr}
 800b450:	681d      	ldr	r5, [r3, #0]
 800b452:	4606      	mov	r6, r0
 800b454:	460c      	mov	r4, r1
 800b456:	b125      	cbz	r5, 800b462 <__swsetup_r+0x16>
 800b458:	69ab      	ldr	r3, [r5, #24]
 800b45a:	b913      	cbnz	r3, 800b462 <__swsetup_r+0x16>
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 f981 	bl	800b764 <__sinit>
 800b462:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <__swsetup_r+0xd0>)
 800b464:	429c      	cmp	r4, r3
 800b466:	d10f      	bne.n	800b488 <__swsetup_r+0x3c>
 800b468:	686c      	ldr	r4, [r5, #4]
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b470:	0719      	lsls	r1, r3, #28
 800b472:	d42c      	bmi.n	800b4ce <__swsetup_r+0x82>
 800b474:	06dd      	lsls	r5, r3, #27
 800b476:	d411      	bmi.n	800b49c <__swsetup_r+0x50>
 800b478:	2309      	movs	r3, #9
 800b47a:	6033      	str	r3, [r6, #0]
 800b47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	e03e      	b.n	800b506 <__swsetup_r+0xba>
 800b488:	4b25      	ldr	r3, [pc, #148]	; (800b520 <__swsetup_r+0xd4>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d101      	bne.n	800b492 <__swsetup_r+0x46>
 800b48e:	68ac      	ldr	r4, [r5, #8]
 800b490:	e7eb      	b.n	800b46a <__swsetup_r+0x1e>
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <__swsetup_r+0xd8>)
 800b494:	429c      	cmp	r4, r3
 800b496:	bf08      	it	eq
 800b498:	68ec      	ldreq	r4, [r5, #12]
 800b49a:	e7e6      	b.n	800b46a <__swsetup_r+0x1e>
 800b49c:	0758      	lsls	r0, r3, #29
 800b49e:	d512      	bpl.n	800b4c6 <__swsetup_r+0x7a>
 800b4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4a2:	b141      	cbz	r1, 800b4b6 <__swsetup_r+0x6a>
 800b4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	d002      	beq.n	800b4b2 <__swsetup_r+0x66>
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fb2f 	bl	800ab10 <_free_r>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4bc:	81a3      	strh	r3, [r4, #12]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6063      	str	r3, [r4, #4]
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	6923      	ldr	r3, [r4, #16]
 800b4d0:	b94b      	cbnz	r3, 800b4e6 <__swsetup_r+0x9a>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4dc:	d003      	beq.n	800b4e6 <__swsetup_r+0x9a>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f000 fa05 	bl	800b8f0 <__smakebuf_r>
 800b4e6:	89a0      	ldrh	r0, [r4, #12]
 800b4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ec:	f010 0301 	ands.w	r3, r0, #1
 800b4f0:	d00a      	beq.n	800b508 <__swsetup_r+0xbc>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	6963      	ldr	r3, [r4, #20]
 800b4f8:	425b      	negs	r3, r3
 800b4fa:	61a3      	str	r3, [r4, #24]
 800b4fc:	6923      	ldr	r3, [r4, #16]
 800b4fe:	b943      	cbnz	r3, 800b512 <__swsetup_r+0xc6>
 800b500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b504:	d1ba      	bne.n	800b47c <__swsetup_r+0x30>
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	0781      	lsls	r1, r0, #30
 800b50a:	bf58      	it	pl
 800b50c:	6963      	ldrpl	r3, [r4, #20]
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	e7f4      	b.n	800b4fc <__swsetup_r+0xb0>
 800b512:	2000      	movs	r0, #0
 800b514:	e7f7      	b.n	800b506 <__swsetup_r+0xba>
 800b516:	bf00      	nop
 800b518:	20000014 	.word	0x20000014
 800b51c:	0800c10c 	.word	0x0800c10c
 800b520:	0800c12c 	.word	0x0800c12c
 800b524:	0800c0ec 	.word	0x0800c0ec

0800b528 <abort>:
 800b528:	2006      	movs	r0, #6
 800b52a:	b508      	push	{r3, lr}
 800b52c:	f000 fa50 	bl	800b9d0 <raise>
 800b530:	2001      	movs	r0, #1
 800b532:	f7f6 fb00 	bl	8001b36 <_exit>
	...

0800b538 <__sflush_r>:
 800b538:	898a      	ldrh	r2, [r1, #12]
 800b53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53c:	4605      	mov	r5, r0
 800b53e:	0710      	lsls	r0, r2, #28
 800b540:	460c      	mov	r4, r1
 800b542:	d457      	bmi.n	800b5f4 <__sflush_r+0xbc>
 800b544:	684b      	ldr	r3, [r1, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	dc04      	bgt.n	800b554 <__sflush_r+0x1c>
 800b54a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dc01      	bgt.n	800b554 <__sflush_r+0x1c>
 800b550:	2000      	movs	r0, #0
 800b552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b556:	2e00      	cmp	r6, #0
 800b558:	d0fa      	beq.n	800b550 <__sflush_r+0x18>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b560:	682f      	ldr	r7, [r5, #0]
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	d032      	beq.n	800b5cc <__sflush_r+0x94>
 800b566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	075a      	lsls	r2, r3, #29
 800b56c:	d505      	bpl.n	800b57a <__sflush_r+0x42>
 800b56e:	6863      	ldr	r3, [r4, #4]
 800b570:	1ac0      	subs	r0, r0, r3
 800b572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b574:	b10b      	cbz	r3, 800b57a <__sflush_r+0x42>
 800b576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b578:	1ac0      	subs	r0, r0, r3
 800b57a:	2300      	movs	r3, #0
 800b57c:	4602      	mov	r2, r0
 800b57e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b580:	4628      	mov	r0, r5
 800b582:	6a21      	ldr	r1, [r4, #32]
 800b584:	47b0      	blx	r6
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	d106      	bne.n	800b59a <__sflush_r+0x62>
 800b58c:	6829      	ldr	r1, [r5, #0]
 800b58e:	291d      	cmp	r1, #29
 800b590:	d82c      	bhi.n	800b5ec <__sflush_r+0xb4>
 800b592:	4a29      	ldr	r2, [pc, #164]	; (800b638 <__sflush_r+0x100>)
 800b594:	40ca      	lsrs	r2, r1
 800b596:	07d6      	lsls	r6, r2, #31
 800b598:	d528      	bpl.n	800b5ec <__sflush_r+0xb4>
 800b59a:	2200      	movs	r2, #0
 800b59c:	6062      	str	r2, [r4, #4]
 800b59e:	6922      	ldr	r2, [r4, #16]
 800b5a0:	04d9      	lsls	r1, r3, #19
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	d504      	bpl.n	800b5b0 <__sflush_r+0x78>
 800b5a6:	1c42      	adds	r2, r0, #1
 800b5a8:	d101      	bne.n	800b5ae <__sflush_r+0x76>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b903      	cbnz	r3, 800b5b0 <__sflush_r+0x78>
 800b5ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b5b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b2:	602f      	str	r7, [r5, #0]
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d0cb      	beq.n	800b550 <__sflush_r+0x18>
 800b5b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	d002      	beq.n	800b5c6 <__sflush_r+0x8e>
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f7ff faa5 	bl	800ab10 <_free_r>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ca:	e7c2      	b.n	800b552 <__sflush_r+0x1a>
 800b5cc:	6a21      	ldr	r1, [r4, #32]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b0      	blx	r6
 800b5d4:	1c41      	adds	r1, r0, #1
 800b5d6:	d1c7      	bne.n	800b568 <__sflush_r+0x30>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0c4      	beq.n	800b568 <__sflush_r+0x30>
 800b5de:	2b1d      	cmp	r3, #29
 800b5e0:	d001      	beq.n	800b5e6 <__sflush_r+0xae>
 800b5e2:	2b16      	cmp	r3, #22
 800b5e4:	d101      	bne.n	800b5ea <__sflush_r+0xb2>
 800b5e6:	602f      	str	r7, [r5, #0]
 800b5e8:	e7b2      	b.n	800b550 <__sflush_r+0x18>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f0:	81a3      	strh	r3, [r4, #12]
 800b5f2:	e7ae      	b.n	800b552 <__sflush_r+0x1a>
 800b5f4:	690f      	ldr	r7, [r1, #16]
 800b5f6:	2f00      	cmp	r7, #0
 800b5f8:	d0aa      	beq.n	800b550 <__sflush_r+0x18>
 800b5fa:	0793      	lsls	r3, r2, #30
 800b5fc:	bf18      	it	ne
 800b5fe:	2300      	movne	r3, #0
 800b600:	680e      	ldr	r6, [r1, #0]
 800b602:	bf08      	it	eq
 800b604:	694b      	ldreq	r3, [r1, #20]
 800b606:	1bf6      	subs	r6, r6, r7
 800b608:	600f      	str	r7, [r1, #0]
 800b60a:	608b      	str	r3, [r1, #8]
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	dd9f      	ble.n	800b550 <__sflush_r+0x18>
 800b610:	4633      	mov	r3, r6
 800b612:	463a      	mov	r2, r7
 800b614:	4628      	mov	r0, r5
 800b616:	6a21      	ldr	r1, [r4, #32]
 800b618:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b61c:	47e0      	blx	ip
 800b61e:	2800      	cmp	r0, #0
 800b620:	dc06      	bgt.n	800b630 <__sflush_r+0xf8>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f04f 30ff 	mov.w	r0, #4294967295
 800b628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	e790      	b.n	800b552 <__sflush_r+0x1a>
 800b630:	4407      	add	r7, r0
 800b632:	1a36      	subs	r6, r6, r0
 800b634:	e7ea      	b.n	800b60c <__sflush_r+0xd4>
 800b636:	bf00      	nop
 800b638:	20400001 	.word	0x20400001

0800b63c <_fflush_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	690b      	ldr	r3, [r1, #16]
 800b640:	4605      	mov	r5, r0
 800b642:	460c      	mov	r4, r1
 800b644:	b913      	cbnz	r3, 800b64c <_fflush_r+0x10>
 800b646:	2500      	movs	r5, #0
 800b648:	4628      	mov	r0, r5
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	b118      	cbz	r0, 800b656 <_fflush_r+0x1a>
 800b64e:	6983      	ldr	r3, [r0, #24]
 800b650:	b90b      	cbnz	r3, 800b656 <_fflush_r+0x1a>
 800b652:	f000 f887 	bl	800b764 <__sinit>
 800b656:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <_fflush_r+0x6c>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d11b      	bne.n	800b694 <_fflush_r+0x58>
 800b65c:	686c      	ldr	r4, [r5, #4]
 800b65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0ef      	beq.n	800b646 <_fflush_r+0xa>
 800b666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b668:	07d0      	lsls	r0, r2, #31
 800b66a:	d404      	bmi.n	800b676 <_fflush_r+0x3a>
 800b66c:	0599      	lsls	r1, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_fflush_r+0x3a>
 800b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b672:	f000 f915 	bl	800b8a0 <__retarget_lock_acquire_recursive>
 800b676:	4628      	mov	r0, r5
 800b678:	4621      	mov	r1, r4
 800b67a:	f7ff ff5d 	bl	800b538 <__sflush_r>
 800b67e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b680:	4605      	mov	r5, r0
 800b682:	07da      	lsls	r2, r3, #31
 800b684:	d4e0      	bmi.n	800b648 <_fflush_r+0xc>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	059b      	lsls	r3, r3, #22
 800b68a:	d4dd      	bmi.n	800b648 <_fflush_r+0xc>
 800b68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b68e:	f000 f908 	bl	800b8a2 <__retarget_lock_release_recursive>
 800b692:	e7d9      	b.n	800b648 <_fflush_r+0xc>
 800b694:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <_fflush_r+0x70>)
 800b696:	429c      	cmp	r4, r3
 800b698:	d101      	bne.n	800b69e <_fflush_r+0x62>
 800b69a:	68ac      	ldr	r4, [r5, #8]
 800b69c:	e7df      	b.n	800b65e <_fflush_r+0x22>
 800b69e:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <_fflush_r+0x74>)
 800b6a0:	429c      	cmp	r4, r3
 800b6a2:	bf08      	it	eq
 800b6a4:	68ec      	ldreq	r4, [r5, #12]
 800b6a6:	e7da      	b.n	800b65e <_fflush_r+0x22>
 800b6a8:	0800c10c 	.word	0x0800c10c
 800b6ac:	0800c12c 	.word	0x0800c12c
 800b6b0:	0800c0ec 	.word	0x0800c0ec

0800b6b4 <std>:
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	b510      	push	{r4, lr}
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6c2:	6083      	str	r3, [r0, #8]
 800b6c4:	8181      	strh	r1, [r0, #12]
 800b6c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b6c8:	81c2      	strh	r2, [r0, #14]
 800b6ca:	6183      	str	r3, [r0, #24]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	2208      	movs	r2, #8
 800b6d0:	305c      	adds	r0, #92	; 0x5c
 800b6d2:	f7fb fe1b 	bl	800730c <memset>
 800b6d6:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <std+0x38>)
 800b6d8:	6224      	str	r4, [r4, #32]
 800b6da:	6263      	str	r3, [r4, #36]	; 0x24
 800b6dc:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <std+0x3c>)
 800b6de:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6e0:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <std+0x40>)
 800b6e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <std+0x44>)
 800b6e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0800ba09 	.word	0x0800ba09
 800b6f0:	0800ba2b 	.word	0x0800ba2b
 800b6f4:	0800ba63 	.word	0x0800ba63
 800b6f8:	0800ba87 	.word	0x0800ba87

0800b6fc <_cleanup_r>:
 800b6fc:	4901      	ldr	r1, [pc, #4]	; (800b704 <_cleanup_r+0x8>)
 800b6fe:	f000 b8af 	b.w	800b860 <_fwalk_reent>
 800b702:	bf00      	nop
 800b704:	0800b63d 	.word	0x0800b63d

0800b708 <__sfmoreglue>:
 800b708:	2268      	movs	r2, #104	; 0x68
 800b70a:	b570      	push	{r4, r5, r6, lr}
 800b70c:	1e4d      	subs	r5, r1, #1
 800b70e:	4355      	muls	r5, r2
 800b710:	460e      	mov	r6, r1
 800b712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b716:	f7ff fa63 	bl	800abe0 <_malloc_r>
 800b71a:	4604      	mov	r4, r0
 800b71c:	b140      	cbz	r0, 800b730 <__sfmoreglue+0x28>
 800b71e:	2100      	movs	r1, #0
 800b720:	e9c0 1600 	strd	r1, r6, [r0]
 800b724:	300c      	adds	r0, #12
 800b726:	60a0      	str	r0, [r4, #8]
 800b728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b72c:	f7fb fdee 	bl	800730c <memset>
 800b730:	4620      	mov	r0, r4
 800b732:	bd70      	pop	{r4, r5, r6, pc}

0800b734 <__sfp_lock_acquire>:
 800b734:	4801      	ldr	r0, [pc, #4]	; (800b73c <__sfp_lock_acquire+0x8>)
 800b736:	f000 b8b3 	b.w	800b8a0 <__retarget_lock_acquire_recursive>
 800b73a:	bf00      	nop
 800b73c:	20001c99 	.word	0x20001c99

0800b740 <__sfp_lock_release>:
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <__sfp_lock_release+0x8>)
 800b742:	f000 b8ae 	b.w	800b8a2 <__retarget_lock_release_recursive>
 800b746:	bf00      	nop
 800b748:	20001c99 	.word	0x20001c99

0800b74c <__sinit_lock_acquire>:
 800b74c:	4801      	ldr	r0, [pc, #4]	; (800b754 <__sinit_lock_acquire+0x8>)
 800b74e:	f000 b8a7 	b.w	800b8a0 <__retarget_lock_acquire_recursive>
 800b752:	bf00      	nop
 800b754:	20001c9a 	.word	0x20001c9a

0800b758 <__sinit_lock_release>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__sinit_lock_release+0x8>)
 800b75a:	f000 b8a2 	b.w	800b8a2 <__retarget_lock_release_recursive>
 800b75e:	bf00      	nop
 800b760:	20001c9a 	.word	0x20001c9a

0800b764 <__sinit>:
 800b764:	b510      	push	{r4, lr}
 800b766:	4604      	mov	r4, r0
 800b768:	f7ff fff0 	bl	800b74c <__sinit_lock_acquire>
 800b76c:	69a3      	ldr	r3, [r4, #24]
 800b76e:	b11b      	cbz	r3, 800b778 <__sinit+0x14>
 800b770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b774:	f7ff bff0 	b.w	800b758 <__sinit_lock_release>
 800b778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b77c:	6523      	str	r3, [r4, #80]	; 0x50
 800b77e:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <__sinit+0x68>)
 800b780:	4a13      	ldr	r2, [pc, #76]	; (800b7d0 <__sinit+0x6c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	62a2      	str	r2, [r4, #40]	; 0x28
 800b786:	42a3      	cmp	r3, r4
 800b788:	bf08      	it	eq
 800b78a:	2301      	moveq	r3, #1
 800b78c:	4620      	mov	r0, r4
 800b78e:	bf08      	it	eq
 800b790:	61a3      	streq	r3, [r4, #24]
 800b792:	f000 f81f 	bl	800b7d4 <__sfp>
 800b796:	6060      	str	r0, [r4, #4]
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f81b 	bl	800b7d4 <__sfp>
 800b79e:	60a0      	str	r0, [r4, #8]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 f817 	bl	800b7d4 <__sfp>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2104      	movs	r1, #4
 800b7aa:	60e0      	str	r0, [r4, #12]
 800b7ac:	6860      	ldr	r0, [r4, #4]
 800b7ae:	f7ff ff81 	bl	800b6b4 <std>
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	2109      	movs	r1, #9
 800b7b6:	68a0      	ldr	r0, [r4, #8]
 800b7b8:	f7ff ff7c 	bl	800b6b4 <std>
 800b7bc:	2202      	movs	r2, #2
 800b7be:	2112      	movs	r1, #18
 800b7c0:	68e0      	ldr	r0, [r4, #12]
 800b7c2:	f7ff ff77 	bl	800b6b4 <std>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61a3      	str	r3, [r4, #24]
 800b7ca:	e7d1      	b.n	800b770 <__sinit+0xc>
 800b7cc:	0800bca4 	.word	0x0800bca4
 800b7d0:	0800b6fd 	.word	0x0800b6fd

0800b7d4 <__sfp>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	f7ff ffac 	bl	800b734 <__sfp_lock_acquire>
 800b7dc:	4b1e      	ldr	r3, [pc, #120]	; (800b858 <__sfp+0x84>)
 800b7de:	681e      	ldr	r6, [r3, #0]
 800b7e0:	69b3      	ldr	r3, [r6, #24]
 800b7e2:	b913      	cbnz	r3, 800b7ea <__sfp+0x16>
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f7ff ffbd 	bl	800b764 <__sinit>
 800b7ea:	3648      	adds	r6, #72	; 0x48
 800b7ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	d503      	bpl.n	800b7fc <__sfp+0x28>
 800b7f4:	6833      	ldr	r3, [r6, #0]
 800b7f6:	b30b      	cbz	r3, 800b83c <__sfp+0x68>
 800b7f8:	6836      	ldr	r6, [r6, #0]
 800b7fa:	e7f7      	b.n	800b7ec <__sfp+0x18>
 800b7fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b800:	b9d5      	cbnz	r5, 800b838 <__sfp+0x64>
 800b802:	4b16      	ldr	r3, [pc, #88]	; (800b85c <__sfp+0x88>)
 800b804:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b808:	60e3      	str	r3, [r4, #12]
 800b80a:	6665      	str	r5, [r4, #100]	; 0x64
 800b80c:	f000 f847 	bl	800b89e <__retarget_lock_init_recursive>
 800b810:	f7ff ff96 	bl	800b740 <__sfp_lock_release>
 800b814:	2208      	movs	r2, #8
 800b816:	4629      	mov	r1, r5
 800b818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b81c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b820:	6025      	str	r5, [r4, #0]
 800b822:	61a5      	str	r5, [r4, #24]
 800b824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b828:	f7fb fd70 	bl	800730c <memset>
 800b82c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b834:	4620      	mov	r0, r4
 800b836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b838:	3468      	adds	r4, #104	; 0x68
 800b83a:	e7d9      	b.n	800b7f0 <__sfp+0x1c>
 800b83c:	2104      	movs	r1, #4
 800b83e:	4638      	mov	r0, r7
 800b840:	f7ff ff62 	bl	800b708 <__sfmoreglue>
 800b844:	4604      	mov	r4, r0
 800b846:	6030      	str	r0, [r6, #0]
 800b848:	2800      	cmp	r0, #0
 800b84a:	d1d5      	bne.n	800b7f8 <__sfp+0x24>
 800b84c:	f7ff ff78 	bl	800b740 <__sfp_lock_release>
 800b850:	230c      	movs	r3, #12
 800b852:	603b      	str	r3, [r7, #0]
 800b854:	e7ee      	b.n	800b834 <__sfp+0x60>
 800b856:	bf00      	nop
 800b858:	0800bca4 	.word	0x0800bca4
 800b85c:	ffff0001 	.word	0xffff0001

0800b860 <_fwalk_reent>:
 800b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b864:	4606      	mov	r6, r0
 800b866:	4688      	mov	r8, r1
 800b868:	2700      	movs	r7, #0
 800b86a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b86e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b872:	f1b9 0901 	subs.w	r9, r9, #1
 800b876:	d505      	bpl.n	800b884 <_fwalk_reent+0x24>
 800b878:	6824      	ldr	r4, [r4, #0]
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	d1f7      	bne.n	800b86e <_fwalk_reent+0xe>
 800b87e:	4638      	mov	r0, r7
 800b880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b884:	89ab      	ldrh	r3, [r5, #12]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d907      	bls.n	800b89a <_fwalk_reent+0x3a>
 800b88a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b88e:	3301      	adds	r3, #1
 800b890:	d003      	beq.n	800b89a <_fwalk_reent+0x3a>
 800b892:	4629      	mov	r1, r5
 800b894:	4630      	mov	r0, r6
 800b896:	47c0      	blx	r8
 800b898:	4307      	orrs	r7, r0
 800b89a:	3568      	adds	r5, #104	; 0x68
 800b89c:	e7e9      	b.n	800b872 <_fwalk_reent+0x12>

0800b89e <__retarget_lock_init_recursive>:
 800b89e:	4770      	bx	lr

0800b8a0 <__retarget_lock_acquire_recursive>:
 800b8a0:	4770      	bx	lr

0800b8a2 <__retarget_lock_release_recursive>:
 800b8a2:	4770      	bx	lr

0800b8a4 <__swhatbuf_r>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	2900      	cmp	r1, #0
 800b8b0:	461d      	mov	r5, r3
 800b8b2:	b096      	sub	sp, #88	; 0x58
 800b8b4:	da08      	bge.n	800b8c8 <__swhatbuf_r+0x24>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	061a      	lsls	r2, r3, #24
 800b8c0:	d410      	bmi.n	800b8e4 <__swhatbuf_r+0x40>
 800b8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c6:	e00e      	b.n	800b8e6 <__swhatbuf_r+0x42>
 800b8c8:	466a      	mov	r2, sp
 800b8ca:	f000 f903 	bl	800bad4 <_fstat_r>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	dbf1      	blt.n	800b8b6 <__swhatbuf_r+0x12>
 800b8d2:	9a01      	ldr	r2, [sp, #4]
 800b8d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8dc:	425a      	negs	r2, r3
 800b8de:	415a      	adcs	r2, r3
 800b8e0:	602a      	str	r2, [r5, #0]
 800b8e2:	e7ee      	b.n	800b8c2 <__swhatbuf_r+0x1e>
 800b8e4:	2340      	movs	r3, #64	; 0x40
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	b016      	add	sp, #88	; 0x58
 800b8ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8f0 <__smakebuf_r>:
 800b8f0:	898b      	ldrh	r3, [r1, #12]
 800b8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f4:	079d      	lsls	r5, r3, #30
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	d507      	bpl.n	800b90c <__smakebuf_r+0x1c>
 800b8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	2301      	movs	r3, #1
 800b906:	6163      	str	r3, [r4, #20]
 800b908:	b002      	add	sp, #8
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	466a      	mov	r2, sp
 800b90e:	ab01      	add	r3, sp, #4
 800b910:	f7ff ffc8 	bl	800b8a4 <__swhatbuf_r>
 800b914:	9900      	ldr	r1, [sp, #0]
 800b916:	4605      	mov	r5, r0
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff f961 	bl	800abe0 <_malloc_r>
 800b91e:	b948      	cbnz	r0, 800b934 <__smakebuf_r+0x44>
 800b920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d4ef      	bmi.n	800b908 <__smakebuf_r+0x18>
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	f043 0302 	orr.w	r3, r3, #2
 800b930:	81a3      	strh	r3, [r4, #12]
 800b932:	e7e3      	b.n	800b8fc <__smakebuf_r+0xc>
 800b934:	4b0d      	ldr	r3, [pc, #52]	; (800b96c <__smakebuf_r+0x7c>)
 800b936:	62b3      	str	r3, [r6, #40]	; 0x28
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	6020      	str	r0, [r4, #0]
 800b93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	6120      	str	r0, [r4, #16]
 800b946:	6163      	str	r3, [r4, #20]
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	b15b      	cbz	r3, 800b964 <__smakebuf_r+0x74>
 800b94c:	4630      	mov	r0, r6
 800b94e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b952:	f000 f8d1 	bl	800baf8 <_isatty_r>
 800b956:	b128      	cbz	r0, 800b964 <__smakebuf_r+0x74>
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	f023 0303 	bic.w	r3, r3, #3
 800b95e:	f043 0301 	orr.w	r3, r3, #1
 800b962:	81a3      	strh	r3, [r4, #12]
 800b964:	89a0      	ldrh	r0, [r4, #12]
 800b966:	4305      	orrs	r5, r0
 800b968:	81a5      	strh	r5, [r4, #12]
 800b96a:	e7cd      	b.n	800b908 <__smakebuf_r+0x18>
 800b96c:	0800b6fd 	.word	0x0800b6fd

0800b970 <_malloc_usable_size_r>:
 800b970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b974:	1f18      	subs	r0, r3, #4
 800b976:	2b00      	cmp	r3, #0
 800b978:	bfbc      	itt	lt
 800b97a:	580b      	ldrlt	r3, [r1, r0]
 800b97c:	18c0      	addlt	r0, r0, r3
 800b97e:	4770      	bx	lr

0800b980 <_raise_r>:
 800b980:	291f      	cmp	r1, #31
 800b982:	b538      	push	{r3, r4, r5, lr}
 800b984:	4604      	mov	r4, r0
 800b986:	460d      	mov	r5, r1
 800b988:	d904      	bls.n	800b994 <_raise_r+0x14>
 800b98a:	2316      	movs	r3, #22
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b996:	b112      	cbz	r2, 800b99e <_raise_r+0x1e>
 800b998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b99c:	b94b      	cbnz	r3, 800b9b2 <_raise_r+0x32>
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 f830 	bl	800ba04 <_getpid_r>
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ae:	f000 b817 	b.w	800b9e0 <_kill_r>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d00a      	beq.n	800b9cc <_raise_r+0x4c>
 800b9b6:	1c59      	adds	r1, r3, #1
 800b9b8:	d103      	bne.n	800b9c2 <_raise_r+0x42>
 800b9ba:	2316      	movs	r3, #22
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e7e7      	b.n	800b992 <_raise_r+0x12>
 800b9c2:	2400      	movs	r4, #0
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9ca:	4798      	blx	r3
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e7e0      	b.n	800b992 <_raise_r+0x12>

0800b9d0 <raise>:
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <raise+0xc>)
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	f7ff bfd3 	b.w	800b980 <_raise_r>
 800b9da:	bf00      	nop
 800b9dc:	20000014 	.word	0x20000014

0800b9e0 <_kill_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	4d06      	ldr	r5, [pc, #24]	; (800ba00 <_kill_r+0x20>)
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	f7f6 f892 	bl	8001b16 <_kill>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	d102      	bne.n	800b9fc <_kill_r+0x1c>
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	b103      	cbz	r3, 800b9fc <_kill_r+0x1c>
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	bd38      	pop	{r3, r4, r5, pc}
 800b9fe:	bf00      	nop
 800ba00:	20001c94 	.word	0x20001c94

0800ba04 <_getpid_r>:
 800ba04:	f7f6 b880 	b.w	8001b08 <_getpid>

0800ba08 <__sread>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba10:	f000 f894 	bl	800bb3c <_read_r>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	bfab      	itete	ge
 800ba18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba1c:	181b      	addge	r3, r3, r0
 800ba1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba22:	bfac      	ite	ge
 800ba24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba26:	81a3      	strhlt	r3, [r4, #12]
 800ba28:	bd10      	pop	{r4, pc}

0800ba2a <__swrite>:
 800ba2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2e:	461f      	mov	r7, r3
 800ba30:	898b      	ldrh	r3, [r1, #12]
 800ba32:	4605      	mov	r5, r0
 800ba34:	05db      	lsls	r3, r3, #23
 800ba36:	460c      	mov	r4, r1
 800ba38:	4616      	mov	r6, r2
 800ba3a:	d505      	bpl.n	800ba48 <__swrite+0x1e>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba44:	f000 f868 	bl	800bb18 <_lseek_r>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	4628      	mov	r0, r5
 800ba54:	463b      	mov	r3, r7
 800ba56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5e:	f000 b817 	b.w	800ba90 <_write_r>

0800ba62 <__sseek>:
 800ba62:	b510      	push	{r4, lr}
 800ba64:	460c      	mov	r4, r1
 800ba66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6a:	f000 f855 	bl	800bb18 <_lseek_r>
 800ba6e:	1c43      	adds	r3, r0, #1
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	bf15      	itete	ne
 800ba74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba7e:	81a3      	strheq	r3, [r4, #12]
 800ba80:	bf18      	it	ne
 800ba82:	81a3      	strhne	r3, [r4, #12]
 800ba84:	bd10      	pop	{r4, pc}

0800ba86 <__sclose>:
 800ba86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8a:	f000 b813 	b.w	800bab4 <_close_r>
	...

0800ba90 <_write_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	4611      	mov	r1, r2
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4d05      	ldr	r5, [pc, #20]	; (800bab0 <_write_r+0x20>)
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7f6 f870 	bl	8001b84 <_write>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_write_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_write_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20001c94 	.word	0x20001c94

0800bab4 <_close_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	2300      	movs	r3, #0
 800bab8:	4d05      	ldr	r5, [pc, #20]	; (800bad0 <_close_r+0x1c>)
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	602b      	str	r3, [r5, #0]
 800bac0:	f7f6 f87c 	bl	8001bbc <_close>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_close_r+0x1a>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	b103      	cbz	r3, 800bace <_close_r+0x1a>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	20001c94 	.word	0x20001c94

0800bad4 <_fstat_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	2300      	movs	r3, #0
 800bad8:	4d06      	ldr	r5, [pc, #24]	; (800baf4 <_fstat_r+0x20>)
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	f7f6 f876 	bl	8001bd2 <_fstat>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d102      	bne.n	800baf0 <_fstat_r+0x1c>
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	b103      	cbz	r3, 800baf0 <_fstat_r+0x1c>
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	20001c94 	.word	0x20001c94

0800baf8 <_isatty_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	2300      	movs	r3, #0
 800bafc:	4d05      	ldr	r5, [pc, #20]	; (800bb14 <_isatty_r+0x1c>)
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	f7f6 f874 	bl	8001bf0 <_isatty>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_isatty_r+0x1a>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_isatty_r+0x1a>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20001c94 	.word	0x20001c94

0800bb18 <_lseek_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	2200      	movs	r2, #0
 800bb22:	4d05      	ldr	r5, [pc, #20]	; (800bb38 <_lseek_r+0x20>)
 800bb24:	602a      	str	r2, [r5, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	f7f6 f86c 	bl	8001c04 <_lseek>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d102      	bne.n	800bb36 <_lseek_r+0x1e>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	b103      	cbz	r3, 800bb36 <_lseek_r+0x1e>
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	20001c94 	.word	0x20001c94

0800bb3c <_read_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	4611      	mov	r1, r2
 800bb44:	2200      	movs	r2, #0
 800bb46:	4d05      	ldr	r5, [pc, #20]	; (800bb5c <_read_r+0x20>)
 800bb48:	602a      	str	r2, [r5, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f7f5 fffd 	bl	8001b4a <_read>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	d102      	bne.n	800bb5a <_read_r+0x1e>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	b103      	cbz	r3, 800bb5a <_read_r+0x1e>
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	20001c94 	.word	0x20001c94

0800bb60 <_init>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	bf00      	nop
 800bb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb66:	bc08      	pop	{r3}
 800bb68:	469e      	mov	lr, r3
 800bb6a:	4770      	bx	lr

0800bb6c <_fini>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	bf00      	nop
 800bb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb72:	bc08      	pop	{r3}
 800bb74:	469e      	mov	lr, r3
 800bb76:	4770      	bx	lr
